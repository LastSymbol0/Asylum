import { createSelector, createSlice } from '@reduxjs/toolkit';
import { PublicKey } from '@solana/web3.js'
import { RootState } from '../../app/store';
import { dummyGames } from './dummyGames';
import { fetchGamesNfts } from './thunks';

export interface GameNftData {
  address: PublicKey,
  title: string,
  description: string,
  cover: string,
  launchUrl: string,
  images: string[],
  tokenMint: PublicKey,
  itemsMint: PublicKey[],
  validationLevel: number,
}

export interface GamesNftStoreState {
  inProgress: PublicKey[],
  loaded: GameNftData[],
  failed: PublicKey[]
}

const initialState: GamesNftStoreState = {
  inProgress: [],
  loaded: [...dummyGames],
  failed: []
};

export const gamesNtfStoreSlice = createSlice({
  name: 'gamesNftStore',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {

    builder.addCase(fetchGamesNfts.fulfilled, (state, action) =>
    {
        const succeed = action.payload.filter(x => x.ok).map(x => x.game as GameNftData)
        const failed = action.payload.filter(x => !x.ok).map(x => x.mint)

        console.log("succeed ids", succeed.map(x => x.address.toString( )))
        console.log("succeed", succeed)
        state.loaded = state.loaded.concat(succeed)
        state.failed = state.failed.concat(failed)

        return state
    })
  },
});

const selectState = (state: RootState) => state.gamesNftStore;

export const selectNftGames = (rootState: RootState, games: PublicKey[]) =>
{
  const state = selectState(rootState)

  const gamesInProgress = state.inProgress.filter(x => games.find(a => a.toString() === x.toString()));
  const gamesLoaded = state.loaded.filter(x => games.find(a => a.toString() === x.address.toString()));
  const gamesFailed = state.failed.filter(x => games.find(a => a.toString() === x.toString()));

  const result: Record<string, GameState> = {};

  gamesInProgress.forEach(x => result[x.toString()] = { status: 'inProgress' })
  gamesLoaded.forEach(x => result[x.address.toString()] = { status: 'loaded', game: x })
  gamesFailed.forEach(x => result[x.toString()] = { status: 'failed' })

  return result;
}

export interface GameState {
  status: GameLoadingStatus,
  game?: GameNftData
}

export type GameLoadingStatus = 'inProgress' | 'loaded' | 'failed'

export default gamesNtfStoreSlice.reducer;
