import { StringPublicKey } from 'oyster-common';
import { createSlice } from '@reduxjs/toolkit';
import { fetchGamesLibrary } from './thunks';

export interface LibraryPageState {
  gamesInLibrary: StringPublicKey[],
  isLibraryFetched: boolean,
}

const initialState: LibraryPageState = {
  gamesInLibrary: [],
  isLibraryFetched: false,
};

export const libraryPageSlice = createSlice({
  name: 'libraryPage',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchGamesLibrary.fulfilled, (state, action) => {

      const set = new Set<StringPublicKey>()

      action.payload.forEach(x => set.add(x.toString()))

      state.gamesInLibrary = [...set]
      state.isLibraryFetched = true
    })

    builder.addCase(fetchGamesLibrary.rejected, (state, action) => {
      state.isLibraryFetched = false
    })
  },
});


export default libraryPageSlice.reducer;
