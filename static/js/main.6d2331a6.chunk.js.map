{"version":3,"sources":["lib/metaplex.ts","lib/asylum.ts","components/NavigationPanel/index.tsx","pages/GamesStore/index.tsx","pages/Inventory/store/thunks.ts","lib/players.ts","demos/Demo1_players.js","demos/Demo2_achievements.js","routes.ts","pages/Account/index.tsx","pages/Inventory/index.tsx","pages/Library/index.tsx","pages/Marketplace/index.tsx","demos/Demo3_game.tsx","App.tsx","pages/Account/store/accountSlice.ts","pages/GamesStore/store/gamesStoreSlice.ts","pages/Inventory/store/inventorySlice.ts","pages/Library/store/librarySlice.ts","pages/Marketplace/store/marketplaceSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["TOKEN_METADATA_PROGRAM_ID","PublicKey","getMetadata","mint","a","anchor","findProgramAddress","Buffer","from","toBuffer","getMasterEdition","getEditionMarkPda","edition","editionNumber","Math","floor","toString","findAchievementsAccountAddress","programId","findGamesCatalogAccountAddress","initAsylumAccounts","program","Promise","all","initAchievementsAccount","initGamesCatalogAccount","userPublicKey","provider","wallet","publicKey","account","nonce","rpc","initializeAchievements","accounts","achievementsAccount","user","systemProgram","web3","SystemProgram","addAchievement","label","description","game","initializeGamesCatalog","gamesCatalogAccount","addGameToCatalog","NavigationPanel","pages","routeMatch","useRouteMatch","map","x","path","currentTab","Tabs","orientation","variant","value","i","style","marginTop","Tab","name","to","component","Link","GamesStorePage","fetchUserTokens","createAsyncThunk","userId","axios","post","tokensResponse","console","log","data","result","mint_key","then","r","findPlayerGlobalAccountAddress","findPlayerGameAccountAddress","gameId","initPlayer","nickname","avatar","default","playerAccount","initialize","updatePlayerNickname","updateNickname","updatePlayerAvatar","updateAvatar","addGameToLibrary","gameAddress","addGame","removeGameFromLibrary","removeGame","achievementId","expToAdd","addExp","exp","playersProgramID","playersIdl","metadata","address","asylumProgramID","asylumIdl","PlayersDemo","useState","isInitialized","setIsInitialized","isInitializedGlobal","setIsInitializedGlobal","setNickname","setAvatar","games","setGames","playerAchievements","setPlayerAchievements","setExp","level","setLevel","achievements","setAchievements","inputNickname","setInputNickname","inputAvatar","setInputAvatar","inputGame","setInputGame","inputAchievements","setInputAchievements","inputAchievementsExp","setInputAchievementsExp","inputExp","setInputExp","useWallet","getProvider","opts","preflightCommitment","connection","Connection","Provider","fetchGlobalData","Program","asylum","achievementsAccountAddress","fetch","fetchPlayerData","players","playerAccountAddress","useEffect","connected","e","error","className","onClick","width","margin","textAlign","length","achievement","find","item","id","display","placeholder","onChange","target","justifyContent","programID","idl","inputAchievementName","setInputAchievementName","inputAchievementDescription","setInputAchievementDescription","inputAchievementGame","setInputAchievementGame","fetchAchievements","routes","useDispatch","dispatch","AchievementsDemo","src","height","wallets","getPhantomWallet","Pages","exact","App","basename","process","Grid","container","spacing","columns","xs","AppWithProvider","endpoint","autoConnect","accontPageSlice","createSlice","initialState","reducers","extraReducers","builder","gamesStorePageSlice","inventoryPageSlice","items","isLoaded","addCase","fulfilled","state","action","payload","libraryPageSlice","marketplacePageSlice","store","configureStore","reducer","accountPage","accountPageReducer","gamesStorePage","gamesStorePageReducer","inventoryPage","inventoryPageReducer","libraryPage","libraryPageReducer","marketplacePage","marketplacePageReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6d2331a6.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\nexport const TOKEN_METADATA_PROGRAM_ID = new PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\n\r\nexport const getMetadata = async (\r\n    mint: anchor.web3.PublicKey,\r\n  ): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n    )[0];\r\n  };\r\n  \r\n  export const getMasterEdition = async (\r\n    mint: anchor.web3.PublicKey,\r\n  ): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n          Buffer.from('edition'),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n    )[0];\r\n  };\r\n  \r\n  export const getEditionMarkPda = async (\r\n    mint: anchor.web3.PublicKey,\r\n    edition: number,\r\n  ): Promise<anchor.web3.PublicKey> => {\r\n    const editionNumber = Math.floor(edition / 248);\r\n    return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          mint.toBuffer(),\r\n          Buffer.from('edition'),\r\n          Buffer.from(editionNumber.toString()),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n    )[0];\r\n  };","import { PublicKey, SystemProgram } from '@solana/web3.js';\r\nimport { Program, web3 } from '@project-serum/anchor';\r\n\r\n\r\nexport const findAchievementsAccountAddress = (programId: PublicKey): Promise<[PublicKey, number]> => {\r\n    return PublicKey.findProgramAddress([Buffer.from(\"Achievements\")], programId);\r\n}\r\n\r\nexport const findGamesCatalogAccountAddress = (programId: PublicKey): Promise<[PublicKey, number]> => {\r\n    return PublicKey.findProgramAddress([Buffer.from(\"GamesCatalog\")], programId);\r\n}\r\n\r\n\r\nexport const initAsylumAccounts = async (program: Program): Promise<void> => {\r\n    await Promise.all([initAchievementsAccount(program), initGamesCatalogAccount(program)])\r\n}\r\n\r\nexport const initAchievementsAccount = async (program: Program): Promise<void> => {\r\n    const userPublicKey = program.provider.wallet.publicKey;\r\n    const programId = program.programId;\r\n    const [account, nonce] = await findAchievementsAccountAddress(programId);\r\n\r\n    await program.rpc.initializeAchievements(nonce, {\r\n      accounts: {\r\n        achievementsAccount: account,\r\n        user: userPublicKey,\r\n        systemProgram: web3.SystemProgram.programId,\r\n      }\r\n    });\r\n}\r\n\r\nexport const addAchievement = async (program: Program, label: String, description: String, game: PublicKey): Promise<void> => {\r\n    const programId = program.programId;\r\n    const [account, _] = await findAchievementsAccountAddress(programId);\r\n\r\n    await program.rpc.addAchievement(label, description, game, {\r\n      accounts: {\r\n        achievementsAccount: account,\r\n      }\r\n    });\r\n}\r\n\r\nexport const initGamesCatalogAccount = async (program: Program): Promise<void> => {\r\n    const userPublicKey = program.provider.wallet.publicKey;\r\n    const programId = program.programId;\r\n    const [account, nonce] = await findGamesCatalogAccountAddress(programId);\r\n\r\n    await program.rpc.initializeGamesCatalog(nonce, {\r\n      accounts: {\r\n        gamesCatalogAccount: account,\r\n        user: userPublicKey,\r\n        systemProgram: web3.SystemProgram.programId,\r\n      }\r\n    });\r\n}\r\n\r\nexport const addGameToCatalog = async (program: Program, game: PublicKey): Promise<void> => {\r\n    const programId = program.programId;\r\n    const [account, _] = await findAchievementsAccountAddress(programId);\r\n\r\n    await program.rpc.addGameToCatalog(game, {\r\n      accounts: {\r\n        gamesCatalogAccount: account,\r\n      }\r\n    });\r\n}\r\n\r\n","import React from \"react\"\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { Route } from \"../../routes\";\n\nconst NavigationPanel = ({ pages }: { pages: Route[] }) => {\n    const routeMatch = useRouteMatch(pages.map(x => x.path));\n    const currentTab = routeMatch?.path;\n\n    return <Tabs orientation=\"vertical\"\n        variant='fullWidth'\n        value={currentTab}\n    >\n        {pages.map(((x, i) =>\n            <div style={{marginTop: '20px'}}>\n                <Tab label={x.name} value={x.path} to={x.path} component={Link} />\n            </div>))}\n    </Tabs>\n}\n\nexport { NavigationPanel }\n","const GamesStorePage = () => {\n    return <div>GamesStore page placeholder</div>\n}\n\nexport { GamesStorePage }","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { PublicKey } from '@solana/web3.js'\r\n\r\nimport axios from 'axios';\r\nimport { getEditionMarkPda, getMasterEdition, getMetadata } from '../../../lib/metaplex';\r\n\r\nexport const fetchUserTokens = createAsyncThunk(\r\n    'users/fetchByIdStatus',\r\n    async (userId: PublicKey) => {\r\n\r\n    const tokensResponse = await axios.post('http://api.mainnet-beta.solana.com', {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"id\": 1,\r\n        \"method\": \"getProgramAccounts\",\r\n        \"params\": [\r\n          \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\r\n          {\r\n            \"encoding\": \"jsonParsed\",\r\n            \"filters\": [\r\n              {\r\n                \"dataSize\": 165\r\n              },\r\n              {\r\n                \"memcmp\": {\r\n                  \"offset\": 32,\r\n                  \"bytes\": userId.toString()\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      });\r\n      \r\n    console.log(\"user tokens\", tokensResponse)\r\n  \r\n    const results = tokensResponse.data.result;\r\n  \r\n    const programId= new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\n    const mint_key= new PublicKey(\"Brznjf93yY6gfVrvB2UeXJKA2Amu417Mxzx6jbrtFvvu\");\r\n    // const mint_key= new PublicKey(results[0].account.data.parsed.info.mint);\r\n    console.log('hey,')\r\n    console.log(mint_key.toString())\r\n  \r\n    getEditionMarkPda(mint_key, 1).then(r => console.log('1, ', r.toString()));\r\n    getMasterEdition(mint_key).then(r => console.log('2, ', r.toString()));\r\n    getMetadata(mint_key).then(r => console.log('3', r.toString()))\r\n  \r\n    // PublicKey.findProgramAddress(['metadata', mint_key.toBuffer(), programId.toBuffer(),\r\n    // Buffer.from('edition')], programId).then(\r\n    //   result =>{\r\n    //     const tokenMetadataAccAddr = result[0];\r\n  \r\n    //     console.log('hey, you`re lokking nice')\r\n    //     console.log(tokenMetadataAccAddr.toString())\r\n    //   }\r\n    // )\r\n  \r\n\r\n\r\n    }\r\n  )\r\n","import { PublicKey } from '@solana/web3.js';\nimport { Program, web3 } from '@project-serum/anchor';\n\n\nexport const findPlayerGlobalAccountAddress = (userPublicKey: PublicKey, programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([userPublicKey.toBuffer()], programId);\n}\n\nexport const findPlayerGameAccountAddress = (userPublicKey: PublicKey, gameId: PublicKey, programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([userPublicKey.toBuffer(), gameId.toBuffer()], programId);\n}\n\nexport const initPlayer = async (program: Program, nickname: string = \"CryptoBuddy77\", avatar: PublicKey = PublicKey.default): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, nonce] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.initialize(nonce, nickname, avatar, {\n      accounts: {\n        playerAccount: playerAccount,\n        user: userPublicKey,\n        systemProgram: web3.SystemProgram.programId,\n      }\n    });\n}\n\nexport const updatePlayerNickname = async (program: Program, nickname: string): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.updateNickname(nickname, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const updatePlayerAvatar = async (program: Program, avatar: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.updateAvatar(avatar, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const addGameToLibrary = async (program: Program, gameAddress: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.addGame(gameAddress, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const removeGameFromLibrary = async (program: Program, gameAddress: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.removeGame(gameAddress, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const addAchievement = async (program: Program, achievementId: number, expToAdd: number = 0): Promise<void> => {\n  const userPublicKey = program.provider.wallet.publicKey;\n  const programId = program.programId;\n  const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n  await program.rpc.addAchievement(achievementId, expToAdd, {\n    accounts: {\n      playerAccount: playerAccount,\n    }\n  });\n}\n\nexport const addExp = async (program: Program, exp: number): Promise<void> => {\n  const userPublicKey = program.provider.wallet.publicKey;\n  const programId = program.programId;\n  const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n  await program.rpc.addExp(exp, {\n    accounts: {\n      playerAccount: playerAccount,\n    }\n  });\n}","import playersIdl from '../idl/players.json'\nimport asylumIdl from '../idl/asylum.json'\nimport { players, asylum } from '../lib'\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useEffect, useState } from 'react'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Program, Provider } from '@project-serum/anchor'\n\nconst playersProgramID = new PublicKey(playersIdl.metadata.address)\nconst asylumProgramID = new PublicKey(asylumIdl.metadata.address)\n\nfunction PlayersDemo() {\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [isInitializedGlobal, setIsInitializedGlobal] = useState(false)\n\n  const [nickname, setNickname] = useState('')\n  const [avatar, setAvatar] = useState(PublicKey.default)\n  const [games, setGames] = useState([])\n  const [playerAchievements, setPlayerAchievements] = useState([])\n  const [exp, setExp] = useState(0)\n  const [level, setLevel] = useState(0)\n\n  const [achievements, setAchievements] = useState([])\n\n  const [inputNickname, setInputNickname] = useState('')\n  const [inputAvatar, setInputAvatar] = useState('')\n  const [inputGame, setInputGame] = useState('')\n  const [inputAchievements, setInputAchievements] = useState('')\n  const [inputAchievementsExp, setInputAchievementsExp] = useState(0)\n  const [inputExp, setInputExp] = useState(0)\n  const wallet = useWallet()\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const network = \"https://api.devnet.solana.com\";\n    const opts = { preflightCommitment: \"processed\" }\n    const connection = new Connection(network, opts.preflightCommitment)\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    )\n    return provider;\n  }\n\n  async function fetchGlobalData() {\n    const provider = await getProvider()\n    const program = new Program(asylumIdl, asylumProgramID, provider)\n\n    try {\n      const [achievementsAccountAddress, _] = await asylum.findAchievementsAccountAddress(asylumProgramID)\n      const account = await program.account.achievementsAccount.fetch(achievementsAccountAddress)\n\n      console.log(account)\n      setIsInitializedGlobal(true)\n      setAchievements(account.achievements)\n    } catch (err) {\n      console.log(\"Achievements data fetching error: \", err)\n    }\n  }\n\n\n  async function fetchPlayerData() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      const [playerAccountAddress, _] = await players.findPlayerGlobalAccountAddress(wallet.publicKey, playersProgramID)\n      const account = await program.account.playerAccount.fetch(playerAccountAddress)\n\n      console.log(account)\n      setIsInitialized(true)\n      setNickname(account.nickname.toString())\n      setAvatar(account.avatar.toString())\n      setGames(account.games)\n      setPlayerAchievements(account.achievements)\n      setExp(account.exp)\n      setLevel(account.level)\n    } catch (err) {\n      console.log(\"Player data fetching error: \", err)\n    }\n  }\n\n  async function initializePlayer() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      console.log(program)\n      await players.initPlayer(program)\n      setIsInitialized(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n\n  async function initializeGlobal() {\n    const provider = await getProvider()\n    const program = new Program(asylumIdl, asylumProgramID, provider)\n\n    try {\n      console.log(program)\n      await asylum.initAsylumAccounts(program)\n      setIsInitializedGlobal(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchGlobalData()\n  }\n\n  async function updateNickname() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.updatePlayerNickname(program, inputNickname)\n      setInputNickname('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function updateAvatar() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.updatePlayerAvatar(program, new PublicKey(inputAvatar))\n      setInputAvatar('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addGame() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.addGameToLibrary(program, new PublicKey(inputGame))\n      setInputGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function removeGame() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.removeGameFromLibrary(program, new PublicKey(inputGame))\n      setInputGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addAchievement() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.addAchievement(program, inputAchievements, inputAchievementsExp)\n      setInputAchievements('')\n      setInputAchievementsExp('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addExp() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.addExp(program, inputExp)\n      setInputExp('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  useEffect(() => {\n    if (wallet.connected) {\n      try {\n        fetchGlobalData()\n      } catch (e) {\n        if (isInitializedGlobal) {\n          console.error(e)\n        }\n      }\n\n      try {\n        fetchPlayerData()\n      } catch (e) {\n        if (isInitialized) {\n          console.error(e)\n        }\n      }\n    }\n  }, [wallet.connected])\n\n  return (\n    !wallet.connected\n      ?\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n        <WalletMultiButton />\n      </div>\n      :\n      <div className=\"App\">\n        <div>\n          {\n            !isInitializedGlobal && (<button onClick={initializeGlobal}>Initialize global</button>)\n          }\n\n          {\n            isInitializedGlobal && !isInitialized && (<button onClick={initializePlayer}>Initialize</button>)\n          }\n\n          {\n            isInitializedGlobal && isInitialized ? (\n              <div style={{ width: \"fit-content\", margin: \"0 auto\", textAlign: \"left\" }}>\n                <h1>Current player account state</h1>\n                <h3>Current nickname: </h3>{nickname}\n                <h3>Current avatar: </h3>{avatar.toString()}\n                <h3>Current games: </h3>\n                {games && games.length !== 0 ? <ul>{games.map((x, i) => <li key={i}>{x.toString()}</li>)}</ul> : \"No games so far\"}\n                <h3>Achievements: </h3>\n                {playerAchievements && playerAchievements.length !== 0 ?\n                  <ul>{playerAchievements.map((x, i) =>\n                  {\n                    const achievement = achievements.find(item => item.id === i);\n                    const display = achievement\n                      ? `${achievement.label} - ${achievement.description} | Game: ${achievement.game.toString()}`\n                      : `id: ${x}`\n                    return <li key={i}>{display}</li>\n                  })}\n                  </ul>\n                  : \"No achievements so far\"}\n                <h3>Current level: </h3>{level}\n                <h3>Current exp: </h3>{exp}\n\n                <h1 style={{ marginTop: 60 }}>Edit</h1>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"New nickname (string, 32 bytes)\"\n                    onChange={e => setInputNickname(e.target.value)}\n                    value={inputNickname}\n                  />\n                  <button onClick={updateNickname}>Set nickname</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"New avatar (any Public key)\"\n                    onChange={e => setInputAvatar(e.target.value)}\n                    value={inputAvatar}\n                  />\n                  <button onClick={updateAvatar}>Set avatar</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Game id (any Public key)\"\n                    onChange={e => setInputGame(e.target.value)}\n                    value={inputGame}\n                  />\n                  <button onClick={addGame}>Add game</button>\n                  <button onClick={removeGame}>Remove game</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Achievement id (u16)\"\n                    onChange={e => setInputAchievements(e.target.value)}\n                    value={inputAchievements}\n                  />\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Exp to add (optional) (u32)\"\n                    onChange={e => setInputAchievementsExp(e.target.value)}\n                    value={inputAchievementsExp}\n                  />\n                  <button onClick={addAchievement}>Add achievement</button>\n                </div>\n                \n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Exp to add (u32)\"\n                    onChange={e => setInputExp(e.target.value)}\n                    value={inputExp}\n                  />\n                  <button onClick={addExp}>Add exp</button>\n                </div>\n\n              </div>\n            ) : (\n              <h3>Please inialize your account.</h3>\n            )\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default PlayersDemo\n","import idl from '../idl/asylum.json'\nimport { players, asylum } from '../lib'\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useEffect, useState } from 'react'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Program, Provider } from '@project-serum/anchor'\n\nconst programID = new PublicKey(idl.metadata.address)\n\n\nfunction PlayersDemo() {\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  const [achievements, setAchievements] = useState([])\n\n  const [inputAchievementName, setInputAchievementName] = useState('')\n  const [inputAchievementDescription, setInputAchievementDescription] = useState('')\n  const [inputAchievementGame, setInputAchievementGame] = useState('')\n  const wallet = useWallet()\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const network = \"https://api.devnet.solana.com\";\n    const opts = { preflightCommitment: \"processed\" }\n    const connection = new Connection(network, opts.preflightCommitment)\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    )\n    return provider;\n  }\n\n  async function fetchAchievements() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      const [achievementsAccountAddress, _] = await asylum.findAchievementsAccountAddress(programID)\n      const account = await program.account.achievementsAccount.fetch(achievementsAccountAddress)\n\n      console.log(account)\n      setIsInitialized(true)\n      setAchievements(account.achievements)\n    } catch (err) {\n      console.log(\"Achievements data fetching error: \", err)\n    }\n  }\n\n\n  async function initializeGlobal() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      console.log(program)\n      await asylum.initAsylumAccounts(program)\n      setIsInitialized(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchAchievements()\n  }\n\n  async function addAchievement() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await asylum.addAchievement(program, inputAchievementName, inputAchievementDescription, new PublicKey(inputAchievementGame))\n      setInputAchievementName('')\n      setInputAchievementDescription('')\n      setInputAchievementGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchAchievements()\n  }\n\n  useEffect(() => {\n    if (wallet.connected) {\n      try {\n        fetchAchievements()\n      } catch (e) {\n        if (isInitialized) {\n          console.error(e)\n        }\n      }\n    }\n  }, [wallet.connected])\n\n  return (\n    !wallet.connected\n      ?\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n        <WalletMultiButton />\n      </div>\n      :\n      <div className=\"App\">\n        <div>\n          {\n            !isInitialized && (<button onClick={initializeGlobal}>Initialize global</button>)\n          }\n\n          {\n            isInitialized ? (\n              <div style={{ width: \"fit-content\", margin: \"0 auto\", textAlign: \"left\" }}>\n                <h3>Achievements: </h3>\n                {achievements && achievements.length !== 0 ? <ul>{achievements.map((x, i) => <li key={i}>{`${x.label} - ${x.description} | Game: ${x.game.toString()}`}</li>)}</ul> : \"No achievements so far\"}\n\n                <h1 style={{ marginTop: 60 }}>Edit</h1>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Achievement label (String 32)\"\n                    onChange={e => setInputAchievementName(e.target.value)}\n                    value={inputAchievementName}\n                  />\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Achievement description (String 64)\"\n                    onChange={e => setInputAchievementDescription(e.target.value)}\n                    value={inputAchievementDescription}\n                  />\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Game id (any Public key)\"\n                    onChange={e => setInputAchievementGame(e.target.value)}\n                    value={inputAchievementGame}\n                  />\n                  <button onClick={addAchievement}>Add achievement</button>\n                </div>\n\n\n              </div>\n            ) : (\n              <h3>Please inialize your account.</h3>\n            )\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default PlayersDemo\n","\nimport { AccountPage } from './pages/Account';\nimport { GamesStorePage } from './pages/GamesStore';\nimport { InventoryPage } from './pages/Inventory';\nimport { LibraryPage } from './pages/Library';\nimport { MarketplacePage } from './pages/Marketplace';\n\nimport PlayersDemo from './demos/Demo1_players'\nimport AchievementsDemo from './demos/Demo2_achievements'\nimport GameDemo from './demos/Demo3_game';\n\nexport type Route = {\n    path: string;\n    name: string;\n    component: () => JSX.Element;\n}\n\nexport const routes: Route[] = [\n    // Tmp\n    {\n        path: \"/\",\n        name: \"Home\",\n        component: GamesStorePage\n    },\n    {\n        path: \"/account\",\n        name: \"Account\",\n        component: AccountPage\n    },\n    {\n        path: \"/gamesStore\",\n        name: \"Games Store\",\n        component: GamesStorePage\n    },\n    {\n        path: \"/inventory\",\n        name: \"Inventory\",\n        component: InventoryPage\n    },\n    {\n        path: \"/library\",\n        name: \"Library\",\n        component: LibraryPage\n    },\n    {\n        path: \"/marketplace\",\n        name: \"Marketplace\",\n        component: MarketplacePage\n    },\n    {\n        path: \"/demo1\",\n        name: \"[DEV] Demo 1 (Players)\",\n        component: PlayersDemo\n    },\n    {\n        path: \"/demo2\",\n        name: \"[DEV] Demo 2 (Achievements; admin)\",\n        component: AchievementsDemo\n    },\n    {\n        path: \"/demo3\",\n        name: \"[DEV] Demo 3 (Game)\",\n        component: GameDemo\n    }\n]\n","const AccountPage = () => {\n    return <div>Account page placeholder</div>\n}\n\nexport { AccountPage }","import { useWallet } from \"@solana/wallet-adapter-react\"\nimport { PublicKey } from \"@solana/web3.js\"\nimport { useDispatch } from \"react-redux\"\nimport { fetchUserTokens } from \"./store/thunks\"\n\nconst InventoryPage = () => {\n    const wallet = useWallet()\n    const dispatch = useDispatch()\n\n    dispatch(fetchUserTokens(wallet.publicKey ?? new PublicKey(\"\")))\n    \n    return <div>Inventory page placeholder</div>\n}\n\nexport { InventoryPage }","const LibraryPage = () => {\n    return <>\n        <div>Library page placeholder</div>\n    </>\n}\n\nexport { LibraryPage }","const MarketplacePage = () => {\n    return <div>Marketplace page placeholder</div>\n}\n\nexport { MarketplacePage }","const GameDemo = () => {\r\n    return <>\r\n        <iframe src=\"https://lastsymbol0.github.io/Asylum_AnywayLose/\" height=\"800px\" width=\"1400px\"></iframe>\r\n    </>\r\n}\r\n\r\nexport default GameDemo","import './App.css';\nimport { getPhantomWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\nimport { Grid } from '@mui/material'\nimport { NavigationPanel } from './components/NavigationPanel';\nimport { Route as PageRoute, routes } from './routes'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useWallet } from '@solana/wallet-adapter-react'\n\nconst wallets = [getPhantomWallet()]\n\nconst Pages = ({ pages }: { pages: PageRoute[] }) => {\n  \n  return (\n    <Switch>\n      {pages.map((x => <Route path={x.path} key={x.path} exact component={x.component} />))}\n    </Switch>)\n}\n\nfunction App() {\n  const wallet = useWallet()\n\n  return (\n    !wallet.connected\n      ? <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n          <WalletMultiButton />\n        </div>\n      : <div className=\"App\">\n          <HashRouter basename={`/${process.env.PUBLIC_URL}`}>\n\n            <Grid container spacing={2} columns={5}>\n              <Grid item xs={1}>\n                <NavigationPanel pages={routes} />\n              </Grid>\n              <Grid item xs={4}>\n                <Pages pages={routes} />\n              </Grid>\n            </Grid>\n\n          </HashRouter>\n        </div>\n  );\n}\n\nconst AppWithProvider = () => (\n  <ConnectionProvider endpoint=\"https://api.devnet.solana.com\">\n    <WalletProvider wallets={wallets} autoConnect>\n      <WalletModalProvider>\n        <App />\n        {/* <PlayersDemo/> */}\n      </WalletModalProvider>\n    </WalletProvider>\n  </ConnectionProvider>\n)\n\n\nexport default AppWithProvider;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface AccountPageState {\n}\n\nconst initialState: AccountPageState = {\n};\n\nexport const accontPageSlice = createSlice({\n  name: 'accountPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default accontPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface GamesStorePageState {\n}\n\nconst initialState: GamesStorePageState = {\n};\n\nexport const gamesStorePageSlice = createSlice({\n  name: 'gamesStorePage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default gamesStorePageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { PublicKey } from '@solana/web3.js'\nimport { asylum } from '../../../lib';\nimport { fetchUserTokens } from './thunks';\n\nexport type Item = {\n  displayUrl: string,\n  address: PublicKey,\n  name: string,\n  description: string,\n  game: PublicKey,\n  avgPrice: number,\n} \n\nexport interface InventoryPageState {\n  items: Item[],\n  isLoaded: boolean\n}\n\nconst initialState: InventoryPageState = {\n  items: [],\n  isLoaded: false\n};\n\nexport const inventoryPageSlice = createSlice({\n  name: 'inventoryPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n    builder.addCase(fetchUserTokens.fulfilled, (state, action) => {\n      console.log(\"heeeyaaa\",action.payload);\n      // state.items.push(action.payload);\n    })\n  },\n});\n\n\nexport default inventoryPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface LibraryPageState {\n}\n\nconst initialState: LibraryPageState = {\n};\n\nexport const libraryPageSlice = createSlice({\n  name: 'libraryPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default libraryPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface MarketplacePageState {\n}\n\nconst initialState: MarketplacePageState = {\n};\n\nexport const marketplacePageSlice = createSlice({\n  name: 'marketplacePage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default marketplacePageSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport accountPageReducer from '../pages/Account/store/accountSlice';\nimport gamesStorePageReducer from '../pages/GamesStore/store/gamesStoreSlice';\nimport inventoryPageReducer from '../pages/Inventory/store/inventorySlice';\nimport libraryPageReducer from '../pages/Library/store/librarySlice';\nimport marketplacePageReducer from '../pages/Marketplace/store/marketplaceSlice';\n\nexport const store = configureStore({\n  reducer: {\n    accountPage: accountPageReducer,\n    gamesStorePage: gamesStorePageReducer,\n    inventoryPage: inventoryPageReducer,\n    libraryPage: libraryPageReducer,\n    marketplacePage: marketplacePageReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}