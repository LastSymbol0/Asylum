{"version":3,"sources":["assets/telegramIcon.svg","assets/discordIcon.svg","assets/gamer_1_square.png","assets/editPencil.svg","lib/players.ts","app/hooks.ts","assets/gameExample.png","assets/wots_wide.png","assets/wotsH.jpg","assets/wots_wide_logo.png","nft-store/games/dummyGames.ts","nft-store/helpers.ts","nft-store/games/thunks.ts","nft-store/games/gamesNftStore.ts","components/ProfilePanel/index.tsx","components/SearchBar/index.tsx","pages/Library/store/thunks.ts","assets/redDeadImage1.png","assets/redDeadImage2.png","assets/redDeadImage3.png","assets/redDeadImage4.png","components/SingleGameInfo/index.tsx","lib/metaplex/packages/web/src/actions/nft.tsx","pages/GamesStore/store/thunks.ts","components/DevPanelForm/DevPanelForm.tsx","components/DevPanelForm/DevPanelPopover.tsx","components/DevPanelForm/index.tsx","components/DevPanelForm/DevPanelButton.tsx","components/GameTile/index.tsx","pages/GamesStore/GamesCatalog.tsx","assets/sol.svg","components/GameItem/index.tsx","assets/item_ex_1.png","assets/AnywayLose_Items/unit.png","assets/AnywayLose_Items/unit2.png","assets/AnywayLose_Items/unit3.png","assets/AnywayLose_Items/unit4.png","assets/item_ex_4.png","assets/item_ex_3.png","assets/item_ex_2.png","nft-store/items/dummyItems.ts","nft-store/items/itemsNftStoreSlice.ts","pages/Inventory/index.tsx","pages/Library/index.tsx","demos/Demo1_players.js","demos/Demo2_achievements.js","demos/Demo4_add_game.jsx","routes.ts","pages/GamesStore/index.tsx","pages/Marketplace/index.tsx","components/NavigationPanel/index.tsx","assets/logo.svg","assets/settingsIcon.svg","components/Header/index.tsx","App.tsx","pages/Account/store/accountSlice.ts","pages/GamesStore/store/gamesStoreSlice.ts","pages/Inventory/store/inventorySlice.ts","pages/Library/store/librarySlice.ts","pages/Marketplace/store/marketplaceSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","lib/asylum.ts"],"names":["findPlayerGlobalAccountAddress","userPublicKey","programId","PublicKey","findProgramAddress","toBuffer","findPlayerGameAccountAddress","gameId","initPlayer","program","a","nickname","avatar","default","provider","wallet","publicKey","playerAccount","nonce","rpc","initialize","accounts","user","systemProgram","web3","SystemProgram","updatePlayerNickname","updateNickname","updatePlayerAvatar","updateAvatar","addGameToLibrary","gameAddress","addGame","removeGameFromLibrary","removeGame","addAchievement","achievementId","expToAdd","addExp","exp","useAnchorProvider","useSelector","network","allowWithoutWallet","useAnchorWallet","connection","Connection","Provider","undefined","preflightCommitment","playersProgramID","playersIdl","metadata","address","usePlayersProgram","Program","asylumProgramID","asylumIdl","useAsylumProgram","friendsPlayGame","Keypair","generate","img","wotsH","suggestedForYouGame","bannerGames","bannerGame1","bannerGame3","dummyGames","title","description","repeat","cover","launchUrl","images","tokenMint","itemsMint","validationLevel","map","x","i","fetchNft","mint","getMetadata","toString","metaAddress","getAccountInfo","buffer","Error","decodeMetadata","data","fetch","uri","resp","json","jsonData","fetchGamesNfts","createAsyncThunk","mints","Promise","all","gameNft","name","image","properties","launch_url","images_links","token_mint_account","items_mint_accounts","validation_level","ok","game","initialState","inProgress","loaded","failed","gamesNtfStoreSlice","createSlice","reducers","extraReducers","builder","addCase","fulfilled","state","action","succeed","payload","filter","concat","selectNftGames","rootState","games","gamesNftStore","selectState","gamesInProgress","find","gamesLoaded","gamesFailed","result","forEach","status","ProfilePanel","useWallet","player","asylumProgram","dispatch","useDispatch","useState","setIsInitialized","playerDataLoadingSatus","setPlayerDataLoadingSatus","playerAccountInitSatus","setPlayerAccountInitSatus","achievementsLoadingSatus","setAchievementsLoadingSatus","setNickname","inputNickname","setInputNickname","nicknameChangingModeOn","setnicknameChangingModeOn","playerAchievements","setPlayerAchievements","catalogPlayerAchievements","setCatalogPlayerAchievements","level","setLevel","gamesData","id","players","console","log","fetchPlayerData","playerAccountAddress","account","achievements","asylum","findAchievementsAccountAddress","achievementsAccountAddress","achievementsAccount","useEffect","initializePlayer","fetchAchievementsData","connected","className","src","avatarPlaceholder","alt","style","width","placeholder","onChange","e","target","value","onClick","Typography","editPencil","ach","achievementData","label","SearchBar","React","open","setOpen","options","setOptions","loading","length","active","topFilms","Autocomplete","sx","onOpen","onClose","isOptionEqualToValue","option","getOptionLabel","renderInput","params","TextField","InputProps","endAdornment","CircularProgress","color","size","fetchGamesLibrary","fetchGamesLibraryAndLoadNfts","SingleGameInfo","visibility","handleClose","isAdded","wrapperRef","useRef","playersProgram","handleClickOutside","event","current","contains","document","removeEventListener","addEventListener","ref","window","focus","then","RESERVED_METADATA","uploadToIPFS","file","create","host","port","protocol","client","add","added","mintNFT","env","files","progressCallback","maxSupply","metadataContent","symbol","seller_fee_basis_points","sellerFeeBasisPoints","animation_url","attributes","external_url","creators","creator","share","realFiles","File","JSON","stringify","TOKEN_PROGRAM_ID","programIds","token","getMinimumBalanceForRentExemption","MintLayout","span","mintRent","payerPublicKey","toBase58","instructions","signers","mintKey","createMint","toPublicKey","associatedToken","recipientKey","createAssociatedTokenAccountInstruction","createMetadata","Data","metadataAccount","sendTransactionWithRetry","txid","confirmTransaction","getParsedConfirmedTransaction","f","path","content","metadataFile","m","cid","updateInstructions","updateSigners","ipfsLink","updateMetadata","push","Token","createMintToInstruction","createMasterEdition","BN","mintAccount","fetchGamesCatalog","findGamesCatalogAccountAddress","gamessAccountAddress","gamesCatalogAccount","fetchGamesCatalogAndLoadNfts","LinearProgressWithLabel","props","Box","display","alignItems","mr","LinearProgress","variant","minWidth","Math","round","DevPanelForm","NFTcreationProgress","setNFTcreationProgress","addGameToCatalog","catch","finally","formik","useFormik","initialValues","game_title","game_cover","game_launch_url","game_description","game_images_links","game_token_mint_account","game_items_mint_accounts","onSubmit","values","split","paddingBottom","handleSubmit","fullWidth","handleChange","error","touched","Boolean","errors","helperText","Button","type","DevPanelPopover","isOpen","anchorEl","theme","useTheme","Popover","backgroundColor","palette","background","border","borderColor","secondary","main","position","top","left","DevPanelButton","setAnchorEl","currentTarget","GameTile","disabled","loadingFailed","onAdd","onLaunch","GamesCatalog","gamesInCatalogIds","gamesInLibraryIds","isDisabled","setSelected","showUnverified","setShowUnverified","Checkbox","checked","item","indexOf","GameItem","itemName","gameName","price","sol","dummyItems","helmet","Chestpiece","blade","arrows","itemsNftStoreSlice","getGameItem","key","itemData","GamesLibrary","PlayersDemo","isInitialized","isInitializedGlobal","setIsInitializedGlobal","setAvatar","setGames","setExp","setAchievements","inputAvatar","setInputAvatar","inputGame","setInputGame","inputAchievements","setInputAchievements","inputAchievementsExp","setInputAchievementsExp","inputExp","setInputExp","getProvider","opts","fetchGlobalData","initAsylumAccounts","margin","textAlign","achievement","marginTop","justifyContent","programID","idl","inputAchievementName","setInputAchievementName","inputAchievementDescription","setInputAchievementDescription","inputAchievementGame","setInputAchievementGame","fetchAchievements","GamesDemo","nftCreateProgress","fetchGames","initGamesCatalogAccount","err","homepath","routes","component","selected","gamesStorePage","gamesInCatalog","libraryPage","gamesInLibrary","isCatalogFetched","isLibraryFetched","gameFriendsPlayId","friendsPlay","gameSuggestedId","suggestedForYou","gamesBannerIds","showStatus","showIndicators","showThumbs","autoPlay","padding","height","allItemsCategorised","inventoryPage","itemsByGames","allItems","items","itemsData","itemsNftStore","itemsInProgress","itemsLoaded","itemsFailed","selectNftItems","gamesInLibraryIdsWithDummy","AchievementsDemo","NavigationPanel","pages","currentTab","useLocation","pathname","Tabs","orientation","textColor","classes","indicator","Tab","disableRipple","to","Link","href","telegram","discord","Icon","xmlns","viewBox","fill","d","Header","lang","setLang","logo","FormControl","Select","autoWidth","displayEmpty","defaultValue","IconComponent","MenuItem","settingsIcon","wallets","getPhantomWallet","Pages","exact","createTheme","primary","contrastText","text","typography","fontFamily","body1","fontSize","caption","App","ThemeProvider","CssBaseline","basename","process","Grid","container","columns","xs","spacing","AppWithProvider","endpoint","autoConnect","accontPageSlice","dummyBannerGames","gamesStorePageSlice","set","Set","rejected","inventoryPageSlice","libraryPageSlice","marketplacePageSlice","store","configureStore","reducer","accountPage","accountPageReducer","gamesStorePageReducer","inventoryPageReducer","libraryPageReducer","marketplacePage","marketplacePageReducer","gamesNftStoreReducer","itemsNftStoreReducer","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","Buffer","from","initAchievementsAccount","initializeAchievements","initializeGamesCatalog"],"mappings":"27EAAe,MAA0B,yCCA1B,MAA0B,wC,gCCA1B,G,OAAA,IAA0B,4CCA1B,MAA0B,uC,oDCI5BA,EAAiC,SAACC,EAA0BC,GACrE,OAAOC,YAAUC,mBAAmB,CAACH,EAAcI,YAAaH,IAGvDI,EAA+B,SAACL,EAA0BM,EAAmBL,GACtF,OAAOC,YAAUC,mBAAmB,CAACH,EAAcI,WAAYE,EAAOF,YAAaH,IAG1EM,EAAU,uCAAG,WAAOC,GAAP,yCAAAC,EAAA,6DAAyBC,EAAzB,+BAA4C,gBAAiBC,EAA7D,+BAAiFT,YAAUU,QAC3GZ,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFJ,SAGeF,EAA+BC,EAAeC,GAH7D,0CAGfe,EAHe,KAGAC,EAHA,eAKhBT,EAAQU,IAAIC,WAAWF,EAAOP,EAAUC,EAAQ,CACpDS,SAAU,CACRJ,cAAeA,EACfK,KAAMrB,EACNsB,cAAeC,IAAKC,cAAcvB,aAThB,4CAAH,sDAcVwB,EAAoB,uCAAG,WAAOjB,EAAkBE,GAAzB,uBAAAD,EAAA,6DAC1BT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFM,SAGCF,EAA+BC,EAAeC,GAH/C,0CAGzBe,EAHyB,oBAK1BR,EAAQU,IAAIQ,eAAehB,EAAU,CACzCU,SAAU,CACRJ,cAAeA,KAPa,4CAAH,wDAYpBW,EAAkB,uCAAG,WAAOnB,EAAkBG,GAAzB,uBAAAF,EAAA,6DACxBT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFI,SAGGF,EAA+BC,EAAeC,GAHjD,0CAGvBe,EAHuB,oBAKxBR,EAAQU,IAAIU,aAAajB,EAAQ,CACrCS,SAAU,CACRJ,cAAeA,KAPW,4CAAH,wDAYlBa,EAAgB,uCAAG,WAAOrB,EAAkBsB,GAAzB,uBAAArB,EAAA,6DACtBT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFE,SAGKF,EAA+BC,EAAeC,GAHnD,0CAGrBe,EAHqB,oBAKtBR,EAAQU,IAAIa,QAAQD,EAAa,CACrCV,SAAU,CACRJ,cAAeA,KAPS,4CAAH,wDAYhBgB,EAAqB,uCAAG,WAAOxB,EAAkBsB,GAAzB,uBAAArB,EAAA,6DAC3BT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFO,SAGAF,EAA+BC,EAAeC,GAH9C,0CAG1Be,EAH0B,oBAK3BR,EAAQU,IAAIe,WAAWH,EAAa,CACxCV,SAAU,CACRJ,cAAeA,KAPc,4CAAH,wDAYrBkB,EAAc,uCAAG,WAAO1B,EAAkB2B,GAAzB,qCAAA1B,EAAA,6DAAgD2B,EAAhD,+BAAmE,EACzFpC,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFE,SAGKF,EAA+BC,EAAeC,GAHnD,0CAGrBe,EAHqB,oBAKtBR,EAAQU,IAAIgB,eAAeC,EAAeC,EAAU,CACxDhB,SAAU,CACRJ,cAAeA,KAPS,4CAAH,wDAYdqB,EAAM,uCAAG,WAAO7B,EAAkB8B,GAAzB,uBAAA7B,EAAA,6DACdT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFN,SAGaF,EAA+BC,EAAeC,GAH3D,0CAGbe,EAHa,oBAKdR,EAAQU,IAAImB,OAAOC,EAAK,CAC5BlB,SAAU,CACRJ,cAAeA,KAPC,4CAAH,wD,kCCxENuB,GAFkDC,IAE9B,WAA6F,IAA5FC,EAA2F,uDAAzE,gCAAiCC,EAAwC,wDACnH5B,EAAS6B,cAETC,EAAa,IAAIC,aAAWJ,EAAS,aAE3C,IAAK3B,EAEH,OAAI4B,EACK,IAAII,IAETF,OAAYG,EAAW,CAAEC,oBAAqB,mBAElD,EAGF,IAAMnC,EAAW,IAAIiC,IACnBF,EAAY9B,EAAQ,CAAEkC,oBAAqB,cAE7C,OAAOnC,IAGEoC,EAAmB,IAAI/C,YAAUgD,EAAWC,SAASC,SACrDC,EAAoB,WAA6F,IAA5FZ,EAA2F,uDAAzE,gCAAiCC,EAAwC,wDACnH7B,EAAW0B,EAAkBE,EAASC,GAE5C,GAAK7B,EAGL,OAAO,IAAIyC,IAAQJ,EAAmBD,EAAkBpC,IAG/C0C,EAAkB,IAAIrD,YAAUsD,EAAUL,SAASC,SACnDK,EAAmB,WAA6F,IAA5FhB,EAA2F,uDAAzE,gCAAiCC,EAAwC,wDAClH7B,EAAW0B,EAAkBE,EAASC,GAE5C,GAAK7B,EAGL,OAAO,IAAIyC,IAAQE,EAAkBD,EAAiB1C,I,gBCpD3C,MAA0B,wCCA1B,MAA0B,sCCA1B,MAA0B,kCCA1B,OAA0B,2CCmD5B6C,IA/BsBC,UAAQC,WAAW7C,UA+BvB,CAAEA,UAAW4C,UAAQC,WAAW7C,UAAW8C,IAAKC,IAClEC,GAAsB,CAAEhD,UAAW4C,UAAQC,WAAW7C,UAAW8C,IAAKC,GACtEE,GAAc,CACvB,CAAEjD,UAAW4C,UAAQC,WAAW7C,UAAW8C,IAAKI,GAChD,CAAElD,UAAW4C,UAAQC,WAAW7C,UAAW8C,IAAKK,IAChD,CAAEnD,UAAW4C,UAAQC,WAAW7C,UAAW8C,IAAKI,IAGvCE,GAAyB,CAclC,CACIf,QAASM,GAAgB3C,UACzBqD,MAAO,aACPC,YAAa,qCAAqCC,OAAO,IACzDC,MAAOb,GAAgBG,IACvBW,UAAW,GACXC,OAAQ,CAACf,GAAgBG,IAAKH,GAAgBG,IAAKH,GAAgBG,KACnEa,UAAWxE,YAAUU,QACrB+D,UAAW,CAACzE,YAAUU,SACtBgE,gBAAiB,GAErB,CACIxB,QAASW,GAAoBhD,UAC7BqD,MAAO,aACPC,YAAa,qCAAqCC,OAAO,IACzDC,MAAOR,GAAoBF,IAC3BW,UAAW,GACXC,OAAQ,CAACV,GAAoBF,IAAKE,GAAoBF,IAAKE,GAAoBF,KAC/Ea,UAAWxE,YAAUU,QACrB+D,UAAW,CAACzE,YAAUU,SACtBgE,gBAAiB,IAlCa,mBAoC/BZ,GAAYa,KAAI,SAACC,EAAGC,GACnB,MAAO,CACH3B,QAAS0B,EAAE/D,UACXqD,MAAO,aACPC,YAAa,qCAAqCC,OAAO,IACzDC,MAAOO,EAAEjB,IACTW,UAAW,GACXC,OAAQ,CAACK,EAAEjB,IAAKiB,EAAEjB,IAAKiB,EAAEjB,KACzBa,UAAWxE,YAAUU,QACrB+D,UAAW,CAACzE,YAAUU,SACtBgE,gBAAiB,Q,kBCrGhBI,GAAQ,uCAAG,WAAOpC,EAAwBqC,GAA/B,uBAAAxE,EAAA,sEACMyE,uBAAYD,EAAKE,YADvB,cACdC,EADc,gBAECxC,EAAWyC,eAAe,IAAInF,YAAUkF,IAFzC,UAEdE,EAFc,6BAKVC,MAAM,uCALI,cAOdpC,EAAWqC,0BAAeF,EAAOG,MAPnB,UASDC,MAAMvC,EAASsC,KAAKE,KATnB,eASdC,EATc,iBAUDA,EAAKC,OAVJ,eAUdA,EAVc,sDAab1C,GAba,IAchB2C,SAAUD,KAdM,4CAAH,wDCGfE,GAAiBC,YAAiB,kBAAD,uCAAoB,+BAAAvF,EAAA,6DAAQmC,EAAR,EAAQA,WAAYqD,EAApB,EAAoBA,MAApB,kBAGhDC,QAAQC,IAAIF,EAAMpB,IAAN,uCAAU,WAAOI,GAAP,iBAAAxE,EAAA,+EAEFuE,GAASpC,EAAYqC,GAFnB,cAEfQ,EAFe,OAIfW,EAAuB,CACzBhD,QAAS,IAAIlD,YAAUuF,EAAKR,MAC5Bb,MAAOqB,EAAKA,KAAKY,KACjBhC,YAAaoB,EAAKK,SAASzB,YAC3BE,MAAOkB,EAAKK,SAASQ,MACrB9B,UAAWiB,EAAKK,SAASS,WAAWC,WACpC/B,OAAQgB,EAAKK,SAASS,WAAWE,aACjC/B,UAAWe,EAAKK,SAASS,WAAWG,mBACpC/B,UAAWc,EAAKK,SAASS,WAAWI,oBACpC/B,gBAAiBa,EAAKK,SAASS,WAAWK,kBAbzB,kBAed,CAACC,IAAI,EAAM5B,KAAMA,EAAM6B,KAAMV,IAff,yDAiBd,CAACS,IAAI,EAAO5B,KAAMA,EAAM6B,KAAM,OAjBhB,yDAAV,yDAHoC,2CAApB,uDCkBjCC,GAAmC,CACvCC,WAAY,GACZC,OAAO,YAAK9C,IACZ+C,OAAQ,IAGGC,GAAqBC,YAAY,CAC5Cf,KAAM,gBACNU,gBAEAM,SAAU,GAKVC,cAAe,SAACC,GAEdA,EAAQC,QAAQzB,GAAe0B,WAAW,SAACC,EAAOC,GAE9C,IAAMC,EAAUD,EAAOE,QAAQC,QAAO,SAAAhD,GAAC,OAAIA,EAAE+B,MAAIhC,KAAI,SAAAC,GAAC,OAAIA,EAAEgC,QACtDI,EAASS,EAAOE,QAAQC,QAAO,SAAAhD,GAAC,OAAKA,EAAE+B,MAAIhC,KAAI,SAAAC,GAAC,OAAIA,EAAEG,KAAKE,cAKjE,OAHAuC,EAAMT,OAASS,EAAMT,OAAOc,OAAOH,GACnCF,EAAMR,OAASQ,EAAMR,OAAOa,OAAOb,GAE5BQ,QAOFM,GAAiB,SAACC,EAAsBC,GAEnD,IAAMR,EAJY,SAACA,GAAD,OAAsBA,EAAMS,cAIhCC,CAAYH,GAEpBI,EAAkBX,EAAMV,WAAWc,QAAO,SAAAhD,GAAC,OAAIoD,EAAMI,MAAK,SAAA7H,GAAC,OAAIA,IAAMqE,QACrEyD,EAAcb,EAAMT,OAAOa,QAAO,SAAAhD,GAAC,OAAIoD,EAAMI,MAAK,SAAA7H,GAAC,OAAIA,IAAMqE,EAAE1B,QAAQ+B,iBACvEqD,EAAcd,EAAMR,OAAOY,QAAO,SAAAhD,GAAC,OAAIoD,EAAMI,MAAK,SAAA7H,GAAC,OAAIA,IAAMqE,QAE7D2D,EAAoC,GAO1C,OALAJ,EAAgBK,SAAQ,SAAA5D,GAAC,OAAI2D,EAAO3D,EAAEK,YAAc,CAAEwD,OAAQ,iBAC9DJ,EAAYG,SAAQ,SAAA5D,GAAC,OAAI2D,EAAO3D,EAAE1B,QAAQ+B,YAAc,CAAEwD,OAAQ,SAAU7B,KAAMhC,MAClF0D,EAAYE,SAAQ,SAAA5D,GAAC,OAAI2D,EAAO3D,EAAEK,YAAc,CAAEwD,OAAQ,aAGnDF,GAUMtB,MAAf,Q,QC2IeyB,GAxMM,WACjB,IAAM9H,EAAS+H,cAETC,EAASzF,IACT0F,EAAgBtF,IAChBuF,EAAWC,cACjB,EAA0CC,oBAAS,GAAnD,mBAAsBC,GAAtB,WACA,EAA4DD,mBAAuB,QAAnF,mBAAOE,EAAP,KAA+BC,EAA/B,KACA,EAA4DH,mBAAuB,QAAnF,mBAAOI,EAAP,KAA+BC,EAA/B,KACA,EAAgEL,mBAAuB,QAAvF,mBAAOM,EAAP,KAAiCC,EAAjC,KAEA,EAAgCP,mBAAS,IAAzC,mBAAOxI,EAAP,KAAiBgJ,EAAjB,KACA,EAA0CR,mBAAS,IAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAA4DV,oBAAS,GAArE,mBAAOW,EAAP,KAA+BC,EAA/B,KAEA,EAAoDZ,mBAAS,IAA7D,mBAAOa,EAAP,KAA2BC,EAA3B,KACA,EAAkEd,mBAAS,IAA3E,mBAAOe,EAAP,KAAkCC,GAAlC,KAEA,GAA0BhB,mBAAS,GAAnC,qBAAOiB,GAAP,MAAcC,GAAd,MAEMC,GAAY7H,aAAY,SAACkF,GAAD,OAAsBM,GAAeN,EAC/DqC,EACKlF,KAAI,SAAAC,GAAC,yBAAImF,EAA0B3B,MAAK,SAAA7C,GAAI,OAAIA,EAAK6E,KAAOxF,YAAvD,iBAAI,EAAuDgC,YAA3D,aAAI,EAA6D3B,kBAtBxD,8CA6CvB,sBAAA1E,EAAA,yDACSqI,EADT,iEAKMS,EAA0B,WALhC,SAMYgB,EAAQhK,WAAWuI,GAN/B,OAOMK,GAAiB,GACjBI,EAA0B,YARhC,kDAUMA,EAA0B,UAC1BiB,QAAQC,IAAI,sBAAZ,MAXN,QAcIC,KAdJ,2DA7CuB,+BA+DRA,KA/DQ,8EA+DvB,kCAAAjK,EAAA,yDACSqI,EADT,iEAKQO,EAA0B,WALlC,SAMgDkB,EAAQxK,+BAAR,OAAuC+I,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAQjI,SAASC,OAAOC,UAA/D,OAA0E+H,QAA1E,IAA0EA,OAA1E,EAA0EA,EAAQ7I,WANlI,0CAMe0K,EANf,oBAO8B7B,EAAO8B,QAAQ5J,cAAc0E,MAAMiF,GAPjE,QAOcC,EAPd,OASQJ,QAAQC,IAAIG,GACZzB,GAAiB,GACjBO,EAAYkB,EAAQlK,SAASyE,YAC7BkE,EAA0B,YAC1BS,GAA0B,GAE1BE,EAAsBY,EAAQC,cAC9BT,GAASQ,EAAQT,OAhBzB,kDAmBQd,EAA0B,UAC1BmB,QAAQC,IAAI,+BAAZ,MApBR,2DA/DuB,oEAuFvB,kCAAAhK,EAAA,yDACSsI,EADT,iEAKQU,EAA4B,WALpC,SAMsDqB,EAAOC,+BAAP,OAAsChC,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAe9I,WAN3G,0CAMe+K,EANf,oBAO8BjC,EAAc6B,QAAQK,oBAAoBvF,MAAMsF,GAP9E,eAOcJ,EAPd,OASQJ,QAAQC,IAAIG,GACFA,EAAQC,aAGlBpB,EAA4B,YAG5BS,GAA6BU,EAAQC,cAhB7C,UAmBc7B,EAASjD,GAAe,CAC1BnD,WAAYmG,EAAclI,SAAS+B,WACnCqD,MAAO2E,EAAQC,aAAahG,KAAI,SAACC,GAAD,OAAY,IAAI5E,YAAU4E,EAAEgC,YArBxE,0DA0BQ2C,EAA4B,UAC5Be,QAAQC,IAAI,+BAAZ,MA3BR,2DAvFuB,oEAsHvB,sBAAAhK,EAAA,yDAESqI,EAFT,0EAKcyB,EAAQ9I,qBAAqBqH,EAAQa,GALnD,uDAOQa,QAAQC,IAAI,sBAAZ,MAPR,QAUIC,KAVJ,0DAtHuB,oEAmIvB,sBAAAjK,EAAA,sDACIqJ,GAA0B,GAC1BF,EAAiB,IAFrB,4CAnIuB,sBAwBvBsB,qBAAU,WACyB,SAA3B9B,GACAsB,OAEL,CAAC5B,EAAQM,IAEZ8B,qBAAU,WACyB,SAA3B5B,GAAgE,WAA3BF,GA/BtB,oCAgCf+B,KAEL,CAACrC,EAAQQ,EAAwBF,IAEpC8B,qBAAU,WAC2B,SAA7B1B,GArCe,oCAsCf4B,KACL,CAACtC,IAEJoC,qBAAU,WACNtB,EAAiBlJ,KAClB,CAACmJ,EAAwBnJ,IA0G5B,OAAQ,qCACHI,EAAOuK,WAAa,uBAAKC,UAAU,mBAAf,UACjB,uBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,cAAcC,IAAKC,EAAmBC,IAAI,iBAEzD,uBAAKH,UAAS,8BAAyBzB,EAAyB,GAAK,cAArE,UACI,wBACI6B,MAAO,CAAEC,MAAO,KAChBC,YAAY,kCACZC,SAAU,SAAAC,GAAC,OAAIlC,EAAiBkC,EAAEC,OAAOC,QACzCA,MAAOrC,IAGX,eAAC,IAAD,CAAW2B,UAAU,aAAaW,QAlK3B,8CAmKP,eAAC,IAAD,CAAWX,UAAU,aAAaW,QAnK3B,iDAuKX,uBAAKX,UAAWzB,EAAyB,aAAe,GAAxD,UACI,gBAACqC,EAAA,EAAD,CAAYZ,UAAU,WAAtB,UACK5K,EACD,sBAAKuL,QAAS,WACVnC,GAA0B,IAE5BwB,UAAU,WAAWC,IAAKY,EAAYV,IAAI,YAEhD,gBAACS,EAAA,EAAD,oBAAmB/B,YAK3B,uBAAKmB,UAAU,uBAAf,UACI,eAACY,EAAA,EAAD,iCACA,8BACKnC,EACIjC,QAAO,SAAAsE,GAAG,OAAInC,EAA0B3B,MAAK,SAACxD,GAAD,OAAWA,EAAEwF,KAAO8B,QACjEvH,KAAI,SAACuH,EAAKrH,GAAO,IAAD,IACXsH,EAAkBpC,EAA0B3B,MAAK,SAACxD,GAAD,OAAWA,EAAEwF,IAAM8B,KAE1E,OAAQ,uCAEDC,GAAmBtH,EAAI,GAAM,8BAAY,eAACmH,EAAA,EAAD,oBAAgBG,EAAgBC,MAAhC,cAA2CD,EAAgBhI,YAA3D,8BAAkFgG,GAAUgC,EAAgBvF,KAAK3B,mBAAjH,iBAAkF,EAA4C2B,YAA9H,aAAkF,EAAkD1C,UAAvIW,mB,oEClMtD,SAASwH,KACtB,MAAwBC,YAAe,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,WAAgC,IAA9D,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAUJ,GAA2B,IAAnBE,EAAQG,OA4BhC,OA1BAN,aAAgB,WACd,IAAIO,GAAS,EAEb,GAAKF,EAYL,OARA,sBAAC,sBAAApM,EAAA,sDAGKsM,GACFH,EAAW,GAAD,OAAKI,KAJlB,0CAAD,GAQO,WACLD,GAAS,KAEV,CAACF,IAEJL,aAAgB,WACTC,GACHG,EAAW,MAEZ,CAACH,IAGF,eAACQ,GAAA,EAAD,CACE3C,GAAG,mBACH4C,GAAI,CAAEvB,MAAO,QACbc,KAAMA,EACNU,OAAQ,WACNT,GAAQ,IAEVU,QAAS,WACPV,GAAQ,IAEVW,qBAAsB,SAACC,EAAQtB,GAAT,OAAmBsB,EAAOlJ,QAAU4H,EAAM5H,OAChEmJ,eAAgB,SAACD,GAAD,OAAYA,EAAOlJ,OACnCuI,QAASA,EACTE,QAASA,EACTW,YAAa,SAACC,GAAD,OACX,eAACC,GAAA,EAAD,6BACMD,GADN,IAEEE,WAAU,6BACLF,EAAOE,YADF,IAERC,aACE,gBAAC,WAAD,WACGf,EAAU,eAACgB,GAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KAAS,KAC3DN,EAAOE,WAAWC,wBAWnC,IAAMZ,GAAW,CACf,CAAE5I,MAAO,mB,oBC7EL4J,ICNS,ICAA,ICAA,ICAA,IJMWhI,YAAiB,qBAAD,uCAAuB,uCAAAvF,EAAA,6DAAQqI,EAAR,EAAQA,OAAQtI,EAAhB,EAAgBA,QAAhB,SAErB+J,EAAQxK,+BAA+B+I,EAAQtI,EAAQP,WAFlC,0CAEtD0K,EAFsD,mBAGvCnK,EAAQoK,QAAQ5J,cAAc0E,MAAMiF,GAHG,cAGvDC,EAHuD,OAI7DJ,QAAQC,IAAI,gBAAiBG,EAAQ1C,OAJwB,kBAMtD0C,EAAQ1C,OAN8C,4CAAvB,wDASpC+F,GAA+BjI,YAAiB,gCAAD,uCAAkC,0BAAAvF,EAAA,SAAAA,EAAA,6DAAQqI,EAAR,EAAQA,OAAQtI,EAAhB,EAAgBA,QAEjGwI,EAFiF,EAEjFA,SAFiF,SAGnEA,EAASgF,GAAkB,CAAClF,SAAQtI,aAH+B,YAG7EC,EAH6E,QAK7EoH,QAL6E,gCAMzEmB,EAASjD,GAAe,CAACnD,WAAYpC,EAAQK,SAAS+B,WAAYqD,MAAOxF,EAAEoH,WANF,2CAAlC,yDKwEtCqG,GAjEQ,SAAC,GAA+I,IAA9IC,EAA6I,EAA7IA,WAAYrH,EAAiI,EAAjIA,KAAMsH,EAA2H,EAA3HA,YAAaC,EAA8G,EAA9GA,QAC9CC,EAAaC,mBAEbC,EAAiBnL,IACjB2F,EAAWC,cACXnI,EAAS+H,cAcT4F,EAAqB,SAArBA,EAAsBC,GAChBJ,EAAWK,UAAYL,EAAWK,QAAQC,SAASF,EAAM3C,UACzD8C,SAASC,oBAAoB,YAAaL,GAC1CL,MAYZ,OARAlD,qBAAU,YACa,IAAfiD,GACAU,SAASE,iBAAiB,YAAaN,KAE5C,CAACN,IAKA,sBAAK7C,UAAS,yBAAoB6C,EAAa,GAAK,cAApD,SACI,uBAAKa,IAAKV,EAAYhD,UAAU,oBAAhC,UACI,uBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,YAAYC,IAAG,OAAEzE,QAAF,IAAEA,OAAF,EAAEA,EAAMvC,MAAOkH,IAAI,eACjD,uBAAKH,UAAU,cAAf,UACI,uBAAKA,UAAU,WAAf,UACI,eAAC,KAAD,CAAYA,UAAU,QAAtB,gBAAgCxE,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAM1C,QACtC,eAAC,KAAD,CAAYkH,UAAU,YAAtB,yBACA,eAAC,KAAD,CAAYA,UAAU,cAAtB,gBAAsCxE,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAMzC,iBAEhD,uBAAKiH,UAAU,UAAf,UACI,sBAAKA,UAAU,UACf,sBAAKW,QAASoC,EAjCrB,WAAO,IAAD,IACfvH,IACM,QAAN,EAAAmI,cAAA,mBAAQxC,KAAK3F,EAAKtC,UAAW,iBAA7B,SAAwC0K,UARlC,WACNV,GAAkB1H,GAClByD,EAAQ1I,iBAAiB2M,EAAgB1H,EAAK1D,SAC7C+L,MAAK,kBAAMnG,EAASgF,GAAkB,CAAClF,OAAQhI,EAAOC,UAAwBP,QAASgO,SAoCxE,SACI,eAAC,KAAD,CAAYlD,UAAU,cAAtB,SAAqC+C,EAAU,SAAW,8BAK1E,sBAAK/C,UAAU,aAAf,gBAEQxE,QAFR,IAEQA,OAFR,EAEQA,EAAMrC,OAAOI,KAAI,SAACyB,EAAOvB,GAAR,OACb,sBAAKuG,UAAU,mBAAmBC,IAAKjF,EAAemF,IAAI,gBAAP1G,c,iFChDzEqK,GAAoB,gBAEpBC,GAAY,uCAAG,WAAOC,GAAP,iBAAA7O,EAAA,6DACnB+J,QAAQC,IAAI,oBAAqB6E,GADd,SAGEC,kBAAO,CAC1BC,KAAM,iBACNC,KAAM,KACNC,SAAU,UANO,cAGbC,EAHa,gBASCA,EAAOC,IAAIN,GATZ,cASbO,EATa,yBAWZA,GAXY,2CAAH,sDAcLC,GAAO,uCAAG,WACrBlN,EACA9B,EACAiP,EACAC,EACA7M,EAYA8M,EACAC,GAlBqB,iDAAAzP,EAAA,yDAuBhBK,EAAOC,UAvBS,sBAuBQ,IAAIwE,MAAM,oCAvBlB,cAyBf4K,EAAkB,CACtB9J,KAAMlD,EAASkD,KACf+J,OAAQjN,EAASiN,OACjB/L,YAAalB,EAASkB,YACtBgM,wBAAyBlN,EAASmN,qBAClChK,MAAOnD,EAASmD,MAChBiK,cAAepN,EAASoN,cACxBC,WAAYrN,EAASqN,WACrBC,aAActN,EAASsN,aACvBlK,WAAW,6BACNpD,EAASoD,YADJ,IAERmK,SAAQ,UAAEvN,EAASuN,gBAAX,aAAE,EAAmB7L,KAAI,SAAA8L,GAC/B,MAAO,CACLvN,QAASuN,EAAQvN,QACjBwN,MAAOD,EAAQC,aAMjBC,EA7Ce,sBA8ChBb,GA9CgB,CA+CnB,IAAIc,KAAK,CAACC,KAAKC,UAAUb,IAAmBf,MAG9C5E,QAAQC,IAAI,UAAWsG,KAAKC,UAAUb,IAKtCF,EAAiB,IAEXgB,EAAmBC,wBAAaC,MAzDjB,SA4DEvO,EAAWwO,kCAChCC,KAAWC,MA7DQ,cA4DfC,EA5De,OAuEfC,EAAiB1Q,EAAOC,UAAU0Q,WAClCC,EAAyC,GACzCC,EAAqB,GAGrBC,EAAUC,sBACdH,EACA5Q,EAAOC,UACPwQ,EACA,EAEAO,uBAAYN,GACZM,uBAAYN,GACZG,GACAF,WArFmB,UAwFbtR,8BACJ,CACEW,EAAOC,UAAUX,WACjB8Q,wBAAaC,MAAM/Q,WACnB0R,uBAAYF,GAASxR,YAEvB8Q,wBAAaa,iBA9FI,eAuFfC,EAvFe,OAgGnB,GAEFC,mDACEP,EACAI,uBAAYE,GACZlR,EAAOC,UACPD,EAAOC,UACP+Q,uBAAYF,IAvGO,UA0GSM,0BAC5B,IAAIC,QAAK,CACP/B,OAAQjN,EAASiN,OACjB/J,KAAMlD,EAASkD,KACfV,IAAK,IAAIrB,OAAO,IAChBgM,qBAAsBnN,EAASmN,qBAC/BI,SAAUvN,EAASuN,WAErBc,EACAI,EACAJ,EACAE,EACA5Q,EAAOC,UAAU0Q,YAtHE,eA0GfW,EA1Ge,OAwHrBnC,EAAiB,IAxHI,UAqIEoC,oCACrBzP,EACA9B,EACA4Q,EACAC,EACA,UA1ImB,wBAqIbW,EArIa,EAqIbA,KAORrC,EAAiB,IA5II,oBA+IbrN,EAAW2P,mBAAmBD,EAAM,OA/IvB,QAgJnBrC,EAAiB,IAhJE,4EAuJfrN,EAAW4P,8BAA8BF,EAAM,aAvJhC,eAyJrBrC,EAAiB,IAGjBzF,QAAQC,IAAI,yBAA0BoG,GA5JjB,UA8JA3K,QAAQC,IAAI0K,EAAUhM,KAAI,SAAA4N,GAE3C,OAAOpD,GAAa,CAAEqD,KAAMD,EAAEpM,KAAMsM,QAASF,QAhK5B,WA8JfhK,EA9Je,OAkKrBwH,EAAiB,MAKD,QAHV2C,EApKe,OAoKAnK,QApKA,IAoKAA,OApKA,EAoKAA,EAAQH,MAC3B,SAAAuK,GAAC,OAAIA,EAAEH,OAAStD,aAEF,IAAZwD,OAAA,EAAAA,EAAcE,OAAOhS,EAAOC,UAvKX,wBAwKbgS,EAA+C,GAC/CC,EAA2B,GAE3BC,EA3Ka,sCA2K6BL,EAAaE,KAC7DtI,QAAQC,IAAI,qCAAsCwI,GA5K/B,UA6KbC,0BACJ,IAAIf,QAAK,CACP9L,KAAMlD,EAASkD,KACf+J,OAAQjN,EAASiN,OACjBzK,IAAKsN,EACLvC,SAAUvN,EAASuN,SACnBJ,qBAAsBnN,EAASmN,4BAEjCvN,OACAA,EACA6O,EACAJ,EACAuB,EACAX,GA1LiB,eA6LnBW,EAAmBI,KACjBC,KAAMC,wBACJpC,EACAa,uBAAYF,GACZE,uBAAYE,GACZF,uBAAYN,GACZ,GACA,IAIJvB,EAAiB,IAxME,UA2MbqD,oCACUvQ,IAAdmN,EAA0B,IAAIqD,KAAGrD,QAAanN,EAC9C6O,EACAJ,EACAA,EACAA,EACAuB,GAjNiB,eAwOnB9C,EAAiB,IAxOE,UA0OAoC,oCACjBzP,EACA9B,EACAiS,EACAC,GA9OiB,8BAmQrBxI,QAAQC,IAAI,kBAAmB2H,GAC/B5H,QAAQC,IAAI,UAAWmH,GApQF,kBAsQd,CAAEQ,gBAAiBA,EAAiBoB,YAAa5B,IAtQnC,2DAAH,kE,sBCxCd6B,GAAoBzN,YAAiB,qBAAD,uCAAuB,WAAOxF,GAAP,qBAAAC,EAAA,sEAErBqK,EAAO4I,+BAA+BlT,EAAQP,WAFzB,0CAEtD0T,EAFsD,mBAGvCnT,EAAQoK,QAAQgJ,oBAAoBlO,MAAMiO,GAHH,cAGvD/I,EAHuD,yBAKtDA,EAAQ1C,OAL8C,4CAAvB,uDAQpC2L,GAA+B7N,YAAiB,gCAAD,uCAAkC,WAAOxF,EAAP,SAAAC,EAAA,SAAAA,EAAA,6DAA2BuI,EAA3B,EAA2BA,SAA3B,SACnEA,EAASyK,GAAkBjT,IADwC,YAC7EC,EAD6E,QAG7EoH,QAH6E,gCAIzEmB,EAASjD,GAAe,CAACnD,WAAYpC,EAAQK,SAAS+B,WAAYqD,MAAOxF,EAAEoH,WAJF,2CAAlC,yDCErD,SAASiM,GAAwBC,GAC/B,OACE,gBAACC,GAAA,EAAD,CAAK9G,GAAI,CAAE+G,QAAS,OAAQC,WAAY,UAAxC,UACE,eAACF,GAAA,EAAD,CAAK9G,GAAI,CAAEvB,MAAO,OAAQwI,GAAI,GAA9B,SACE,eAACC,GAAA,EAAD,cAAgBC,QAAQ,eAAkBN,MAE5C,eAACC,GAAA,EAAD,CAAK9G,GAAI,CAAEoH,SAAU,IAArB,SACE,eAACpI,EAAA,EAAD,CAAYmI,QAAQ,QAApB,mBAAgCE,KAAKC,MACnCT,EAAM/H,OADR,YAQR,IA6MeyI,GA7MM,WACnB,IAAM5T,EAAW0B,IACXzB,EAAS6B,cACToG,EAAgBtF,IACtB,EAAsDyF,mBAAS,GAA/D,mBAAOwL,EAAP,KAA4BC,EAA5B,KACM3L,EAAWC,cALQ,4CAWzB,yCAAAxI,EAAA,yDACE2D,EADF,EACEA,MACAC,EAFF,EAEEA,YACAE,EAHF,EAGEA,MACAiC,EAJF,EAIEA,WACAC,EALF,EAKEA,aACAC,EANF,EAMEA,mBACAC,EAPF,EAOEA,oBAUK9F,GAAaC,GAAWiI,EAjB/B,wDAoBEyB,QAAQC,IAAI,WApBd,kBAsBSqF,GAAQjP,EAAS+B,WAAY9B,EAAQ,SAAU,GAAI,CACxDuF,KAAMjC,EACNgM,OAAQ,MACR/L,YAAaA,EACbiC,MAAO/B,EACPgM,mBAAexN,EACfyN,gBAAYzN,EACZ0N,aAAc,GACdlK,WAAY,CACVE,eACAC,qBACAC,sBACAH,aACAI,iBAAkB,GAEpB8J,SAAU,KACVJ,qBAAsB,GAEtBqE,GACDxF,KAnBM,uCAmBD,WAAOrK,GAAP,SAAArE,EAAA,sEACEmU,2BAAiB7L,EAAe,IAAI7I,YAAU4E,EAAE0O,cADlD,OAEJxK,EAAS6K,GAA6B9K,IAFlC,2CAnBC,uDAuBN8L,OAAM,SAAC/I,GAAD,OAAYtB,QAAQC,IAAIqB,MAC9BgJ,SAAQ,kBAAMH,EAAuB,SA9CxC,2CAXyB,wBAOzBzJ,qBAAU,WACRV,QAAQC,IAAI,sBAAuBiK,KAClC,CAACA,IAmDJ,IAAMK,EAASC,aAAU,CACvBC,cAAe,CACbC,WAAY,YACZC,WAAY,0JACZC,gBAAiB,0JACjBC,iBAAkB,wBAClBC,kBAAmB,mTACnBC,wBAAyB,GACzBC,yBAA0B,IAE5BC,SAAU,SAACC,IAtEY,oCAuErB3T,CAAQ,CACNqC,MAAOsR,EAAOR,WACd3Q,MAAOmR,EAAOP,WACd3O,WAAYkP,EAAON,gBACnB/Q,YAAaqR,EAAOL,iBACpB5O,aAAciP,EAAOJ,kBAAkBK,MAAM,KAC7CjP,mBAAoBgP,EAAOH,wBAA0B,IAAIrV,YAAUwV,EAAOH,8BAA2BxS,EACrG4D,oBAAqB+O,EAAOF,yBAA2BE,EAAOF,yBAAyBG,MAAM,KAAK9Q,KAAI,SAAAC,GAAC,OAAI,IAAI5E,YAAU4E,WAAM/B,OAKrI,OAAI2R,EAAsB,EAGxB,uBAAKpJ,UAAU,eAAf,UACE,eAACY,EAAA,EAAD,CAAYmI,QAAQ,KAAK3I,MAAO,CAACkK,cAAe,QAAhD,SACGlB,EAAsB,IAAM,6BAA+B,UAE9D,eAACZ,GAAD,CAAyB9H,MAAO0I,OAKlC,uBAAKpJ,UAAU,eAAf,UACE,eAACY,EAAA,EAAD,CAAYmI,QAAQ,KAApB,sBAGA,wBAAMoB,SAAUV,EAAOc,aAAvB,UACE,sBAAKvK,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,aACHjE,KAAK,aACLiG,MAAM,aACNV,YAAY,aACZI,MAAO+I,EAAOW,OAAOR,WACrBrJ,SAAUkJ,EAAOgB,aACjBC,MAAOjB,EAAOkB,QAAQf,YAAcgB,QAAQnB,EAAOoB,OAAOjB,gBAG9D,sBAAK5J,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,aACHjE,KAAK,aACLiG,MAAM,aACNN,MAAO+I,EAAOW,OAAOP,WACrBvJ,YAAW,4BACXC,SAAUkJ,EAAOgB,aACjBC,MAAOjB,EAAOkB,QAAQd,YAAce,QAAQnB,EAAOoB,OAAOhB,YAC1DiB,WAAW,mDAGf,sBAAK9K,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,kBACHjE,KAAK,kBACLiG,MAAM,kBACNN,MAAO+I,EAAOW,OAAON,gBACrBxJ,YAAW,oBACXC,SAAUkJ,EAAOgB,aACjBC,MAAOjB,EAAOkB,QAAQb,iBAAmBc,QAAQnB,EAAOoB,OAAOf,iBAC/DgB,WAAW,wBAGf,sBAAK9K,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,mBACHjE,KAAK,mBACLiG,MAAM,mBACNN,MAAO+I,EAAOW,OAAOL,iBACrBxJ,SAAUkJ,EAAOgB,aACjBC,MAAOjB,EAAOkB,QAAQd,YAAce,QAAQnB,EAAOoB,OAAOd,kBAC1De,WAAW,iEAGf,sBAAK9K,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,oBACHjE,KAAK,oBACLiG,MAAM,oBACNN,MAAO+I,EAAOW,OAAOJ,kBACrB1J,YAAY,QACZC,SAAUkJ,EAAOgB,aACjBK,WAAU,iFACVJ,MAAOjB,EAAOkB,QAAQd,YAAce,QAAQnB,EAAOoB,OAAOb,uBAG9D,sBAAKhK,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,0BACHjE,KAAK,0BACLiG,MAAM,0BACNN,MAAO+I,EAAOW,OAAOH,wBACrB1J,SAAUkJ,EAAOgB,aACjBC,MAAOjB,EAAOkB,QAAQd,YAAce,QAAQnB,EAAOoB,OAAOZ,yBAC1Da,WAAU,4FAGd,sBAAK9K,UAAU,qBAAf,SACE,eAAC,KAAD,CACEwK,WAAS,EACTxK,UAAU,oBACVhB,GAAG,2BACHjE,KAAK,2BACLiG,MAAM,2BACNN,MAAO+I,EAAOW,OAAOF,yBACrB3J,SAAUkJ,EAAOgB,aACjBK,WAAU,wEACVJ,MAAOjB,EAAOkB,QAAQd,YAAce,QAAQnB,EAAOoB,OAAOX,8BAK9D,eAACa,GAAA,EAAD,CAAQvI,MAAM,UAAUuG,QAAQ,YAAYiC,KAAK,SAAjD,2B,qBCvMOC,GAxBS,SAAC,GAMhB,IALLC,EAKI,EALJA,OAAQC,EAKJ,EALIA,SAAUrI,EAKd,EALcA,YAMdsI,EAAQC,eAGd,OACE,eAACC,GAAA,EAAD,CACEtM,GAAG,qBACHmC,KAAM+J,EACNC,SAAUA,EACVrJ,QAASgB,EAJX,SAME,sBAAK1C,MAAO,CAACC,MAAO,MAAOkL,gBAAiBH,EAAMI,QAAQC,WAAWnW,QAASoW,OAAQ,YAAaC,YAAaP,EAAMI,QAAQI,UAAUC,KAAMC,SAAU,QAASC,IAAK,KAAMC,KAAM,OAAlL,SACE,eAAC,GAAD,S,WCpBOC,GCEQ,WACrB,MAAgC/K,WAAyC,MAAzE,mBAAOiK,EAAP,KAAiBe,EAAjB,KAUA,OACE,uCACA,eAAC,KAAD,CAAQnD,QAAQ,YAAYpI,QAVV,SAACyC,GACnB8I,EAAY9I,EAAM+I,gBASlB,0BAGA,eAAC,GAAD,CAAiBjB,SAAUC,EAAUA,SAAUA,EAAUrI,YATvC,WAClBoJ,EAAY,aCsBDE,I,QA9BE,SAAC,GAUP,IAVSpR,EAUV,EAVUA,MAUV,IAViB+H,eAUjB,aAVkCsJ,gBAUlC,cAVoD9K,QAUpD,EAVqE+K,cAUrE,EAV4FC,cAU5F,WAVoG9U,EAUpG,MAV+G+U,gBAU/G,WAV0H/U,EAU1H,EAVqIkJ,EAUrI,EAVqIA,QAY3I,OACI,sBAAKA,QAAS0L,OAAW5U,EAAYkJ,EAASX,UAAU,kBAAxD,SACI,sBAAKA,UAAU,OAAOI,MAAO,CAAEqL,WAAW,OAAD,OAASzQ,EAAT,MAAzC,SACK+H,EAEG,sBAAK/C,UAAW,4BAA8BqM,EAAW,WAAa,UAAY1L,QAAS0L,OAAW5U,EAAY+U,EAAlH,SACI,eAAC,KAAD,CAAYzD,QAAQ,UAApB,sBAGJ,sBAAK/I,UAAW,yBAA2BqM,EAAW,WAAa,UAAW1L,QAAS0L,OAAW5U,EAAY8U,EAA9G,SACI,eAAC,KAAD,CAAYxD,QAAQ,UAAUpI,QAAS0L,EAAWE,OAAQ9U,EAA1D,yB,WC2FTgV,GAlFM,SAAC,GAOX,IAPaC,EAOd,EAPcA,kBAAmBC,EAOjC,EAPiCA,kBAAmBC,EAOpD,EAPoDA,WAAY7N,EAOhE,EAPgEA,UAAW8N,EAO3E,EAP2EA,YAQ3E3J,EAAiBnL,IACjB2F,EAAWC,cACXnI,EAAS+H,cAEf,EAA4CK,oBAAS,GAArD,mBAAOkP,EAAP,KAAuBC,EAAvB,KAiBA,OAJAH,EAAaA,IAAiB1J,EAK1B,iCACI,iCACI,eAAC8J,GAAA,EAAD,CACElU,MAAM,wBACNmU,QAASH,EACTvM,SArBqB,SAAC6C,GAChC2J,EAAkB3J,EAAM3C,OAAOwM,UAqBrBrL,GAAI,CACAY,MAAO,UACP,gBAAiB,CACfA,MAAQ,cARpB,qBAYA,sBAAKxC,UAAU,YAAf,SACK0M,EAAkBnT,KAAI,SAAC2T,EAAMzT,GAAO,IAAD,QAC1BU,EAAI,UAAG4E,EAAUmO,UAAb,QAAsB,CAAC7P,OAAQ,cACnC1B,EAAyB,WAAhBxB,EAAKkD,OAad/D,EAAe,oBAAGa,EAAKqB,YAAR,aAAG,EAAWlC,uBAAd,QAAiC,EAEtD,OAAKwT,GAAkBxT,EAAkB,EAC9B,+BAGJ,eAAC,GAAD,CACH+S,SAAUO,EACVrL,QAAyB,eAAhBpH,EAAKkD,OACdiP,cAA+B,WAAhBnS,EAAKkD,OACpBrC,MAAOW,EAAM,UAAGxB,EAAKqB,YAAR,aAAG,EAAWvC,WAAQxB,EACnCsL,SAA8C,IAArC4J,EAAkBQ,QAAQD,GACnCX,MAvBU,WA7BZ,IAAC/Q,IA6B6B0R,EA5BxChK,GACAjE,EAAQ1I,iBAAiB2M,EAAgB,IAAItO,YAAU4G,IACtDqI,MAAK,kBAAMnG,EAASgF,GAAkB,CAAClF,OAAQhI,EAAOC,UAAwBP,QAASgO,SAkD5EsJ,SAtBa,WAAO,IAAD,MACf7Q,IACM,QAAN,EAAAgI,cAAA,mBAAQxC,KAAR,UAAahH,EAAKqB,YAAlB,aAAa,EAAWtC,UAAW,iBAAnC,SAA8C0K,UAqBlDjD,QAxBY,WAAQkM,EAAYK,KAyB3BzT,EAAEI,qBC7GhB,OAA0B,gCC0B1BuT,I,QArBE,SAAC,GAA4G,IAA3GpS,EAA0G,EAA1GA,MAAOqS,EAAmG,EAAnGA,SAAUC,EAAyF,EAAzFA,SAAUC,EAA+E,EAA/EA,MAC1C,OACI,uBAAKvN,UAAU,cAAf,UACQ,uBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,YAAYG,IAAI,OAAOF,IAAKjF,IAC3C,sBAAKgF,UAAU,WAAf,SACI,eAAC,KAAD,mCAEJ,sBAAKA,UAAU,aAAf,SAA4B,eAAC,KAAD,CAAY+I,QAAQ,UAApB,uBAEhC,eAAC,KAAD,CAAY/I,UAAU,WAAtB,SAAkCqN,IAClC,uBAAKrN,UAAU,UAAf,UACI,eAAC,KAAD,CAAYA,UAAU,OAAtB,SAA8BsN,IAC9B,gBAAC,KAAD,CAAYtN,UAAU,QAAtB,UAA+BuN,EAC3B,sBAAKvN,UAAU,YAAYC,IAAKuN,GAAKrN,IAAI,mBCnBlD,I,QCAA,ICAA,ICAA,ICAA,IJAA,IAA0B,uCKA1B,OAA0B,sCCA1B,OAA0B,sCCA1B,OAA0B,sCCQ5BsN,GAA4B,CACrC,CACI3V,QAASO,UAAQC,WAAW7C,UAC5B+F,KAAMpD,GAAgB3C,UACtBsF,KAAM,SACNhC,YAAa,mCACbiC,MAAO0S,GACPH,MAAO,MAEX,CACIzV,QAASO,UAAQC,WAAW7C,UAC5B+F,KAAMpD,GAAgB3C,UACtBsF,KAAM,aACNhC,YAAa,oBACbiC,MAAO2S,GACPJ,MAAO,MAEX,CACIzV,QAASO,UAAQC,WAAW7C,UAC5B+F,KAAMpD,GAAgB3C,UACtBsF,KAAM,QACNhC,YAAa,wCACbiC,MAAO4S,GACPL,MAAO,GAEX,CACIzV,QAASO,UAAQC,WAAW7C,UAC5B+F,KAAMpD,GAAgB3C,UACtBsF,KAAM,aACNhC,YAAa,oBACbiC,MAAO2S,GACPJ,MAAO,MAEX,CACIzV,QAASO,UAAQC,WAAW7C,UAC5B+F,KAAMpD,GAAgB3C,UACtBsF,KAAM,iBACNhC,YAAa,UACbiC,MAAO6S,GACPN,MAAO,OCzBT9R,GAAmC,CACvCC,WAAY,GACZC,OAAO,YAAK8R,IACZ7R,OAAQ,IAGGkS,GAAqBhS,YAAY,CAC5Cf,KAAM,gBACNU,gBAEAM,SAAU,GAKVC,cAAe,SAACC,OAiCH6R,MAAf,QC3BMC,GAAc,SAACC,EAAsB7T,EAAiC4E,GAA0C,IAAD,cAM7GxG,EACAwC,EACAwS,EACA/R,EARAyS,EAAW9T,EAAK6T,GAEpB,IAAOC,EACH,OAAO,+BAOX,OAAQA,EAAS5Q,QACb,IAAK,SACD9E,EAAM,WACNwC,EAAO,WACPwS,EAAQ,EACR,MAaJ,QACIhV,EAAM,GACNwC,EAAO,GACPwS,EAAQ,EACR,MAXJ,IAAK,SACDhV,EAAG,UAAG0V,EAASf,YAAZ,aAAG,EAAelS,MACrBD,EAAI,UAAGkT,EAASf,YAAZ,aAAG,EAAenS,KACtBwS,EAAK,UAAGU,EAASf,YAAZ,aAAG,EAAeK,MACvB,IAAMvY,EAAM,UAAGiZ,EAASf,YAAZ,aAAG,EAAe1R,KAAK3B,WACnC2B,EAAOxG,EAAM,UAAG+J,EAAU/J,UAAb,aAAG,EAAmBwG,UAAO/D,EAUlD,OAAO,eAAC,GAAD,CACHuD,MAAOzC,EACP8U,SAAUtS,EACVuS,SAAQ,oBAAE9R,SAAF,aAAE,EAAM1C,aAAR,QAAiB,GACzByU,MAAOA,EAAM1T,cCrEfqU,I,QAAe,SAAC,GAKX,IALavB,EAKd,EALcA,kBAAmB5N,EAKjC,EALiCA,UAAW8N,EAK5C,EAL4CA,YAMlD,OACI,sBAAK7M,UAAU,YAAf,SACK2M,EAAkBpT,KAAI,SAAC2T,EAAMzT,GAAO,IAAD,IAC1BU,EAAI,UAAG4E,EAAUmO,UAAb,QAAsB,CAAC7P,OAAQ,cACnC1B,EAAyB,WAAhBxB,EAAKkD,OASpB,OAAO,eAAC,GAAD,CACHgP,UAAU,EACV9K,QAAyB,eAAhBpH,EAAKkD,OACdiP,cAA+B,WAAhBnS,EAAKkD,OACpBrC,MAAOW,EAAM,UAAGxB,EAAKqB,YAAR,aAAG,EAAWvC,WAAQxB,EACnCsL,SAAS,EACTwJ,MAbU,aAcVC,SAba,WAAO,IAAD,MACf7Q,IACM,QAAN,EAAAgI,cAAA,mBAAQxC,KAAR,UAAahH,EAAKqB,YAAlB,aAAa,EAAWtC,UAAW,iBAAnC,SAA8C0K,UAYlDjD,QAVY,WAAQkM,EAAYK,aCtB9CvV,GAAmB,IAAI/C,YAAUgD,EAAWC,SAASC,SACrDG,GAAkB,IAAIrD,YAAUsD,EAAUL,SAASC,SA+T1CqW,OA7Tf,WACE,MAA0CvQ,oBAAS,GAAnD,mBAAOwQ,EAAP,KAAsBvQ,EAAtB,KACA,EAAsDD,oBAAS,GAA/D,mBAAOyQ,EAAP,KAA4BC,EAA5B,KAEA,EAAgC1Q,mBAAS,IAAzC,mBAAOxI,EAAP,KAAiBgJ,EAAjB,KACA,EAA4BR,mBAAShJ,YAAUU,SAA/C,mBAAOD,EAAP,KAAekZ,EAAf,KACA,EAA0B3Q,mBAAS,IAAnC,mBAAOhB,EAAP,KAAc4R,EAAd,KACA,EAAoD5Q,mBAAS,IAA7D,mBAAOa,EAAP,KAA2BC,EAA3B,KACA,EAAsBd,mBAAS,GAA/B,mBAAO5G,EAAP,KAAYyX,EAAZ,KACA,EAA0B7Q,mBAAS,GAAnC,mBAAOiB,EAAP,KAAcC,EAAd,KAEA,EAAwClB,mBAAS,IAAjD,mBAAO2B,EAAP,KAAqBmP,EAArB,KAEA,EAA0C9Q,mBAAS,IAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAAsCV,mBAAS,IAA/C,mBAAO+Q,GAAP,KAAoBC,GAApB,KACA,GAAkChR,mBAAS,IAA3C,qBAAOiR,GAAP,MAAkBC,GAAlB,MACA,GAAkDlR,mBAAS,IAA3D,qBAAOmR,GAAP,MAA0BC,GAA1B,MACA,GAAwDpR,mBAAS,GAAjE,qBAAOqR,GAAP,MAA6BC,GAA7B,MACA,GAAgCtR,mBAAS,GAAzC,qBAAOuR,GAAP,MAAiBC,GAAjB,MACM5Z,GAAS+H,cAnBM,SAqBN8R,KArBM,8EAqBrB,gCAAAla,EAAA,4DAGkB,gCACVma,EAAO,CAAE5X,oBAAqB,aAC9BJ,EAAa,IAAIC,aAFP,gCAE2B+X,EAAK5X,qBAE1CnC,EAAW,IAAIiC,IACnBF,EAAY9B,GAAQ8Z,EAAK5X,qBAR7B,kBAUSnC,GAVT,4CArBqB,+BAkCNga,KAlCM,8EAkCrB,sCAAApa,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQE,EAAWD,GAAiB1C,GAF1D,kBAKkDiK,EAAOC,+BAA+BxH,IALxF,0CAKWyH,EALX,oBAM0BxK,EAAQoK,QAAQK,oBAAoBvF,MAAMsF,GANpE,QAMUJ,EANV,OAQIJ,QAAQC,IAAIG,GACZgP,GAAuB,GACvBI,EAAgBpP,EAAQC,cAV5B,kDAYIL,QAAQC,IAAI,qCAAZ,MAZJ,2DAlCqB,+BAmDNC,KAnDM,8EAmDrB,sCAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAK4C0J,EAAQxK,+BAA+Be,GAAOC,UAAWkC,IALrG,0CAKW0H,EALX,oBAM0BnK,EAAQoK,QAAQ5J,cAAc0E,MAAMiF,GAN9D,QAMUC,EANV,OAQIJ,QAAQC,IAAIG,GACZzB,GAAiB,GACjBO,EAAYkB,EAAQlK,SAASyE,YAC7B0U,EAAUjP,EAAQjK,OAAOwE,YACzB2U,EAASlP,EAAQ1C,OACjB8B,EAAsBY,EAAQC,cAC9BkP,EAAOnP,EAAQtI,KACf8H,EAASQ,EAAQT,OAfrB,kDAiBIK,QAAQC,IAAI,+BAAZ,MAjBJ,2DAnDqB,oEAwErB,8BAAAhK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,SAKI2J,QAAQC,IAAIjK,GALhB,SAMU+J,EAAQhK,WAAWC,GAN7B,OAOI2I,GAAiB,GAPrB,kDASIqB,QAAQC,IAAI,sBAAZ,MATJ,QAYEC,KAZF,2DAxEqB,oEAwFrB,8BAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,SAKI2J,QAAQC,IAAIjK,GALhB,SAMUsK,EAAOgQ,mBAAmBta,GANpC,OAOIoZ,GAAuB,GAP3B,kDASIpP,QAAQC,IAAI,sBAAZ,MATJ,QAYEoQ,KAZF,2DAxFqB,oEAuGrB,8BAAApa,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAKU0J,EAAQ9I,qBAAqBjB,EAASmJ,GALhD,OAMIC,EAAiB,IANrB,kDAQIY,QAAQC,IAAI,sBAAZ,MARJ,QAWEC,KAXF,2DAvGqB,oEAqHrB,8BAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAKU0J,EAAQ5I,mBAAmBnB,EAAS,IAAIN,YAAU+Z,KAL5D,OAMIC,GAAe,IANnB,kDAQI1P,QAAQC,IAAI,sBAAZ,MARJ,QAWEC,KAXF,2DArHqB,oEAmIrB,8BAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAKU0J,EAAQ1I,iBAAiBrB,EAAS,IAAIN,YAAUia,KAL1D,OAMIC,GAAa,IANjB,kDAQI5P,QAAQC,IAAI,sBAAZ,MARJ,QAWEC,KAXF,2DAnIqB,oEAiJrB,8BAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAKU0J,EAAQvI,sBAAsBxB,EAAS,IAAIN,YAAUia,KAL/D,OAMIC,GAAa,IANjB,kDAQI5P,QAAQC,IAAI,sBAAZ,MARJ,QAWEC,KAXF,2DAjJqB,oEA+JrB,8BAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAKU0J,EAAQrI,eAAe1B,EAAS6Z,GAAmBE,IAL7D,OAMID,GAAqB,IACrBE,GAAwB,IAP5B,kDASIhQ,QAAQC,IAAI,sBAAZ,MATJ,QAYEC,KAZF,2DA/JqB,oEA8KrB,8BAAAjK,EAAA,sEACyBka,KADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQJ,EAAYD,GAAkBpC,GAF5D,kBAKU0J,EAAQlI,OAAO7B,EAASia,IALlC,OAMIC,GAAY,IANhB,kDAQIlQ,QAAQC,IAAI,sBAAZ,MARJ,QAWEC,KAXF,2DA9KqB,sBAgNrB,OApBAQ,qBAAU,WACR,GAAIpK,GAAOuK,UAAW,CACpB,IACEwP,KACA,MAAO/O,GACH6N,GACFnP,QAAQwL,MAAMlK,GAIlB,IACEpB,KACA,MAAOoB,GACH4N,GACFlP,QAAQwL,MAAMlK,OAInB,CAAChL,GAAOuK,YAGRvK,GAAOuK,UAMN,sBAAKC,UAAU,MAAf,SACE,kCAEKqO,GAAwB,yBAAQ1N,QA1NtB,4CA0Nc,+BAIzB0N,IAAwBD,GAAkB,yBAAQzN,QA9NvC,4CA8N+B,wBAI1C0N,GAAuBD,EACrB,uBAAKhO,MAAO,CAAEC,MAAO,cAAeoP,OAAQ,SAAUC,UAAW,QAAjE,UACE,+DACA,qDAA4Bta,EAC5B,mDAA0BC,EAAOwE,WACjC,kDACC+C,GAA0B,IAAjBA,EAAM4E,OAAe,8BAAK5E,EAAMrD,KAAI,SAACC,EAAGC,GAAJ,OAAU,8BAAaD,EAAEK,YAANJ,QAAgC,kBACjG,iDACCgF,GAAoD,IAA9BA,EAAmB+C,OACxC,8BAAK/C,EAAmBlF,KAAI,SAACC,EAAGC,GAE9B,IAAMkW,EAAcpQ,EAAavC,MAAK,SAAAkQ,GAAI,OAAIA,EAAKlO,KAAOvF,KACpDkP,EAAUgH,EAAW,UACpBA,EAAY3O,MADQ,cACG2O,EAAY5W,YADf,oBACsC4W,EAAYnU,KAAK3B,YADvD,cAEhBL,GACX,OAAO,8BAAamP,GAAJlP,QAGhB,yBACJ,kDAAyBoF,EACzB,gDAAuB7H,EAEvB,qBAAIoJ,MAAO,CAAEwP,UAAW,IAAxB,kBAEA,iCACE,wBACExP,MAAO,CAAEC,MAAO,KAChBC,YAAY,kCACZC,SAAU,SAAAC,GAAC,OAAIlC,EAAiBkC,EAAEC,OAAOC,QACzCA,MAAOrC,IAET,yBAAQsC,QAjQH,4CAiQL,6BAGF,iCACE,wBACEP,MAAO,CAAEC,MAAO,KAChBC,YAAY,8BACZC,SAAU,SAAAC,GAAC,OAAIoO,GAAepO,EAAEC,OAAOC,QACvCA,MAAOiO,KAET,yBAAQhO,QA3QH,4CA2QL,2BAGF,iCACE,wBACEP,MAAO,CAAEC,MAAO,KAChBC,YAAY,2BACZC,SAAU,SAAAC,GAAC,OAAIsO,GAAatO,EAAEC,OAAOC,QACrCA,MAAOmO,KAET,yBAAQlO,QArRH,4CAqRL,sBACA,yBAAQA,QAtRH,4CAsRL,4BAGF,iCACE,wBACEP,MAAO,CAAEC,MAAO,KAChBC,YAAY,uBACZC,SAAU,SAAAC,GAAC,OAAIwO,GAAqBxO,EAAEC,OAAOC,QAC7CA,MAAOqO,KAET,wBACE3O,MAAO,CAAEC,MAAO,KAChBC,YAAY,8BACZC,SAAU,SAAAC,GAAC,OAAI0O,GAAwB1O,EAAEC,OAAOC,QAChDA,MAAOuO,KAET,yBAAQtO,QAtSH,4CAsSL,gCAGF,iCACE,wBACEP,MAAO,CAAEC,MAAO,KAChBC,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAI4O,GAAY5O,EAAEC,OAAOC,QACpCA,MAAOyO,KAET,yBAAQxO,QAhTH,4CAgTL,2BAKJ,qEAlGR,sBAAKP,MAAO,CAAEuI,QAAS,OAAQkH,eAAgB,SAAUD,UAAW,SAApE,SACE,eAAC,IAAD,OCxNFE,GAAY,IAAIlb,YAAUmb,EAAIlY,SAASC,SA4I9BqW,OAzIf,WACE,MAA0CvQ,oBAAS,GAAnD,mBAAOwQ,EAAP,KAAsBvQ,EAAtB,KAEA,EAAwCD,mBAAS,IAAjD,mBAAO2B,EAAP,KAAqBmP,EAArB,KAEA,EAAwD9Q,mBAAS,IAAjE,mBAAOoS,EAAP,KAA6BC,EAA7B,KACA,EAAsErS,mBAAS,IAA/E,mBAAOsS,EAAP,KAAoCC,EAApC,KACA,EAAwDvS,mBAAS,IAAjE,mBAAOwS,EAAP,KAA6BC,EAA7B,KACM7a,EAAS+H,cARM,SAUN8R,IAVM,2EAUrB,gCAAAla,EAAA,4DAGkB,gCACVma,EAAO,CAAE5X,oBAAqB,aAC9BJ,EAAa,IAAIC,aAFP,gCAE2B+X,EAAK5X,qBAE1CnC,EAAW,IAAIiC,IACnBF,EAAY9B,EAAQ8Z,EAAK5X,qBAR7B,kBAUSnC,GAVT,4CAVqB,+BAuBN+a,IAvBM,2EAuBrB,sCAAAnb,EAAA,sEACyBka,IADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQ+X,EAAKD,GAAWva,GAF9C,kBAKkDiK,EAAOC,+BAA+BqQ,IALxF,0CAKWpQ,EALX,oBAM0BxK,EAAQoK,QAAQK,oBAAoBvF,MAAMsF,GANpE,QAMUJ,EANV,OAQIJ,QAAQC,IAAIG,GACZzB,GAAiB,GACjB6Q,EAAgBpP,EAAQC,cAV5B,kDAYIL,QAAQC,IAAI,qCAAZ,MAZJ,2DAvBqB,kEAwCrB,8BAAAhK,EAAA,sEACyBka,IADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQ+X,EAAKD,GAAWva,GAF9C,SAKI2J,QAAQC,IAAIjK,GALhB,SAMUsK,EAAOgQ,mBAAmBta,GANpC,OAOI2I,GAAiB,GAPrB,kDASIqB,QAAQC,IAAI,sBAAZ,MATJ,QAYEmR,IAZF,2DAxCqB,kEAuDrB,8BAAAnb,EAAA,sEACyBka,IADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQ+X,EAAKD,GAAWva,GAF9C,kBAKUiK,EAAO5I,eAAe1B,EAAS8a,EAAsBE,EAA6B,IAAItb,YAAUwb,IAL1G,OAMIH,EAAwB,IACxBE,EAA+B,IAC/BE,EAAwB,IAR5B,kDAUInR,QAAQC,IAAI,sBAAZ,MAVJ,QAaEmR,IAbF,2DAvDqB,sBAmFrB,OAZA1Q,qBAAU,WACR,GAAIpK,EAAOuK,UACT,IACEuQ,IACA,MAAO9P,GACH4N,GACFlP,QAAQwL,MAAMlK,MAInB,CAAChL,EAAOuK,YAGRvK,EAAOuK,UAMN,sBAAKC,UAAU,MAAf,SACE,kCAEKoO,GAAkB,yBAAQzN,QA7FhB,2CA6FQ,+BAInByN,EACE,uBAAKhO,MAAO,CAAEC,MAAO,cAAeoP,OAAQ,SAAUC,UAAW,QAAjE,UACE,iDACCnQ,GAAwC,IAAxBA,EAAaiC,OAAe,8BAAKjC,EAAahG,KAAI,SAACC,EAAGC,GAAJ,OAAU,4CAAoBD,EAAEwF,GAAtB,aAA6BxF,EAAEwH,MAA/B,cAA0CxH,EAAET,YAA5C,oBAAmES,EAAEgC,KAAK3B,aAAjEJ,QAA6F,yBAEnL,qBAAI2G,MAAO,CAAEwP,UAAW,IAAxB,kBAEA,iCACE,wBACExP,MAAO,CAAEC,MAAO,KAChBC,YAAY,gCACZC,SAAU,SAAAC,GAAC,OAAIyP,EAAwBzP,EAAEC,OAAOC,QAChDA,MAAOsP,IAET,wBACE5P,MAAO,CAAEC,MAAO,KAChBC,YAAY,sCACZC,SAAU,SAAAC,GAAC,OAAI2P,EAA+B3P,EAAEC,OAAOC,QACvDA,MAAOwP,IAET,wBACE9P,MAAO,CAAEC,MAAO,KAChBC,YAAY,2BACZC,SAAU,SAAAC,GAAC,OAAI6P,EAAwB7P,EAAEC,OAAOC,QAChDA,MAAO0P,IAET,yBAAQzP,QA3HH,2CA2HL,mCAMJ,qEA3CR,sBAAKP,MAAO,CAAEuI,QAAS,OAAQkH,eAAgB,SAAUD,UAAW,SAApE,SACE,eAAC,IAAD,OClFFE,GAAY,IAAIlb,YAAUmb,EAAIlY,SAASC,SAmM9ByY,OAhMf,WACE,MAA0C3S,oBAAS,GAAnD,mBAAOwQ,EAAP,KAAsBvQ,EAAtB,KAEA,EAA0BD,mBAAS,IAAnC,mBAAOhB,EAAP,KAAc4R,EAAd,KAEA,EAAkD5Q,mBAAS,GAA3D,mBAAO4S,EAAP,KACMhb,GADN,KACe+H,eANI,SAaJ8R,IAbI,2EAanB,gCAAAla,EAAA,4DAIkB,gCACVma,EAAO,CAAE5X,oBAAqB,aAC9BJ,EAAa,IAAIC,aAFP,gCAE2B+X,EAAK5X,qBAE1CnC,EAAW,IAAIiC,IACnBF,EAAY9B,EAAQ8Z,EAAK5X,qBAT7B,kBAWSnC,GAXT,4CAbmB,+BA2BJkb,IA3BI,2EA2BnB,sCAAAtb,EAAA,sEACyBka,IADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQ+X,EAAKD,GAAWva,GAF9C,kBAK4CiK,EAAO4I,+BAA+B0H,IALlF,0CAKWzH,EALX,oBAM0BnT,EAAQoK,QAAQgJ,oBAAoBlO,MAAMiO,GANpE,QAMU/I,EANV,OAQIJ,QAAQC,IAAIG,GACZzB,GAAiB,GACjB2Q,EAASlP,EAAQ1C,OAVrB,kDAYIsC,QAAQC,IAAI,8BAAZ,MAZJ,2DA3BmB,kEA4CnB,8BAAAhK,EAAA,sEACyBka,IADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQ+X,EAAKD,GAAWva,GAF9C,SAKI2J,QAAQC,IAAIjK,GALhB,SAMUsK,EAAOkR,wBAAwBxb,GANzC,OAOI2I,GAAiB,GAPrB,kDASIqB,QAAQC,IAAI,sBAAZ,MATJ,QAYEsR,IAZF,2DA5CmB,kEA2DnB,8BAAAtb,EAAA,sEACyBka,IADzB,cACQ9Z,EADR,OAEQL,EAAU,IAAI8C,IAAQ+X,EAAKD,GAAWva,GAF9C,kBAKUiK,EAAO8J,iBAAiBpU,EAAS,IAAIN,YAAU,iDALzD,uDAmDMsK,QAAQC,IAAI,sBAAZ,MAnDN,QAsDEsR,IAtDF,0DA3DmB,kEAoHnB,8BAAAtb,EAAA,sEACyBka,IADzB,OACQ9Z,EADR,OAGQmE,EAHR,+BAAAvE,EAAA,MAGmB,WAAOmC,EAAYqC,GAAnB,qBAAAxE,EAAA,sEACWyE,uBAAYD,EAAKE,YAD5B,cACTC,EADS,gBAEMxC,EAAWyC,eAAe,IAAInF,YAAUkF,IAF9C,UAETE,EAFS,OAGfkF,QAAQC,IAAI,UAEPnF,EALU,sBAMLC,MAAM,uCAND,cASTpC,EAAWqC,0BAAeF,EAAOG,MAEvC+E,QAAQC,IAAI,eAAgBtH,GAXb,UAaIuC,MAAMvC,EAASsC,KAAKE,KAbxB,QAaTC,EAbS,OAcf4E,QAAQC,IAAI,OAAQ7E,EAAKC,QAdV,4CAHnB,wDAoBE,IACEb,EAASnE,EAAS+B,WAAY,IAAI1C,YAAU,iDAC5C,MAAO+b,GACLzR,QAAQC,IAAI,sBAAuBwR,GAGvCF,IA1BF,2CApHmB,wBA6JnB,OApJA7Q,qBAAU,WACRV,QAAQC,IAAIqR,KACX,CAACA,IAsIJ5Q,qBAAU,WACR,GAAIpK,EAAOuK,UACT,IACE0Q,IACA,MAAOjQ,GACH4N,GACFlP,QAAQwL,MAAMlK,MAInB,CAAChL,EAAOuK,YAGRvK,EAAOuK,UAMN,sBAAKC,UAAU,MAAf,SACE,kCAEKoO,GAAkB,yBAAQzN,QAvKlB,2CAuKU,+BAInByN,EACE,uBAAKhO,MAAO,CAAEC,MAAO,cAAeoP,OAAQ,SAAUC,UAAW,QAAjE,UACE,0CACC9S,GAA0B,IAAjBA,EAAM4E,OAAe,8BAAK5E,EAAMrD,KAAI,SAACC,EAAGC,GAAJ,OAAU,8CAAsBD,EAAEK,aAAfJ,QAA2C,kBAE5G,qBAAI2G,MAAO,CAAEwP,UAAW,IAAxB,kBAEE,yBAAQjP,QAlLL,2CAkLH,sBACA,yBAAQA,QAnLL,2CAmLH,oBAKJ,qEAxBR,sBAAKP,MAAO,CAAEuI,QAAS,OAAQkH,eAAgB,SAAUD,UAAW,SAApE,SACE,eAAC,IAAD,OCpKKgB,GAAW,cAEXC,GAAkB,CAE3B,CACIzJ,KAAM,cACNrM,KAAM,cACN+V,UCDe,WAAO,IAAD,UACzB,EAAgClT,mBAAS,IAAzC,mBAAOmT,EAAP,KAAiBlE,EAAjB,KAEMH,EAAoBxV,aAAY,SAACkF,GAAD,OAAsBA,EAAM4U,eAAeC,kBAC3EtE,EAAoBzV,aAAY,SAACkF,GAAD,OAAsBA,EAAM8U,YAAYC,kBACxEC,EAAmBla,aAAY,SAACkF,GAAD,OAAsBA,EAAM4U,eAAeI,oBAC1EC,EAAmBna,aAAY,SAACkF,GAAD,OAAsBA,EAAM8U,YAAYG,oBACvEC,EAAoBpa,aAAY,SAACkF,GAAD,OAAsBA,EAAM4U,eAAeO,eAC3EC,EAAkBta,aAAY,SAACkF,GAAD,OAAsBA,EAAM4U,eAAeS,mBACzEC,EAAiBxa,aAAY,SAACkF,GAAD,OAAsBA,EAAM4U,eAAetY,eAExEqG,EAAY7H,aAAY,SAACkF,GAAD,OAAsBM,GAAeN,EAAD,sBAC3DsQ,GAD2D,CAE9D4E,EACAE,GAH8D,YAI3DE,QAGDhU,EAAWC,cACXnI,EAAS+H,cACT2F,EAAiBnL,IACjB0F,EAAgBtF,EAAiB,iCAAiC,GAaxE,OAXAyH,qBAAU,WACFnC,IAAkB2T,GAClB1T,EAAS6K,GAA6B9K,MAC3C,CAACA,EAAeC,EAAUgP,EAAmB0E,IAEhDxR,qBAAU,WACFsD,IAAmBmO,GAAoB7b,GAAUA,EAAOuK,WACxDrC,EAASiF,GAA6B,CAACnF,OAAQhI,EAAOC,UAAwBP,QAASgO,OAC5F,CAACA,EAAgBxF,EAAUiP,EAAmB0E,EAAkB7b,IAG5D,qCAEH,uBAAKwK,UAAU,oBAAf,UACI,sBAAKA,UAAU,YACf,sBAAKA,UAAU,YACf,uBAAKA,UAAU,gBAAf,UACI,uBAAKA,UAAU,wBAAf,UAEI,eAAC,YAAD,CAAUA,UAAU,WAAW2R,YAAY,EAAOC,gBAAgB,EAAOC,YAAY,EAAOC,UAAQ,EAApG,SAEKJ,EAAenY,KAAI,SAACC,EAAGC,GAAO,IAAD,IACpBU,EAAI,UAAG4E,EAAUvF,UAAb,QAAmB,CAACP,MAAO,IACrC,OAAO,sBAAa+G,UAAU,QAAQI,MAAO,CAAEqL,WAAW,OAAD,iBAAStR,EAAKqB,YAAd,aAAS,EAAWvC,MAApB,OAAxCQ,QAIzB,eAACwH,GAAD,OAIJ,uBAAKjB,UAAU,qBAAf,UACI,sBAAKA,UAAU,4BAAf,SACI,sBAAKA,UAAU,eAAf,SACA,sBAAKA,UAAU,2BAAf,SAEI,sBAAKA,UAAU,kBACXI,MAAO,CAAEqL,WAAW,OAAD,iBAAS1M,EAAUuS,UAAnB,iBAAS,EAA8B9V,YAAvC,aAAS,EAAoCvC,MAA7C,MACnB0H,QAASnL,EAAOuK,UAAY,kBAAM8M,EAAYyE,SAAqB7Z,EAFvE,SAGI,sBAAKuI,UAAU,QAAf,kCASZ,sBAAKA,UAAU,8BAAf,SACQ,sBAAKA,UAAU,mBACXI,MAAO,CAAEqL,WAAW,OAAD,iBAAS1M,EAAUyS,UAAnB,iBAAS,EAA4BhW,YAArC,aAAS,EAAkCvC,MAA3C,MACnB0H,QAASnL,EAAOuK,UAAY,kBAAM8M,EAAY2E,SAAmB/Z,EAFrE,SAGI,sBAAKuI,UAAU,QAAf,mCAQZ,eAAC,GAAD,CACI6C,WAAyB,KAAbkO,EACZvV,KAAI,UAAEuD,EAAUgS,UAAZ,aAAE,EAAqBvV,KAC3BsH,YAAc,WAAQ+J,EAAY,KAClC9J,SAAkD,IAAzC4J,EAAkBQ,QAAQ4D,WAK/C,eAAC,GAAD,CACIrE,kBAAmBA,EACnBC,kBAAmBA,EACnBC,YAAapX,EAAOuK,UACpBhB,UAAWA,EACX8N,YAAaA,IAEpBrX,EAAOuK,WACR,sBAAKK,MAAO,CAAEsP,UAAW,SAAUrP,MAAO,OAAQ0R,QAAS,YAA3D,SACI,eAAC,GAAD,MAEJ,sBAAK3R,MAAO,CAAE4R,OAAQ,kBDpG1B,CACI5K,KAAM,aACNrM,KAAM,YACN+V,UL4Dc,WAAO,IAAD,EAClBmB,EAAsB/a,aAAY,SAACkF,GAAD,OAAsBA,EAAM8V,cAAcC,gBAE5EC,GAAY,MAAyB3V,OAA1B,oBAAqCwV,EAAoB1Y,KAAI,SAAAC,GAAC,OAAIA,EAAE6Y,WAC/E1F,EAAoBzV,aAAY,SAACkF,GAAD,OAAsBA,EAAM8U,YAAYC,kBACxEmB,EAAYpb,aAAY,SAACkF,GAAD,ODlDJ,SAACO,EAAsB0V,GAEnD,IAAMjW,EAJY,SAACA,GAAD,OAAsBA,EAAMmW,cAIhCzV,CAAYH,GAEpB6V,EAAkBpW,EAAMV,WAAWc,QAAO,SAAAhD,GAAC,OAAI6Y,EAAMrV,MAAK,SAAA7H,GAAC,OAAIA,IAAMqE,QACrEiZ,EAAcrW,EAAMT,OAAOa,QAAO,SAAAhD,GAAC,OAAI6Y,EAAMrV,MAAK,SAAA7H,GAAC,OAAIA,IAAMqE,EAAE1B,QAAQ+B,iBACvE6Y,EAActW,EAAMR,OAAOY,QAAO,SAAAhD,GAAC,OAAI6Y,EAAMrV,MAAK,SAAA7H,GAAC,OAAIA,IAAMqE,QAE7D2D,EAAoC,GAM1C,OAJAqV,EAAgBpV,SAAQ,SAAA5D,GAAC,OAAI2D,EAAO3D,EAAEK,YAAc,CAAEwD,OAAQ,iBAC9DoV,EAAYrV,SAAQ,SAAA5D,GAAC,OAAI2D,EAAO3D,EAAE1B,QAAQ+B,YAAc,CAAEwD,OAAQ,SAAU6P,KAAM1T,MAClFkZ,EAAYtV,SAAQ,SAAA5D,GAAC,OAAI2D,EAAO3D,EAAEK,YAAc,CAAEwD,OAAQ,aAEnDF,ECoC+CwV,CAAevW,EAAQgW,MACrErT,EAAY7H,aAAY,SAACkF,GAAD,OAAsBM,GAAeN,EAAQuQ,MAErEiG,EAA0B,sBAAOjG,GAAP,CAA0BvU,GAAgB3C,UAAUoE,aAEpF,OACA,uBAAKmG,UAAU,mBAAf,UAEI,sBAAKA,UAAU,sBAAf,SACI,eAAC,KAAD,CAAYA,UAAU,cAAtB,yBAEJ,sBAAKA,UAAU,iBAAf,SACKoS,EAAS7Y,KAAI,SAAA2T,GAAI,OAAIa,GAAYb,EAAMoF,EAAWvT,QAMtD6T,EAA2BrZ,KAAI,SAAAvE,GAAW,IAAD,QAChCwG,EAAI,UAAGuD,EAAU/J,UAAb,aAAG,EAAmBwG,KAC1B6W,EAAK,oBAAGJ,EAAoBjV,MAAK,SAAAxD,GAAC,OAAIA,EAAExE,SAAWA,YAA9C,aAAG,EAAoDqd,aAAvD,QAAgE,GAE3E,OACA,uCACI,sBAAKrS,UAAU,sBAAf,SACI,gBAAC,KAAD,CAAYA,UAAU,cAAtB,oDAAsDxE,QAAtD,IAAsDA,OAAtD,EAAsDA,EAAM1C,aAA5D,QAAqE,GAArE,cAIJ,sBAAKkH,UAAU,iBAAf,SACKqS,EAAM7Q,OAAS,EACV,qCAAG4Q,EAAS7Y,KAAI,SAAA2T,GAAI,OAAIa,GAAYb,EAAMoF,EAAWvT,QACrD,sEK/FtB,CACIqI,KAAM,WACNrM,KAAM,UACN+V,UJaY,WAAO,IAAD,EACtB,EAAgClT,mBAAS,IAAzC,mBAAOmT,EAAP,KAAiBlE,EAAjB,KACMF,EAAoBzV,aAAY,SAACkF,GAAD,OAAsBA,EAAM8U,YAAYC,kBACxEE,EAAmBna,aAAY,SAACkF,GAAD,OAAsBA,EAAM8U,YAAYG,oBAEvEtS,EAAY7H,aAAY,SAACkF,GAAD,OAAsBM,GAAeN,EAAOuQ,MAEpEjP,EAAWC,cACXnI,EAAS+H,cACT2F,EAAiBnL,IAQvB,OANA6H,qBAAU,WACFsD,IAAmBmO,GAAoB7b,GAAUA,EAAOuK,WACxDrC,EAASiF,GAA6B,CAACnF,OAAQhI,EAAOC,UAAwBP,QAASgO,OAC5F,CAACA,EAAgBxF,EAAUiP,EAAmB0E,EAAkB7b,IAInE,uBAAKwK,UAAU,iBAAf,UAEI,sBAAKA,UAAU,gBAAf,SACI,eAACY,EAAA,EAAD,CAAYZ,UAAU,oBAAtB,wBAEA,eAAC,GAAD,CAAc2M,kBAAmBA,EAAmB5N,UAAWA,EAAW8N,YAAaA,IAEvF,eAAC,GAAD,CACYhK,WAAyB,KAAbkO,EACZvV,KAAI,UAAEuD,EAAUgS,UAAZ,aAAE,EAAqBvV,KAC3BsH,YAAc,WAAQ+J,EAAY,KAClC9J,SAAkD,IAAzC4J,EAAkBQ,QAAQ4D,UIxCvD,CACI3J,KAAM,eACNrM,KAAM,cACN+V,UErCgB,WACpB,OAAO,+BACH,eAAClQ,EAAA,EAAD,CAAYmI,QAAQ,KAApB,mCFqCJ,CACI3B,KAAM,SACNrM,KAAM,yBACN+V,UAAW3C,IAEf,CACI/G,KAAM,SACNrM,KAAM,qCACN+V,UAAW+B,IAEf,CACIzL,KAAM,SACNrM,KAAM,8BACN+V,UAAWP,KGKJuC,I,QA1CS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAEjBC,EADWC,cACmBC,SAC9B1d,EAAS+H,cAGf,OACI,uBAAKyC,UAAU,yBAAf,UACA,eAACmT,EAAA,EAAD,CAAMC,YAAY,WACdrK,QAAQ,YACRrI,MAAOsS,EACPK,UAAU,UACVC,QAAS,CACLC,UAAW,eAEfnT,MAAO,CAACC,MAAO,QAPnB,SASK0S,EAAMxZ,KAAK,SAACC,EAAGC,GAAJ,OACR,eAAC+Z,EAAA,EAAD,CAAKnH,UAAW7W,EAAOuK,WAAavG,EAAE4N,MAAOwJ,GAAU6C,eAAa,EAASzS,MAAO,eAACJ,EAAA,EAAD,CAAYmI,QAAQ,QAApB,SAA6BvP,EAAEuB,OAAqB2F,MAAOlH,EAAE4N,KAAMsM,GAAIla,EAAE4N,KAAM0J,UAAW6C,QAApGla,QAIlF,uBAAKuG,UAAU,kBAAf,UACI,sBAAKA,UAAU,UAAf,eAEA,eAAC,GAAD,IAEA,uBAAKA,UAAU,qBAAf,UACI,eAACY,EAAA,EAAD,CAAYmI,QAAQ,QAApB,wBACA,oBAAI6K,KAAK,yCAAyCnT,OAAO,SAAzD,SACI,sBAAKT,UAAU,OAAOC,IAAK4T,EAAU1T,IAAI,oBAE7C,oBAAIyT,KAAK,8BAA8BnT,OAAO,SAA9C,SACI,sBAAKT,UAAU,OAAOC,IAAK6T,EAAS3T,IAAI,8BClD7C,OAA0B,iCCA1B,OAA0B,yC,2CCcnC4T,GAAO,WACT,OACI,sBAAKC,MAAM,6BAA6B3T,MAAM,KAAK2R,OAAO,IAAIiC,QAAQ,UAAUC,KAAK,OAArF,SACA,uBAAMC,EAAE,kZAAkZD,KAAK,aA2DxZE,GAtDA,WACX,MAAwBlT,IAAMtD,SAAS,MAAvC,mBAAOyW,EAAP,KAAaC,EAAb,KACe/W,cAMf,OACI,+BACI,uBAAKyC,UAAU,gBAAf,UACI,eAAC,OAAD,CAAM0T,GAAI9C,GAAV,SACI,sBAAK3Q,IAAKsU,GAAMpU,IAAI,WAE5B,uBAAKH,UAAU,cAAf,UAEI,eAACwU,GAAA,EAAD,CAAahK,WAAS,EAAtB,SACI,eAACiK,GAAA,EAAD,CACIC,WAAS,EACT1V,GAAG,qBACH2V,cAAc,EACdjU,MAAO2T,EACP9T,SAlBC,SAAC6C,GAClBkR,EAAQlR,EAAM3C,OAAOC,QAkBLkU,aAAa,KACb7L,QAAQ,WACR8L,cAAed,GARnB,SAUI,eAACe,GAAA,EAAD,CAAUpU,MAAO,KAAjB,SACI,eAAC,KAAD,CAAYqI,QAAQ,QAApB,sBAQZ,sBAAK/I,UAAU,iBAAf,SACI,sBAAKC,IAAK8U,GAAc5U,IAAI,mBAEhC,eAAC,KAAD,uBAGA,sBAAKH,UAAU,sBAAf,SACI,eAAC,IAAD,e,gCCpDdgV,GAAU,CAACC,eAEXC,GAAQ,SAAC,GAAuC,IAArCnC,EAAoC,EAApCA,MAEf,OACE,gBAAC,IAAD,WACGA,EAAMxZ,KAAK,SAAAC,GAAC,OAAI,eAAC,IAAD,CAAO4N,KAAM5N,EAAE4N,KAAmB+N,OAAK,EAACrE,UAAWtX,EAAEsX,WAA3BtX,EAAE4N,SAC7C,eAAC,IAAD,CAAO+N,OAAK,EAAC/N,KAAK,IAAlB,SACI,eAAC,IAAD,CAAUsM,GAAG,sBAKjBtI,GAAQgK,aAAY,CACxB5J,QAAS,CACP6J,QAAS,CACPxJ,KAAM,UACNyJ,aAAc,WAEhB1J,UAAW,CACTC,KAAM,UACNyJ,aAAc,WAEhB7J,WAAY,CACVnW,QAAS,WAEXigB,KAAM,CACJF,QAAS,yBACTzJ,UAAW,yBACXS,SAAU,8BAGdmJ,WAAY,CACVC,WAAY,SACZC,MAAO,CACLC,SAAW,IAEbC,QAAS,CACLpT,MAAO,UACPmT,SAAW,OAOnB,SAASE,KAEP,OACI,gBAACC,GAAA,EAAD,CAAe1K,MAAOA,GAAtB,UACE,eAAC2K,GAAA,EAAD,IACA,sBAAK/V,UAAU,MAAf,SAEE,gBAAC,aAAD,CAAYgW,SAAU,UAA4BC,WAAlD,UAGE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAEC,QAAS,EAA1B,SACE,eAACF,EAAA,EAAD,CAAMhJ,MAAI,EAACmJ,GAAI,EAAf,SAAkB,eAAC,GAAD,QAEpB,gBAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,EAAGF,QAAS,EAArC,UACE,eAACF,EAAA,EAAD,CAAMhJ,MAAI,EAACmJ,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBtD,MAAOlC,OAE1B,eAACqF,EAAA,EAAD,CAAMhJ,MAAI,EAACmJ,GAAI,EAAf,SACE,sBAAKrW,UAAU,iBAAf,SACE,eAAC,GAAD,CAAO+S,MAAOlC,oBAWhC,IAWe0F,GAXS,kBACtB,eAAC,IAAD,CAAoBC,SAAS,wBAA7B,SACE,eAAC,IAAD,CAAgBxB,QAASA,GAASyB,aAAW,EAA7C,SACE,eAAC,IAAD,UACE,eAAC,GAAD,WCtEOC,GAfgB5a,YAAY,CACzCf,KAAM,cACNU,aALqC,GAOrCM,SAAU,GAKVC,cAAe,SAACC,OAMlB,QCVMR,GAAoC,CACxCwV,eAAgB,GAChBG,kBAAkB,EAClBG,YAAanZ,GAAgB3C,UAAUoE,WACvC4X,gBAAkBhZ,GAAoBhD,UAAUoE,WAChDnB,YAAaie,GAAiBpd,KAAI,SAAAC,GAAC,OAAIA,EAAE/D,UAAUoE,eA8BtC+c,GA3BoB9a,YAAY,CAC7Cf,KAAM,iBACNU,gBAEAM,SAAU,GAKVC,cAAe,SAACC,GACdA,EAAQC,QAAQiM,GAAkBhM,WAAW,SAACC,EAAOC,GAEjD,IAAMwa,EAAM,IAAIC,IAAI1a,EAAM6U,gBAC1B5U,EAAOE,QAAQa,SAAQ,SAAA5D,GAAC,OAAIqd,EAAIvS,IAAI9K,EAAEK,eACtCuC,EAAMgV,kBAAmB,EAEzBhV,EAAM6U,eAAN,YAA2B4F,MAG/B5a,EAAQC,QAAQiM,GAAkB4O,UAAU,SAAC3a,EAAOC,GAEhDD,EAAMgV,kBAAmB,QAMjC,QCnCM3V,GAAmC,CACvC0W,aAAc,CACZ,CACEnd,OAAQoD,GAAgB3C,UAAUoE,WAClCwY,MAAO5E,GAAWlU,KAAI,SAAAC,GAAC,OAAIA,EAAE1B,QAAQ+B,iBAoB5Bmd,GAfmBlb,YAAY,CAC5Cf,KAAM,gBACNU,gBAEAM,SAAU,GAKVC,cAAe,SAACC,OAMlB,QCIegb,GA3BiBnb,YAAY,CAC1Cf,KAAM,cACNU,aAPqC,CACrC0V,eAAgB,GAChBE,kBAAkB,GAOlBtV,SAAU,GAKVC,cAAe,SAACC,GACdA,EAAQC,QAAQwG,GAAkBvG,WAAW,SAACC,EAAOC,GAEnD,IAAMwa,EAAM,IAAIC,IAEhBza,EAAOE,QAAQa,SAAQ,SAAA5D,GAAC,OAAIqd,EAAIvS,IAAI9K,EAAEK,eAEtCuC,EAAM+U,eAAN,YAA2B0F,GAC3Bza,EAAMiV,kBAAmB,KAG3BpV,EAAQC,QAAQwG,GAAkBqU,UAAU,SAAC3a,EAAOC,GAClDD,EAAMiV,kBAAmB,QAM/B,QClBe6F,GAfqBpb,YAAY,CAC9Cf,KAAM,kBACNU,aALyC,GAOzCM,SAAU,GAKVC,cAAe,SAACC,OAMlB,QCdakb,GAAQC,YAAe,CAClCC,QAAS,CACPC,YAAaC,GACbvG,eAAgBwG,GAChBtF,cAAeuF,GACfvG,YAAawG,GACbC,gBAAiBC,GACjB/a,cAAegb,GACftF,cAAeuF,MCLClN,QACW,cAA7BjH,OAAOoU,SAASC,UAEe,UAA7BrU,OAAOoU,SAASC,UAEhBrU,OAAOoU,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUjB,MAAOA,GAAjB,SACE,eAAC,GAAD,QAGJ5T,SAAS8U,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3U,MAAK,SAAC4U,GACLA,EAAaC,gBAEdnP,OAAM,SAACmB,GACNxL,QAAQwL,MAAMA,EAAMiO,a,yeE1IflZ,EAAiC,SAAC9K,GAC3C,OAAOC,YAAUC,mBAAmB,CAAC+jB,EAAOC,KAAK,iBAAkBlkB,IAG1DyT,EAAiC,SAACzT,GAC3C,OAAOC,YAAUC,mBAAmB,CAAC+jB,EAAOC,KAAK,iBAAkBlkB,IAI1D6a,EAAkB,uCAAG,WAAOta,GAAP,SAAAC,EAAA,sEACxByF,QAAQC,IAAI,CAACie,EAAwB5jB,GAAUwb,EAAwBxb,KAD/C,2CAAH,sDAIlB4jB,EAAuB,uCAAG,WAAO5jB,GAAP,yBAAAC,EAAA,6DAC7BT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFS,SAGJ8K,EAA+B9K,GAH3B,0CAG5B2K,EAH4B,KAGnB3J,EAHmB,eAK7BT,EAAQU,IAAImjB,uBAAuBpjB,EAAO,CAC9CG,SAAU,CACR6J,oBAAqBL,EACrBvJ,KAAMrB,EACNsB,cAAeC,IAAKC,cAAcvB,aATH,4CAAH,sDAcvBiC,EAAc,uCAAG,WAAO1B,EAAkB8L,EAAejI,EAAqByC,GAA7D,qBAAArG,EAAA,6DACpBR,EAAYO,EAAQP,UADA,SAEC8K,EAA+B9K,GAFhC,0CAEnB2K,EAFmB,mBAIpBpK,EAAQU,IAAIgB,eAAeoK,EAAOjI,EAAayC,EAAM,CACzD1F,SAAU,CACR6J,oBAAqBL,KANC,2CAAH,4DAWdoR,EAAuB,uCAAG,WAAOxb,GAAP,yBAAAC,EAAA,6DAC7BT,EAAgBQ,EAAQK,SAASC,OAAOC,UACxCd,EAAYO,EAAQP,UAFS,SAGJyT,EAA+BzT,GAH3B,0CAG5B2K,EAH4B,KAGnB3J,EAHmB,eAK7BT,EAAQU,IAAIojB,uBAAuBrjB,EAAO,CAC9CG,SAAU,CACRwS,oBAAqBhJ,EACrBvJ,KAAMrB,EACNsB,cAAeC,IAAKC,cAAcvB,aATH,4CAAH,sDAcvB2U,EAAgB,uCAAG,WAAOpU,EAAkBsG,GAAzB,qBAAArG,EAAA,6DACtBR,EAAYO,EAAQP,UADE,SAEDyT,EAA+BzT,GAF9B,0CAErB2K,EAFqB,mBAItBpK,EAAQU,IAAI0T,iBAAiB9N,EAAM,CACvC1F,SAAU,CACRwS,oBAAqBhJ,KANG,2CAAH,yD","file":"static/js/main.2710ad34.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/telegramIcon.ab42dcf7.svg\";","export default __webpack_public_path__ + \"static/media/discordIcon.f11d82c5.svg\";","export default __webpack_public_path__ + \"static/media/gamer_1_square.b2ae303f.png\";","export default __webpack_public_path__ + \"static/media/editPencil.c1f8c78d.svg\";","import { PublicKey } from '@solana/web3.js';\nimport { Program, web3 } from '@project-serum/anchor';\n\n\nexport const findPlayerGlobalAccountAddress = (userPublicKey: PublicKey, programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([userPublicKey.toBuffer()], programId);\n}\n\nexport const findPlayerGameAccountAddress = (userPublicKey: PublicKey, gameId: PublicKey, programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([userPublicKey.toBuffer(), gameId.toBuffer()], programId);\n}\n\nexport const initPlayer = async (program: Program, nickname: string = \"Crypto Warior\", avatar: PublicKey = PublicKey.default): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, nonce] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.initialize(nonce, nickname, avatar, {\n      accounts: {\n        playerAccount: playerAccount,\n        user: userPublicKey,\n        systemProgram: web3.SystemProgram.programId,\n      }\n    });\n}\n\nexport const updatePlayerNickname = async (program: Program, nickname: string): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.updateNickname(nickname, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const updatePlayerAvatar = async (program: Program, avatar: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.updateAvatar(avatar, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const addGameToLibrary = async (program: Program, gameAddress: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.addGame(gameAddress, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const removeGameFromLibrary = async (program: Program, gameAddress: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.removeGame(gameAddress, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const addAchievement = async (program: Program, achievementId: number, expToAdd: number = 0): Promise<void> => {\n  const userPublicKey = program.provider.wallet.publicKey;\n  const programId = program.programId;\n  const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n  await program.rpc.addAchievement(achievementId, expToAdd, {\n    accounts: {\n      playerAccount: playerAccount,\n    }\n  });\n}\n\nexport const addExp = async (program: Program, exp: number): Promise<void> => {\n  const userPublicKey = program.provider.wallet.publicKey;\n  const programId = program.programId;\n  const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n  await program.rpc.addExp(exp, {\n    accounts: {\n      playerAccount: playerAccount,\n    }\n  });\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Provider, Program, Idl, Wallet } from '@project-serum/anchor'\nimport { useAnchorWallet } from '@solana/wallet-adapter-react';\nimport playersIdl from '../idl/players.json'\nimport asylumIdl from '../idl/asylum.json'\n\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const useAnchorProvider = (network: string = \"https://api.devnet.solana.com\", allowWithoutWallet: boolean = false) => {\n    const wallet = useAnchorWallet()\n\n    const connection = new Connection(network, \"processed\")\n\n    if (!wallet)\n    {\n      if (allowWithoutWallet)\n        return new Provider(\n          // @ts-ignore\n          connection, undefined, { preflightCommitment: \"processed\" },\n        )\n      return\n    }\n\n    const provider = new Provider(\n      connection, wallet, { preflightCommitment: \"processed\" },\n    )\n    return provider;\n}\n\nexport const playersProgramID = new PublicKey(playersIdl.metadata.address)\nexport const usePlayersProgram = (network: string = \"https://api.devnet.solana.com\", allowWithoutWallet: boolean = false) => {\n    const provider = useAnchorProvider(network, allowWithoutWallet)\n\n    if (!provider)\n      return\n\n    return new Program(playersIdl as Idl, playersProgramID, provider);\n}\n\nexport const asylumProgramID = new PublicKey(asylumIdl.metadata.address)\nexport const useAsylumProgram = (network: string = \"https://api.devnet.solana.com\", allowWithoutWallet: boolean = false) => {\n    const provider = useAnchorProvider(network, allowWithoutWallet)\n\n    if (!provider)\n      return\n\n    return new Program(asylumIdl as Idl, asylumProgramID, provider);\n}\n","export default __webpack_public_path__ + \"static/media/gameExample.93f60f97.png\";","export default __webpack_public_path__ + \"static/media/wots_wide.8e0cd7a8.png\";","export default __webpack_public_path__ + \"static/media/wotsH.28530004.jpg\";","export default __webpack_public_path__ + \"static/media/wots_wide_logo.5b51dda5.png\";","import { Keypair, PublicKey } from '@solana/web3.js';\nimport gameExample2 from \"./../../assets/game2.png\";\nimport gameExample1 from \"./../../assets/game21.png\";\nimport gameExample from \"./../../assets/gameExample.png\";\nimport gamePlaceholder1 from './../../assets/gamePlaceholder1.png';\nimport gamePlaceholder2 from './../../assets/gamePlaceholder2.png';\nimport gameExample7 from \"./../../assets/Rectangle2.png\";\nimport gameExample4 from \"./../../assets/Rectangle21.png\";\nimport gameExample5 from \"./../../assets/Rectangle22.png\";\nimport gameExample6 from \"./../../assets/Rectangle23.png\";\nimport gameExample3 from \"./../../assets/Rectangle24.png\";\nimport gameExample8 from \"./../../assets/Rectangle25.png\";\nimport gameExample9 from \"./../../assets/Rectangle26.png\";\nimport bannerGame1 from './../../assets/wots_wide.png';\nimport wotsH from './../../assets/wotsH.jpg';\nimport bannerGame2 from './../../assets/AL_gameplay.png';\nimport bannerGame3 from './../../assets/wots_wide_logo.png';\nimport { GameNftData } from \"./gamesNftStore\";\n\nexport const catalogGames = [\n    { img: gameExample, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample1, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample2, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample3, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample4, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample5, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample6, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample7, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample8, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample9, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample1, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample2, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample3, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample4, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample5, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample6, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample7, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample8, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample9, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample1, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample2, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample3, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample4, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample5, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample6, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample7, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample8, publicKey: Keypair.generate().publicKey },\n    // { img: gameExample9, publicKey: Keypair.generate().publicKey },\n]\nexport const friendsPlayGame = { publicKey: Keypair.generate().publicKey, img: wotsH }\nexport const suggestedForYouGame = { publicKey: Keypair.generate().publicKey, img: wotsH }\nexport const bannerGames = [\n    { publicKey: Keypair.generate().publicKey, img: bannerGame1 },\n    { publicKey: Keypair.generate().publicKey, img: bannerGame3 },\n    { publicKey: Keypair.generate().publicKey, img: bannerGame1 },\n]\n\nexport const dummyGames: GameNftData[] = [\n    // ...catalogGames.map((x, i) => {\n    //     return {\n    //         address: x.publicKey,\n    //         title: \"Game dummy\" + i,\n    //         description: \"This is a dummy game description. \".repeat(10),\n    //         cover: x.img,\n    //         launchUrl: \"\",\n    //         images: [x.img, x.img, x.img, x.img, x.img],\n    //         tokenMint: PublicKey.default,\n    //         itemsMint: [PublicKey.default],\n    //         validationLevel: 1,\n    //     }\n    // }),\n    {\n        address: friendsPlayGame.publicKey,\n        title: \"Game dummy\",\n        description: \"This is a dummy game description. \".repeat(10),\n        cover: friendsPlayGame.img,\n        launchUrl: \"\",\n        images: [friendsPlayGame.img, friendsPlayGame.img, friendsPlayGame.img],\n        tokenMint: PublicKey.default,\n        itemsMint: [PublicKey.default],\n        validationLevel: 1,\n    },\n    {\n        address: suggestedForYouGame.publicKey,\n        title: \"Game dummy\",\n        description: \"This is a dummy game description. \".repeat(10),\n        cover: suggestedForYouGame.img,\n        launchUrl: \"\",\n        images: [suggestedForYouGame.img, suggestedForYouGame.img, suggestedForYouGame.img],\n        tokenMint: PublicKey.default,\n        itemsMint: [PublicKey.default],\n        validationLevel: 1,\n    },\n    ...bannerGames.map((x, i) => {\n        return {\n            address: x.publicKey,\n            title: \"Game dummy\",\n            description: \"This is a dummy game description. \".repeat(10),\n            cover: x.img,\n            launchUrl: \"\",\n            images: [x.img, x.img, x.img],\n            tokenMint: PublicKey.default,\n            itemsMint: [PublicKey.default],\n            validationLevel: 1,\n        }\n    })\n];","import { decodeMetadata, getMetadata } from 'oyster-common';\nimport * as anchor from '@project-serum/anchor';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\n\nexport const fetchNft = async (connection: Connection, mint: PublicKey) => {\n    const metaAddress = await getMetadata(mint.toString());\n    const buffer = await connection.getAccountInfo(new PublicKey(metaAddress))\n\n    if (!buffer)\n        throw Error(\"getAccountInfo returns invalid data\")\n\n    const metadata = decodeMetadata(buffer.data)\n\n    const resp = await fetch(metadata.data.uri)\n    const json = await resp.json()\n\n    return {\n        ...metadata,\n        jsonData: json\n    }\n}","import { Program } from \"@project-serum/anchor\"\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { PublicKey, Connection } from '@solana/web3.js'\nimport { decodeMasterEdition, decodeMetadata, getMetadata } from 'oyster-common'\nimport { fetchNft } from '../helpers'\nimport { GameNftData } from \"./gamesNftStore\"\n\nconst fetchGamesNfts = createAsyncThunk('games/fetchNfts', async ({connection, mints}\n    : {connection: Connection, mints: PublicKey[]}) => {\n\n    return Promise.all(mints.map(async (mint) => {\n        try {\n            const data = await fetchNft(connection, mint)\n\n            const gameNft: GameNftData = {\n                address: new PublicKey(data.mint),\n                title: data.data.name,\n                description: data.jsonData.description,\n                cover: data.jsonData.image,\n                launchUrl: data.jsonData.properties.launch_url,\n                images: data.jsonData.properties.images_links,\n                tokenMint: data.jsonData.properties.token_mint_account,\n                itemsMint: data.jsonData.properties.items_mint_accounts,\n                validationLevel: data.jsonData.properties.validation_level,\n            }\n            return {ok: true, mint: mint, game: gameNft}\n        } catch (e) {\n            return {ok: false, mint: mint, game: null}\n        }\n    }))\n})\n\nexport { fetchGamesNfts }","import { StringPublicKey } from 'oyster-common';\nimport { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { PublicKey } from '@solana/web3.js'\nimport { RootState } from '../../app/store';\nimport { dummyGames } from './dummyGames';\nimport { fetchGamesNfts } from './thunks';\n\nexport interface GameNftData {\n  address: PublicKey,\n  title: string,\n  description: string,\n  cover: string,\n  launchUrl: string,\n  images: string[],\n  tokenMint: PublicKey,\n  itemsMint: PublicKey[],\n  validationLevel: number,\n}\n\nexport interface GamesNftStoreState {\n  inProgress: StringPublicKey[],\n  loaded: GameNftData[],\n  failed: StringPublicKey[]\n}\n\nconst initialState: GamesNftStoreState = {\n  inProgress: [],\n  loaded: [...dummyGames],\n  failed: []\n};\n\nexport const gamesNtfStoreSlice = createSlice({\n  name: 'gamesNftStore',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n    builder.addCase(fetchGamesNfts.fulfilled, (state, action) =>\n    {\n        const succeed = action.payload.filter(x => x.ok).map(x => x.game as GameNftData)\n        const failed = action.payload.filter(x => !x.ok).map(x => x.mint.toString())\n\n        state.loaded = state.loaded.concat(succeed)\n        state.failed = state.failed.concat(failed)\n\n        return state\n    })\n  },\n});\n\nconst selectState = (state: RootState) => state.gamesNftStore;\n\nexport const selectNftGames = (rootState: RootState, games: StringPublicKey[]) =>\n{\n  const state = selectState(rootState)\n\n  const gamesInProgress = state.inProgress.filter(x => games.find(a => a === x));\n  const gamesLoaded = state.loaded.filter(x => games.find(a => a === x.address.toString()));\n  const gamesFailed = state.failed.filter(x => games.find(a => a === x));\n\n  const result: Record<string, GameState> = {};\n\n  gamesInProgress.forEach(x => result[x.toString()] = { status: 'inProgress' })\n  gamesLoaded.forEach(x => result[x.address.toString()] = { status: 'loaded', game: x })\n  gamesFailed.forEach(x => result[x.toString()] = { status: 'failed' })\n\n\n  return result;\n}\n\nexport interface GameState {\n  status: GameLoadingStatus,\n  game?: GameNftData\n}\n\nexport type GameLoadingStatus = 'inProgress' | 'loaded' | 'failed'\n\nexport default gamesNtfStoreSlice.reducer;\n","import './style.scss'\nimport avatarPlaceholder from './../../assets/gamer_1_square.png';\nimport editPencil from './../../assets/editPencil.svg';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport CheckIcon from '@mui/icons-material/Check';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { asylum, players } from './../../lib'\nimport { useAsylumProgram, usePlayersProgram } from \"../../app/hooks\";\nimport { useEffect, useState } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { selectNftGames } from '../../nft-store/games/gamesNftStore';\nimport { fetchGamesLibraryAndLoadNfts } from '../../pages/Library/store/thunks';\nimport { fetchGamesNfts } from '../../nft-store/games/thunks';\nimport { PublicKey } from \"@solana/web3.js\"\nimport { initPlayer } from '../../lib/players';\n\ntype ActionStatus = \"INIT\" | \"PENDING\" | \"FINISHED\" | \"FAILED\";\n\nconst ProfilePanel = () => {\n    const wallet = useWallet()\n\n    const player = usePlayersProgram()\n    const asylumProgram = useAsylumProgram()\n    const dispatch = useDispatch();\n    const [isInitialized, setIsInitialized] = useState(false)\n    const [playerDataLoadingSatus, setPlayerDataLoadingSatus] = useState<ActionStatus>(\"INIT\")\n    const [playerAccountInitSatus, setPlayerAccountInitSatus] = useState<ActionStatus>(\"INIT\")\n    const [achievementsLoadingSatus, setAchievementsLoadingSatus] = useState<ActionStatus>(\"INIT\")\n\n    const [nickname, setNickname] = useState('')\n    const [inputNickname, setInputNickname] = useState('')\n    const [nicknameChangingModeOn, setnicknameChangingModeOn] = useState(false)\n\n    const [playerAchievements, setPlayerAchievements] = useState([] as number[]);\n    const [catalogPlayerAchievements, setCatalogPlayerAchievements] = useState([] as any[]);\n\n    const [level, setLevel] = useState(0)\n\n    const gamesData = useSelector((state: RootState) => selectNftGames(state,\n        playerAchievements\n            .map(x => catalogPlayerAchievements.find(data => data.id === x)?.game?.toString())))\n\n    useEffect(() => {\n        if (playerDataLoadingSatus === \"INIT\")\n            fetchPlayerData();\n\n    }, [player, playerDataLoadingSatus])\n\n    useEffect(() => {\n        if (playerAccountInitSatus === \"INIT\" && playerDataLoadingSatus === \"FAILED\")\n            initializePlayer();\n\n    }, [player, playerAccountInitSatus, playerDataLoadingSatus])\n\n    useEffect(()=>{\n        if (achievementsLoadingSatus === \"INIT\")\n            fetchAchievementsData()\n    }, [player])\n\n    useEffect(() => {\n        setInputNickname(nickname);\n    }, [nicknameChangingModeOn, nickname])\n\n    async function initializePlayer() {\n        if (!player)\n            return\n    \n        try {\n          setPlayerAccountInitSatus(\"PENDING\")\n          await players.initPlayer(player)\n          setIsInitialized(true)\n          setPlayerAccountInitSatus(\"FINISHED\")\n        } catch (err) {\n          setPlayerAccountInitSatus(\"FAILED\")\n          console.log(\"Transaction error: \", err)\n        }\n    \n        fetchPlayerData()\n      }\n\n\n    async function fetchPlayerData() {\n        if (!player)\n            return\n\n        try {\n            setPlayerDataLoadingSatus(\"PENDING\")\n            const [playerAccountAddress, _] = await players.findPlayerGlobalAccountAddress(player?.provider.wallet.publicKey, player?.programId)\n            const account = await player.account.playerAccount.fetch(playerAccountAddress)\n\n            console.log(account)\n            setIsInitialized(true)\n            setNickname(account.nickname.toString())\n            setPlayerDataLoadingSatus(\"FINISHED\")\n            setnicknameChangingModeOn(false)\n\n            setPlayerAchievements(account.achievements);\n            setLevel(account.level)\n            \n        } catch (err) {\n            setPlayerDataLoadingSatus(\"FAILED\")\n            console.log(\"Player data fetching error: \", err)\n        }\n    }\n\n    async function fetchAchievementsData() {\n        if (!asylumProgram)\n            return\n\n        try {\n            setAchievementsLoadingSatus(\"PENDING\")\n            const [achievementsAccountAddress, _] = await asylum.findAchievementsAccountAddress(asylumProgram?.programId)\n            const account = await asylumProgram.account.achievementsAccount.fetch(achievementsAccountAddress)\n\n            console.log(account)\n            const a = account.achievements\n            // setIsInitialized(true)\n            // setNickname(account.nickname.toString())\n            setAchievementsLoadingSatus(\"FINISHED\")\n            // setnicknameChangingModeOn(false)\n\n            setCatalogPlayerAchievements(account.achievements);\n\n\n            await dispatch(fetchGamesNfts({\n                connection: asylumProgram.provider.connection,\n                mints: account.achievements.map((x: any) => new PublicKey(x.game))\n            }))\n            // setLevel(account.level)\n            \n        } catch (err) {\n            setAchievementsLoadingSatus(\"FAILED\")\n            console.log(\"Player data fetching error: \", err)\n        }\n    }\n\n    async function updateNickname() {\n\n        if (!player)\n            return\n        try {\n            await players.updatePlayerNickname(player, inputNickname)\n        } catch (err) {\n            console.log(\"Transaction error: \", err)\n        }\n\n        fetchPlayerData()\n    }\n\n    async function declineNicknameChanges() {\n        setnicknameChangingModeOn(false);\n        setInputNickname('');\n    }\n\n    const achievements = [\n        {\n            label: \"AnywayLose | \\\"Interstellar\\\" | +30exp\"\n        },\n        {\n            label: \"AnywayLose | \\\"First kill\\\"   | +5exp\"\n        },\n        {\n            label: \"Some Game  | \\\"Most wanted\\\"  | +60exp\"\n        }\n    ]\n\n\n    return (<>\n        {wallet.connected && <div className=\"profileContainer\">\n            <div className=\"accountInfo\">\n                <img className=\"profileIcon\" src={avatarPlaceholder} alt=\"profile icon\" />\n\n                <div className={`nicknameChangingBox ${nicknameChangingModeOn ? '' : 'notVisible'}`}>\n                    <input\n                        style={{ width: 110 }}\n                        placeholder=\"New nickname (string, 32 bytes)\"\n                        onChange={e => setInputNickname(e.target.value)}\n                        value={inputNickname}\n                    />\n\n                    <CheckIcon className='actionIcon' onClick={updateNickname} />\n                    <ClearIcon className='actionIcon' onClick={declineNicknameChanges} />\n                </div>\n\n\n                <div className={nicknameChangingModeOn ? 'notVisible' : ''}>\n                    <Typography className=\"userName\">\n                        {nickname}\n                        <img onClick={() => {\n                            setnicknameChangingModeOn(true)\n                        }\n                        } className=\"editIcon\" src={editPencil} alt=\"edit\" />\n                    </Typography>\n                    <Typography>Level {level}</Typography>\n                </div>\n\n            </div>\n\n            <div className=\"achievmentsContainer\">\n                <Typography>Last achievements:</Typography>\n                <ul>\n                    {playerAchievements\n                        .filter(ach => catalogPlayerAchievements.find((x:any) => x.id === ach))\n                        .map((ach, i) => {\n                        const achievementData = catalogPlayerAchievements.find((x:any) => x.id == ach) as any | undefined\n\n                        return (<>\n                            \n                            {!!achievementData && i < 3 && (<li key={i}><Typography>{`${achievementData.label} - ${achievementData.description} | Game: ${gamesData[achievementData.game.toString()]?.game?.title}`}</Typography></li>)}\n                            </>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div>}\n    </>)\n}\n\nexport default ProfilePanel;","import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport './style.scss'\n\ninterface Game {\n  title: string;\n}\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function SearchBar() {\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState<readonly Game[]>([]);\n  const loading = open && options.length === 0;\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      //await sleep(1e3); // For demo purposes.\n\n      if (active) {\n        setOptions([...topFilms]);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      id=\"searchbar-asylum\"\n      sx={{ width: '100%' }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      getOptionLabel={(option) => option.title}\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n\n// Top films as rated by IMDb users. http://www.imdb.com/chart/top\nconst topFilms = [\n  { title: 'Coming soon...' }\n \n];\n","import { Program } from \"@project-serum/anchor\"\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { players } from '../../../lib'\nimport { PublicKey } from '@solana/web3.js'\nimport { fetchGamesNfts } from \"../../../nft-store/games/thunks\"\n\nconst fetchGamesLibrary = createAsyncThunk('games/fetchLibrary', async ({player, program}\n    : {player: PublicKey ,program: Program}) => {\n    const [playerAccountAddress, _] = await players.findPlayerGlobalAccountAddress(player, program.programId)\n    const account = await program.account.playerAccount.fetch(playerAccountAddress)\n    console.log(\"player games \", account.games)\n\n    return account.games as PublicKey[]\n})\n\nconst fetchGamesLibraryAndLoadNfts = createAsyncThunk('games/fetchCatalogAndLoadNfts', async ({player, program}\n    : {player: PublicKey ,program: Program},\n    { dispatch }) => {\n    const a = await dispatch(fetchGamesLibrary({player, program}))\n\n    if (a.payload)\n        await dispatch(fetchGamesNfts({connection: program.provider.connection, mints: a.payload as PublicKey[]}))\n})\n\nexport { fetchGamesLibrary, fetchGamesLibraryAndLoadNfts }","export default __webpack_public_path__ + \"static/media/redDeadImage1.16bf1f2f.png\";","export default __webpack_public_path__ + \"static/media/redDeadImage2.9e6965e2.png\";","export default __webpack_public_path__ + \"static/media/redDeadImage3.a590134f.png\";","export default __webpack_public_path__ + \"static/media/redDeadImage4.4ab2b0e4.png\";","import './style.scss';\nimport { Typography } from '@mui/material';\n\nimport redDeadCover from './../../assets/redDeadCover.png';\nimport redDeadImage1 from './../../assets/redDeadImage1.png';\nimport redDeadImage2 from './../../assets/redDeadImage2.png';\nimport redDeadImage3 from './../../assets/redDeadImage3.png';\nimport redDeadImage4 from './../../assets/redDeadImage4.png';\nimport { useEffect, useRef } from 'react';\nimport { GameNftData } from '../../nft-store/games/gamesNftStore';\nimport { usePlayersProgram } from '../../app/hooks';\nimport { StringPublicKey } from 'oyster-common';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useDispatch } from 'react-redux';\nimport { players } from '../../lib';\nimport { fetchGamesLibrary } from '../../pages/Library/store/thunks';\nimport { PublicKey } from '@solana/web3.js'\n\nconst gameImages = [redDeadImage1, redDeadImage2, redDeadImage3, redDeadImage4];\n\n\n\nconst SingleGameInfo = ({visibility, game, handleClose, isAdded}: {visibility: boolean, game: GameNftData | undefined, handleClose: () => void, isAdded: boolean}) => {\n    const wrapperRef = useRef<any>();\n\n    const playersProgram = usePlayersProgram();\n    const dispatch = useDispatch();\n    const wallet = useWallet()\n\n\n    const onAdd = () => {\n        if (playersProgram && game)\n            players.addGameToLibrary(playersProgram, game.address)\n            .then(() => dispatch(fetchGamesLibrary({player: wallet.publicKey as PublicKey, program: playersProgram})))\n    }\n\n    const onLaunch = () => {\n        if (game)\n            window?.open(game.launchUrl, '_blank')?.focus()\n    }\n    \n    const handleClickOutside = (event: MouseEvent) => {\n            if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n                document.removeEventListener(\"mousedown\", handleClickOutside);\n                handleClose();\n            }\n    }\n\n    useEffect(() => {\n        if (visibility === true) {\n            document.addEventListener(\"mousedown\", handleClickOutside)\n        }\n    }, [visibility])\n    \n\n\n    return (\n        <div className={`SingleGameInfo ${visibility ? '' : 'notVisible'}`}>\n            <div ref={wrapperRef} className='gameInfoContainer'>\n                <div className='firstRow'>\n                    <img className='gameCover' src={game?.cover} alt='game cover'/>\n                    <div className='generalInfo'>\n                        <div className='info-row'>\n                            <Typography className=\"title\">{ game?.title}</Typography>\n                            <Typography className=\"descLabel\">Description</Typography>\n                            <Typography className=\"description\">{ game?.description}</Typography>\n                        </div>\n                        <div className='act-row'>\n                            <div className='decor'></div>\n                            <div onClick={isAdded ? onLaunch : onAdd}>\n                                <Typography className='addToBasket'>{isAdded ? \"Launch\" : \"Add to library\"}</Typography>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className='gameImages'>\n                    {\n                        game?.images.map((image, i) => \n                            <img className=\"gameIllustration\" src={image} key={i} alt='illustration'/>\n                        )\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SingleGameInfo;","import {\n  createAssociatedTokenAccountInstruction,\n  createMint,\n  createMetadata,\n  programIds,\n  ENV,\n  updateMetadata,\n  createMasterEdition,\n  sendTransactionWithRetry,\n  Data,\n  Creator,\n  findProgramAddress,\n  StringPublicKey,\n  toPublicKey,\n  WalletSigner,\n  Attribute,\n} from 'oyster-common';\nimport React, { Dispatch, SetStateAction } from 'react';\nimport { MintLayout, Token } from '@solana/spl-token';\nimport {\n  Keypair,\n  Connection,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\n\nimport { create } from 'ipfs-http-client';\n\nconst RESERVED_TXN_MANIFEST = 'manifest.json';\nconst RESERVED_METADATA = 'metadata.json';\n\nconst uploadToIPFS = async (file: { path: string, content: File}) => {\n  console.log(\"uploading to IPFS\", file)\n\n  const client = await create({\n    host: \"ipfs.infura.io\",\n    port: 5001,\n    protocol: \"https\"\n  })\n\n  const added = await client.add(file)\n\n  return added;\n};\n\nexport const mintNFT = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  env: ENV,\n  files: File[],\n  metadata: {\n    name: string;\n    symbol: string;\n    description: string;\n    image: string | undefined;\n    animation_url: string | undefined;\n    attributes: Attribute[] | undefined;\n    external_url: string;\n    properties: any;\n    creators: Creator[] | null;\n    sellerFeeBasisPoints: number;\n  },\n  progressCallback: Dispatch<SetStateAction<number>>,\n  maxSupply?: number,\n): Promise<{\n  metadataAccount: StringPublicKey;\n  mintAccount: StringPublicKey;\n}> => {\n  if (!wallet.publicKey) throw new Error(\"Wallet should have a public key.\");\n\n  const metadataContent = {\n    name: metadata.name,\n    symbol: metadata.symbol,\n    description: metadata.description,\n    seller_fee_basis_points: metadata.sellerFeeBasisPoints,\n    image: metadata.image,\n    animation_url: metadata.animation_url,\n    attributes: metadata.attributes,\n    external_url: metadata.external_url,\n    properties: {\n      ...metadata.properties,\n      creators: metadata.creators?.map(creator => {\n        return {\n          address: creator.address,\n          share: creator.share,\n        };\n      }),\n    },\n  };\n\n  const realFiles: File[] = [\n    ...files,\n    new File([JSON.stringify(metadataContent)], RESERVED_METADATA),\n  ];\n\n  console.log(\"js meta\", JSON.stringify(metadataContent))\n\n  // const { instructions: pushInstructions, signers: pushSigners } =\n  //   await prepPayForFilesTxn(wallet, realFiles, metadata);\n\n  progressCallback(10)\n\n  const TOKEN_PROGRAM_ID = programIds().token;\n\n  // Allocate memory for the account\n  const mintRent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span,\n  );\n  // const accountRent = await connection.getMinimumBalanceForRentExemption(\n  //   AccountLayout.span,\n  // );\n\n  // This owner is a temporary signer and owner of metadata we use to circumvent requesting signing\n  // twice post Arweave. We store in an account (payer) and use it post-Arweave to update MD with new link\n  // then give control back to the user.\n  // const payer = new Account();\n  const payerPublicKey = wallet.publicKey.toBase58();\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n\n  // This is only temporarily owned by wallet...transferred to program by createMasterEdition below\n  const mintKey = createMint(\n    instructions,\n    wallet.publicKey,\n    mintRent,\n    0,\n    // Some weird bug with phantom where it's public key doesnt mesh with data encode wellff\n    toPublicKey(payerPublicKey),\n    toPublicKey(payerPublicKey),\n    signers,\n  ).toBase58();\n\n  const recipientKey = (\n    await findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        programIds().token.toBuffer(),\n        toPublicKey(mintKey).toBuffer(),\n      ],\n      programIds().associatedToken,\n    )\n  )[0];\n\n  createAssociatedTokenAccountInstruction(\n    instructions,\n    toPublicKey(recipientKey),\n    wallet.publicKey,\n    wallet.publicKey,\n    toPublicKey(mintKey),\n  );\n\n  const metadataAccount = await createMetadata(\n    new Data({\n      symbol: metadata.symbol,\n      name: metadata.name,\n      uri: ' '.repeat(64), // size of url for arweave\n      sellerFeeBasisPoints: metadata.sellerFeeBasisPoints,\n      creators: metadata.creators,\n    }),\n    payerPublicKey,\n    mintKey,\n    payerPublicKey,\n    instructions,\n    wallet.publicKey.toBase58(),\n  );\n  progressCallback(20)\n\n  // TODO: enable when using payer account to avoid 2nd popup\n  // const block = await connection.getRecentBlockhash('singleGossip');\n  // instructions.push(\n  //   SystemProgram.transfer({\n  //     fromPubkey: wallet.publicKey,\n  //     toPubkey: payerPublicKey,\n  //     lamports: 0.5 * LAMPORTS_PER_SOL // block.feeCalculator.lamportsPerSignature * 3 + mintRent, // TODO\n  //   }),\n  // );\n\n\n  const { txid } = await sendTransactionWithRetry(\n    connection,\n    wallet,\n    instructions,\n    signers,\n    'single',\n  );\n  progressCallback(30)\n\n  try {\n    await connection.confirmTransaction(txid, 'max');\n    progressCallback(40)\n  } catch {\n    // ignore\n  }\n\n  // Force wait for max confirmations\n  // await connection.confirmTransaction(txid, 'max');\n  await connection.getParsedConfirmedTransaction(txid, 'confirmed');\n\n  progressCallback(50)\n\n  // this means we're done getting AR txn setup. Ship it off to IPFS!\n  console.log(\"Uploading data to ipfs\", realFiles)\n\n  const result = await Promise.all(realFiles.map(f =>\n    {\n      return uploadToIPFS({ path: f.name, content: f});\n    }));\n  progressCallback(60)\n\n  const metadataFile = result?.find(\n    m => m.path === RESERVED_METADATA,\n  );\n  if (metadataFile?.cid && wallet.publicKey) {\n    const updateInstructions: TransactionInstruction[] = [];\n    const updateSigners: Keypair[] = [];\n\n    const ipfsLink = `https://ipfs.infura.io/ipfs/${metadataFile.cid}`;\n    console.log(\"calling updateMetadata with link: \", ipfsLink)\n    await updateMetadata(\n      new Data({\n        name: metadata.name,\n        symbol: metadata.symbol,\n        uri: ipfsLink,\n        creators: metadata.creators,\n        sellerFeeBasisPoints: metadata.sellerFeeBasisPoints,\n      }),\n      undefined,\n      undefined,\n      mintKey,\n      payerPublicKey,\n      updateInstructions,\n      metadataAccount,\n    );\n\n    updateInstructions.push(\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        toPublicKey(mintKey),\n        toPublicKey(recipientKey),\n        toPublicKey(payerPublicKey),\n        [],\n        1,\n      ),\n    );\n\n    progressCallback(70)\n    // // In this instruction, mint authority will be removed from the main mint, while\n    // // minting authority will be maintained for the Printing mint (which we want.)\n    await createMasterEdition(\n      maxSupply !== undefined ? new BN(maxSupply) : undefined,\n      mintKey,\n      payerPublicKey,\n      payerPublicKey,\n      payerPublicKey,\n      updateInstructions,\n    );\n\n    // TODO: enable when using p  ayer account to avoid 2nd popup\n    /*  if (maxSupply !== undefined)\n      updateInstructions.push(\n        setAuthority({\n          target: authTokenAccount,\n          currentAuthority: payerPublicKey,\n          newAuthority: wallet.publicKey,\n          authorityType: 'AccountOwner',\n        }),\n      );\n*/\n    // TODO: enable when using payer account to avoid 2nd popup\n    // Note with refactoring this needs to switch to the updateMetadataAccount command\n    // await transferUpdateAuthority(\n    //   metadataAccount,\n    //   payerPublicKey,\n    //   wallet.publicKey,\n    //   updateInstructions,\n    // );\n\n    progressCallback(80)\n\n    const txid = await sendTransactionWithRetry(\n      connection,\n      wallet,\n      updateInstructions,\n      updateSigners,\n    );\n\n    // notify({\n    //   message: 'Art created on Solana',\n    //   description: (\n    //     <a href={ipfsLink} target=\"_blank\" rel=\"noopener noreferrer\">\n    //       IPFS Link\n    //     </a>\n    //   ),\n    //   type: 'success',\n    // });\n\n    // TODO: refund funds\n\n    // send transfer back to user\n  }\n  // TODO:\n  // 1. Jordan: --- upload file and metadata to storage API\n  // 2. pay for storage by hashing files and attaching memo for each file\n\n  console.log(\"metadataAccount\", metadataAccount)\n  console.log(\"mintKey\", mintKey)\n\n  return { metadataAccount: metadataAccount, mintAccount: mintKey };\n};\n","import { Program } from \"@project-serum/anchor\"\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { asylum } from '../../../lib'\nimport { PublicKey } from '@solana/web3.js'\nimport { fetchGamesNfts } from \"../../../nft-store/games/thunks\"\n\nconst fetchGamesCatalog = createAsyncThunk('games/fetchCatalog', async (program: Program) => {\n\n    const [gamessAccountAddress, _] = await asylum.findGamesCatalogAccountAddress(program.programId)\n    const account = await program.account.gamesCatalogAccount.fetch(gamessAccountAddress)\n\n    return account.games as PublicKey[]\n})\n\nconst fetchGamesCatalogAndLoadNfts = createAsyncThunk('games/fetchCatalogAndLoadNfts', async (program: Program, { dispatch }) => {\n    const a = await dispatch(fetchGamesCatalog(program))\n\n    if (a.payload)\n        await dispatch(fetchGamesNfts({connection: program.provider.connection, mints: a.payload as PublicKey[]}))\n})\n\nexport { fetchGamesCatalog, fetchGamesCatalogAndLoadNfts }","import { useFormik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './style.scss';\nimport { Typography } from '@material-ui/core';\nimport { Connection, PublicKey, Keypair } from '@solana/web3.js'\nimport { useAnchorWallet, useWallet } from '@solana/wallet-adapter-react';\nimport { useAnchorProvider, useAsylumProgram } from '../../app/hooks';\nimport { mintNFT } from '../../lib/metaplex/packages/web/src/actions/nft'\nimport { useEffect, useState } from 'react';\nimport { addGameToCatalog } from '../../lib/asylum';\nimport LinearProgress, { LinearProgressProps } from '@mui/material/LinearProgress';\nimport Box from '@mui/material/Box';\nimport { useDispatch } from 'react-redux';\nimport { fetchGamesCatalogAndLoadNfts } from '../../pages/GamesStore/store/thunks';\n\nfunction LinearProgressWithLabel(props: LinearProgressProps & { value: number }) {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n      <Box sx={{ width: '100%', mr: 1 }}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box sx={{ minWidth: 35 }}>\n        <Typography variant=\"body2\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nconst DevPanelForm = () => {\n  const provider = useAnchorProvider()\n  const wallet = useAnchorWallet()\n  const asylumProgram = useAsylumProgram()\n  const [NFTcreationProgress, setNFTcreationProgress] = useState(0)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(\"NFTcreationProgress\", NFTcreationProgress)\n  }, [NFTcreationProgress])\n\n  async function addGame({\n    title,\n    description,\n    cover,\n    launch_url,\n    images_links,\n    token_mint_account,\n    items_mint_accounts,\n  } : {\n    title: string,\n    description: string,\n    cover: string,\n    launch_url: string,\n    images_links: string[],\n    token_mint_account?: PublicKey,\n    items_mint_accounts?: PublicKey[],\n  }) {\n    if (!provider || !wallet || !asylumProgram)\n      return;\n\n    console.log(\"mintNFT\")\n\n    return mintNFT(provider.connection, wallet, \"devnet\", [], {\n      name: title,\n      symbol: \"XXX\", //?\n      description: description,\n      image: cover,\n      animation_url: undefined,\n      attributes: undefined,\n      external_url: \"\",\n      properties: {\n        images_links,\n        token_mint_account,\n        items_mint_accounts,\n        launch_url,\n        validation_level: 0,\n      },\n      creators: null,\n      sellerFeeBasisPoints: 0\n    },\n      setNFTcreationProgress)\n    .then(async (x) => {\n      await addGameToCatalog(asylumProgram, new PublicKey(x.mintAccount))\n      dispatch(fetchGamesCatalogAndLoadNfts(asylumProgram))\n    })\n    .catch((e: any) => console.log(e))\n    .finally(() => setNFTcreationProgress(100))\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      game_title: 'GameTitle',\n      game_cover: 'https://upload.wikimedia.org/wikipedia/ru/archive/1/16/20210909030507%21%D0%9E%D0%B1%D0%BB%D0%BE%D0%B6%D0%BA%D0%B0_%D0%B8%D0%B3%D1%80%D1%8B_Control.jpg',\n      game_launch_url: 'https://upload.wikimedia.org/wikipedia/ru/archive/1/16/20210909030507%21%D0%9E%D0%B1%D0%BB%D0%BE%D0%B6%D0%BA%D0%B0_%D0%B8%D0%B3%D1%80%D1%8B_Control.jpg',\n      game_description: 'Some game description',\n      game_images_links: 'https://upload.wikimedia.org/wikipedia/ru/archive/1/16/20210909030507%21%D0%9E%D0%B1%D0%BB%D0%BE%D0%B6%D0%BA%D0%B0_%D0%B8%D0%B3%D1%80%D1%8B_Control.jpg, https://upload.wikimedia.org/wikipedia/ru/archive/1/16/20210909030507%21%D0%9E%D0%B1%D0%BB%D0%BE%D0%B6%D0%BA%D0%B0_%D0%B8%D0%B3%D1%80%D1%8B_Control.jpg',\n      game_token_mint_account: '',\n      game_items_mint_accounts: '',\n    },\n    onSubmit: (values) => {\n      addGame({\n        title: values.game_title,\n        cover: values.game_cover,\n        launch_url: values.game_launch_url,\n        description: values.game_description,\n        images_links: values.game_images_links.split(','),\n        token_mint_account: values.game_token_mint_account ? new PublicKey(values.game_token_mint_account) : undefined,\n        items_mint_accounts: values.game_items_mint_accounts ? values.game_items_mint_accounts.split(',').map(x => new PublicKey(x)) : undefined,\n      })\n    },\n  });\n\n  if (NFTcreationProgress > 0)\n  {\n    return (\n    <div className='devPanelForm'>\n      <Typography variant=\"h5\" style={{paddingBottom: \"20px\"}}>\n        {NFTcreationProgress < 100 ? \"NFT minting in progress...\" : \"Done!\"}\n      </Typography>\n      <LinearProgressWithLabel value={NFTcreationProgress} />\n    </div>)\n  }\n\n  return (\n    <div className='devPanelForm'>\n      <Typography variant=\"h4\">\n        New game\n      </Typography>\n      <form onSubmit={formik.handleSubmit}>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_title\"\n            name=\"game_title\"\n            label=\"Game title\"\n            placeholder='game title'\n            value={formik.values.game_title}\n            onChange={formik.handleChange}\n            error={formik.touched.game_title && Boolean(formik.errors.game_title)}\n          />\n        </div>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_cover\"\n            name=\"game_cover\"\n            label=\"Game cover\"\n            value={formik.values.game_cover}\n            placeholder={`link to your game's image`}\n            onChange={formik.handleChange}\n            error={formik.touched.game_cover && Boolean(formik.errors.game_cover)}\n            helperText='Link to an image (will be used as NFT image)'\n          />\n        </div>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_launch_url\"\n            name=\"game_launch_url\"\n            label=\"Game launch url\"\n            value={formik.values.game_launch_url}\n            placeholder={`link to your game`}\n            onChange={formik.handleChange}\n            error={formik.touched.game_launch_url && Boolean(formik.errors.game_launch_url)}\n            helperText='Link to your game'\n          />\n        </div>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_description\"\n            name=\"game_description\"\n            label=\"Game description\"\n            value={formik.values.game_description}\n            onChange={formik.handleChange}\n            error={formik.touched.game_cover && Boolean(formik.errors.game_description)}\n            helperText='link to text description (will be used as NFT description)'\n          />\n        </div>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_images_links\"\n            name=\"game_images_links\"\n            label=\"Game images links\"\n            value={formik.values.game_images_links}\n            placeholder='Links'\n            onChange={formik.handleChange}\n            helperText={`Links list separated by comma. Could be screenshots, arts, or any other images`}\n            error={formik.touched.game_cover && Boolean(formik.errors.game_images_links)}\n          />\n        </div>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_token_mint_account\"\n            name=\"game_token_mint_account\"\n            label=\"Game token mint account\"\n            value={formik.values.game_token_mint_account}\n            onChange={formik.handleChange}\n            error={formik.touched.game_cover && Boolean(formik.errors.game_token_mint_account)}\n            helperText={`[Optional] In-game token mint address. Will be used to display user's in-game balance`}\n          />\n        </div>\n        <div className='devPanelInputField' >\n          <TextField\n            fullWidth\n            className='devPanelTextField'\n            id=\"game_items_mint_accounts\"\n            name=\"game_items_mint_accounts\"\n            label=\"Game items mint accounts\"\n            value={formik.values.game_items_mint_accounts}\n            onChange={formik.handleChange}\n            helperText={`[Optional] List of mint address for in-game items, separeted by comma`}\n            error={formik.touched.game_cover && Boolean(formik.errors.game_items_mint_accounts)}\n          />\n        </div>\n\n\n        <Button color=\"default\" variant=\"contained\" type=\"submit\">\n          Submit\n        </Button>\n      </form>\n    </div>\n  )\n}\n\n\nexport default DevPanelForm;","import DevPanelForm from \"./DevPanelForm\";\nimport Popover from '@mui/material/Popover';\nimport { useTheme } from \"@material-ui/core\";\n\nconst DevPanelPopover = (\n  { isOpen, anchorEl, handleClose }:\n  {\n    isOpen: boolean,\n    anchorEl: Element | null,\n    handleClose: () => void\n  }) => {\n  const theme = useTheme();\n\n\n  return (\n    <Popover\n      id='popover-dev -panel'\n      open={isOpen}\n      anchorEl={anchorEl}\n      onClose={handleClose}\n    >\n      <div style={{width: '50%', backgroundColor: theme.palette.background.default, border: \"1px solid\", borderColor: theme.palette.secondary.main, position: 'fixed', top: '5%', left: '30%' }}>\n        <DevPanelForm />\n      </div>\n    </Popover>)\n}\n\n\nexport default DevPanelPopover;","import DevPanelButton from \"./DevPanelButton\";\n\nexport default DevPanelButton;","import DevPanelPopover from \"./DevPanelPopover\";\nimport Button from '@mui/material/Button';\nimport * as React from 'react';\n\nconst DevPanelButton = () => {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n    <Button variant=\"contained\" onClick={handleClick}>\n      Add new game\n    </Button>\n    <DevPanelPopover isOpen={!!anchorEl} anchorEl={anchorEl} handleClose={handleClose}/>\n    </>);\n}\n\nexport default DevPanelButton;","import './style.scss';\nimport { Typography } from '@mui/material';\n\n\nconst GameTile = ({ image, isAdded = false, disabled = false, loading = false, loadingFailed = false, onAdd = undefined, onLaunch = undefined, onClick }:\n    {\n        image?: string,\n        isAdded?: boolean,\n        disabled?: boolean,\n        loading?: boolean,\n        loadingFailed?: boolean,\n        onAdd?: () => void,\n        onLaunch?: () => void,\n        onClick?: () => void\n    }) => {\n\n    return (\n        <div onClick={disabled ? undefined : onClick} className='gameItemWrapper'>\n            <div className=\"game\" style={{ background: `url(${image})` }}>\n                {isAdded\n                    ?\n                    <div className={\"tileButton launchButton \" + (disabled ? \"disabled\" : \"active\") } onClick={disabled ? undefined : onLaunch}>\n                        <Typography variant=\"caption\">Launch</Typography>\n                    </div>\n                    :\n                    <div className={\"tileButton addButton \" + (disabled ? \"disabled\" : \"active\")} onClick={disabled ? undefined : onAdd}>\n                        <Typography variant=\"caption\" onClick={disabled ? onAdd : undefined}>Add</Typography>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default GameTile;","import './style.scss'\nimport { Carousel } from \"react-responsive-carousel\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport SearchBar from '../../components/SearchBar';\n\nimport GameTile from '../../components/GameTile';\nimport SingleGameInfo from '../../components/SingleGameInfo';\n\nimport { useState } from 'react';\n\nimport DevPanelButton from '../../components/DevPanelForm';\n\n\n\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { PublicKey } from '@solana/web3.js'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GameState, selectNftGames } from '../../nft-store/games/gamesNftStore';\nimport { RootState } from '../../app/store';\nimport { useEffect } from 'react';\nimport { fetchGamesCatalog, fetchGamesCatalogAndLoadNfts } from './store/thunks';\nimport { useAsylumProgram, usePlayersProgram } from '../../app/hooks';\nimport { asylum, players } from '../../lib';\nimport { fetchGamesLibrary, fetchGamesLibraryAndLoadNfts } from '../Library/store/thunks';\nimport { StringPublicKey } from 'oyster-common';\n\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { pink } from '@mui/material/colors';\nimport { Typography } from '@mui/material'\n\n\n\nconst GamesCatalog = ({ gamesInCatalogIds, gamesInLibraryIds, isDisabled, gamesData, setSelected}:\n    {\n        gamesInCatalogIds: StringPublicKey[],\n        gamesInLibraryIds:  StringPublicKey[],\n        isDisabled: boolean,\n        gamesData: Record<string, GameState>,\n        setSelected: (x: string) => void\n    }) => {\n    const playersProgram = usePlayersProgram();\n    const dispatch = useDispatch();\n    const wallet = useWallet()\n\n    const [showUnverified, setShowUnverified] = useState(false);\n\n    const handleChangeShowUnverified = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setShowUnverified(event.target.checked);\n    };\n\n\n    const onGameAdd = (game: StringPublicKey) => {\n        if (playersProgram)\n            players.addGameToLibrary(playersProgram, new PublicKey(game))\n            .then(() => dispatch(fetchGamesLibrary({player: wallet.publicKey as PublicKey, program: playersProgram})))\n    }\n\n    isDisabled = isDisabled && !!!playersProgram\n\n    // var searchQuery = \"\";\n\n    return (\n        <div>\n            <div>\n                <Checkbox\n                  title=\"Show unverified games\"\n                  checked={showUnverified}\n                  onChange={handleChangeShowUnverified}\n                  sx={{\n                      color: '#ffffff',\n                      '&.Mui-checked': {\n                        color:  '#ffffff',\n                      },\n                    }}/>Show unverified\n            </div>\n            <div className=\"gamesList\">\n                {gamesInCatalogIds.map((item, i) => {\n                    const data = gamesData[item] ?? {status: 'inProgress'}\n                    const loaded = data.status === 'loaded'\n\n                    const onAdd = () => { onGameAdd(item) }\n                    const onClick = () => { setSelected(item) }\n                    const onLaunch = () => {\n                        if (loaded)\n                            window?.open(data.game?.launchUrl, '_blank')?.focus()\n                    }\n\n\n                    // if (!data.game?.title.includes(searchQuery))\n                        // return <></>\n\n                    const validationLevel = data.game?.validationLevel ?? 0;\n\n                    if (!showUnverified && validationLevel < 1)\n                        return <></>\n\n\n                    return <GameTile\n                        disabled={isDisabled}\n                        loading={data.status === 'inProgress'}\n                        loadingFailed={data.status === 'failed'}\n                        image={loaded ? data.game?.cover : undefined}\n                        isAdded={gamesInLibraryIds.indexOf(item) !== -1}\n                        onAdd={onAdd}\n                        onLaunch={onLaunch}\n                        onClick={onClick}\n                        key={i.toString()}/>\n                })}\n            </div>\n            </div>)\n        \n}\n\n\nexport default GamesCatalog;","export default __webpack_public_path__ + \"static/media/sol.13887d06.svg\";","import { Typography } from '@mui/material'\n\nimport sol from './../../assets/sol.svg';\nimport './style.scss'\n\nconst GameItem = ({image, itemName, gameName, price} : { image: any, itemName: string, gameName: string, price: string }) => {\n    return (\n        <div className='gameItemBox'>\n                <div className='gameItem'>\n                    <img className='itemImage' alt='item' src={image} />\n                    <div className='hoverBox'>\n                        <Typography>View on blockchain</Typography>\n                    </div>\n                    <div className=\"SellButton\"><Typography variant=\"caption\">Sell</Typography></div>\n                </div>\n                <Typography className=\"itemName\">{itemName}</Typography>\n                <div className='dataBox'>\n                    <Typography className='name'>{gameName}</Typography>\n                    <Typography className=\"price\">{price}\n                        <img className='solSymbol' src={sol} alt='sol'/>\n                    </Typography>\n                </div>\n        </div>\n    )\n}\n\nexport default GameItem;","export default __webpack_public_path__ + \"static/media/item_ex_1.71413912.png\";","export default __webpack_public_path__ + \"static/media/unit.64654090.png\";","export default __webpack_public_path__ + \"static/media/unit2.8aae0298.png\";","export default __webpack_public_path__ + \"static/media/unit3.826b0f9b.png\";","export default __webpack_public_path__ + \"static/media/unit4.1e757971.png\";","export default __webpack_public_path__ + \"static/media/item_ex_4.5444ed4a.png\";","export default __webpack_public_path__ + \"static/media/item_ex_3.97dba060.png\";","export default __webpack_public_path__ + \"static/media/item_ex_2.940f4a6d.png\";","import helmet from './../../assets/item_ex_1.png';\nimport Chestpiece from './../../assets/item_ex_4.png';\nimport blade from './../../assets/item_ex_3.png';\nimport arrows from './../../assets/item_ex_2.png';\nimport { ItemNftData } from './itemsNftStoreSlice'\nimport { Keypair } from '@solana/web3.js'\nimport { friendsPlayGame } from '../games/dummyGames';\n\nexport const dummyItems: ItemNftData[] = [\n    {\n        address: Keypair.generate().publicKey,\n        game: friendsPlayGame.publicKey,\n        name: 'Helmet',\n        description: \"Common helmet for common variors\",\n        image: helmet,\n        price: 5.45\n    },\n    {\n        address: Keypair.generate().publicKey,\n        game: friendsPlayGame.publicKey,\n        name: 'Chestpiece',\n        description: \"Just a chestpiece\",\n        image: Chestpiece,\n        price: 10.2\n    },\n    {\n        address: Keypair.generate().publicKey,\n        game: friendsPlayGame.publicKey,\n        name: 'Blade',\n        description: \"Looks like a weapon, but I'm not sure\",\n        image: blade,\n        price: 3\n    },\n    {\n        address: Keypair.generate().publicKey,\n        game: friendsPlayGame.publicKey,\n        name: 'Chestpiece',\n        description: \"Just a chestpiece\",\n        image: Chestpiece,\n        price: 10.2\n    },\n    {\n        address: Keypair.generate().publicKey,\n        game: friendsPlayGame.publicKey,\n        name: 'Bow and arrows',\n        description: \"Classic\",\n        image: arrows,\n        price: 5.45\n    }\n]\n","import { StringPublicKey } from 'oyster-common';\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { PublicKey } from '@solana/web3.js'\nimport { RootState } from '../../app/store';\nimport { dummyItems } from './dummyItems';\n\nexport interface ItemNftData {\n  address: PublicKey,\n  game: PublicKey,\n  name: string,\n  description: string,\n  image: string,\n  price: number,\n}\n\nexport interface ItemsNftStoreState {\n  inProgress: StringPublicKey[],\n  loaded: ItemNftData[],\n  failed: StringPublicKey[]\n}\n\nconst initialState: ItemsNftStoreState = {\n  inProgress: [],\n  loaded: [...dummyItems],\n  failed: []\n};\n\nexport const itemsNftStoreSlice = createSlice({\n  name: 'itemsNftStore',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\nconst selectState = (state: RootState) => state.itemsNftStore;\n\nexport const selectNftItems = (rootState: RootState, items: StringPublicKey[]) =>\n{\n  const state = selectState(rootState)\n\n  const itemsInProgress = state.inProgress.filter(x => items.find(a => a === x));\n  const itemsLoaded = state.loaded.filter(x => items.find(a => a === x.address.toString()));\n  const itemsFailed = state.failed.filter(x => items.find(a => a === x));\n\n  const result: Record<string, ItemState> = {};\n\n  itemsInProgress.forEach(x => result[x.toString()] = { status: 'inProgress' })\n  itemsLoaded.forEach(x => result[x.address.toString()] = { status: 'loaded', item: x })\n  itemsFailed.forEach(x => result[x.toString()] = { status: 'failed' })\n\n  return result;\n}\n\nexport interface ItemState {\n  status: ItemLoadingStatus,\n  item?: ItemNftData\n}\n\nexport type ItemLoadingStatus = 'inProgress' | 'loaded' | 'failed'\n\n\n\nexport default itemsNftStoreSlice.reducer;\n","import { Typography } from '@mui/material'\nimport { PublicKey } from '@solana/web3.js'\nimport GameItem from '../../components/GameItem'\nimport './style.scss'\n\nimport spaceShip1 from './../../assets/AnywayLose_Items/unit.png';\nimport spaceShip2 from './../../assets/AnywayLose_Items/unit2.png';\nimport spaceShip3 from './../../assets/AnywayLose_Items/unit3.png';\nimport spaceShip4 from './../../assets/AnywayLose_Items/unit4.png';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { ItemState, selectNftItems } from '../../nft-store/items/itemsNftStoreSlice';\nimport { GameState, selectNftGames } from '../../nft-store/games/gamesNftStore';\nimport { StringPublicKey } from 'oyster-common';\nimport { friendsPlayGame } from '../../nft-store/games/dummyGames';\n\nconst anywayLoseItems = [\n    {\n        image: spaceShip1,\n        itemName: 'Newbie\\'s ship',\n        gameName: 'Anyway Lose',\n        price: '1,50',\n    },\n    {\n        image: spaceShip2,\n        itemName: 'Standard space traveler',\n        gameName: 'Anyway Lose',\n        price: '1,725',\n    },\n    {\n        image: spaceShip3,\n        itemName: 'Double destroyer',\n        gameName: 'Anyway Lose',\n        price: '3,0',\n    },\n    {\n        image: spaceShip4,\n        itemName: 'The Ship of the Infinite War',\n        gameName: 'Anyway Lose',\n        price: '15,725',\n    },\n]\n\nconst getGameItem = (key: StringPublicKey, data: Record<string, ItemState>, gamesData: Record<string, GameState>) => {\n    var itemData = data[key]\n\n    if (!!!itemData)\n        return <></>\n        \n    var img: string;\n    var name: string;\n    var price: number;\n    var game: any;\n\n    switch (itemData.status) {\n        case 'failed':\n            img = \"<failed>\";\n            name = \"<failed>\";\n            price = 0;\n            break;\n        case 'inProgress':\n            img = \"\";\n            name = \"\";\n            price = 0;\n            break;\n        case 'loaded':\n            img = itemData.item?.image as string;\n            name = itemData.item?.name as string;\n            price = itemData.item?.price as number;\n            const gameId = itemData.item?.game.toString() \n            game = gameId ? gamesData[gameId]?.game : undefined\n            break;\n        default:\n            img = \"\";\n            name = \"\";\n            price = 0;\n            break;\n    }\n\n\n    return <GameItem \n        image={img}\n        itemName={name}\n        gameName={game?.title ?? \"\"}\n        price={price.toString()}\n    />\n}\n\n\nconst InventoryPage = () => {\n    const allItemsCategorised = useSelector((state: RootState) => state.inventoryPage.itemsByGames)\n\n    const allItems = ([] as StringPublicKey[]).concat(...(allItemsCategorised.map(x => x.items)))\n    const gamesInLibraryIds = useSelector((state: RootState) => state.libraryPage.gamesInLibrary)\n    const itemsData = useSelector((state: RootState) => selectNftItems(state, (allItems)))\n    const gamesData = useSelector((state: RootState) => selectNftGames(state, (gamesInLibraryIds)))\n\n    const gamesInLibraryIdsWithDummy = [...gamesInLibraryIds, friendsPlayGame.publicKey.toString()]\n\n    return (\n    <div className='inventoryWrapper'>\n\n        <div className='gameCategoryDivider'>\n            <Typography className='deviderText'>All items</Typography>\n        </div>\n        <div className='inventoryBlock'>\n            {allItems.map(item => getGameItem(item, itemsData, gamesData))}\n        </div>\n\n\n\n\n        {gamesInLibraryIdsWithDummy.map(gameId => {\n            const game = gamesData[gameId]?.game\n            const items = allItemsCategorised.find(x => x.gameId === gameId)?.items ?? []\n        \n            return (\n            <>\n                <div className='gameCategoryDivider'>\n                    <Typography className='deviderText'>Items from game “{game?.title ?? \"\"}”</Typography>\n                </div>\n                \n                \n                <div className='inventoryBlock'>\n                    {items.length > 0\n                        ? <>{allItems.map(item => getGameItem(item, itemsData, gamesData))}</>\n                        : <>No items so far</>}\n                </div>\n            </>\n            )\n        })}\n    </div>)\n}\n\nexport { InventoryPage }","import GameTile from '../../components/GameTile';\nimport './style.scss'\n\nimport { Typography } from '@material-ui/core';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { usePlayersProgram } from '../../app/hooks';\nimport { RootState } from '../../app/store';\nimport { GameState, selectNftGames } from '../../nft-store/games/gamesNftStore';\nimport { fetchGamesLibraryAndLoadNfts } from './store/thunks';\nimport { PublicKey } from '@solana/web3.js'\nimport { StringPublicKey } from 'oyster-common';\nimport SingleGameInfo from '../../components/SingleGameInfo';\n\nconst GamesLibrary = ({ gamesInLibraryIds, gamesData, setSelected }:\n    {\n        gamesInLibraryIds: StringPublicKey[],\n        gamesData: Record<string, GameState>\n        setSelected: (x: StringPublicKey) => void\n    }) => {\n    return (\n        <div className=\"gamesList\">\n            {gamesInLibraryIds.map((item, i) => {\n                const data = gamesData[item] ?? {status: 'inProgress'}\n                const loaded = data.status === 'loaded'\n\n                const onAdd = () => { }\n                const onLaunch = () => {\n                    if (loaded)\n                        window?.open(data.game?.launchUrl, '_blank')?.focus()\n                }\n                const onClick = () => { setSelected(item) }\n\n                return <GameTile\n                    disabled={false}\n                    loading={data.status === 'inProgress'}\n                    loadingFailed={data.status === 'failed'}\n                    image={loaded ? data.game?.cover : undefined}\n                    isAdded={true}\n                    onAdd={onAdd}\n                    onLaunch={onLaunch}\n                    onClick={onClick} />\n            })}\n        </div>)\n}\n\nconst LibraryPage = () => {\n    const [selected, setSelected] = useState('')\n    const gamesInLibraryIds = useSelector((state: RootState) => state.libraryPage.gamesInLibrary)\n    const isLibraryFetched = useSelector((state: RootState) => state.libraryPage.isLibraryFetched)\n\n    const gamesData = useSelector((state: RootState) => selectNftGames(state, gamesInLibraryIds))\n\n    const dispatch = useDispatch();\n    const wallet = useWallet()\n    const playersProgram = usePlayersProgram();\n\n    useEffect(() => {\n        if (playersProgram && !isLibraryFetched && wallet && wallet.connected)\n            dispatch(fetchGamesLibraryAndLoadNfts({player: wallet.publicKey as PublicKey, program: playersProgram}))\n    }, [playersProgram, dispatch, gamesInLibraryIds, isLibraryFetched, wallet])\n\n\n    return (\n    <div className=\"libraryWrapper\">\n\n        <div className='libraryHeader'>\n            <Typography className='libraryHeaderText'>My games</Typography>\n        </div>\n            <GamesLibrary gamesInLibraryIds={gamesInLibraryIds} gamesData={gamesData} setSelected={setSelected} />\n\n            <SingleGameInfo\n                        visibility={selected !== ''}\n                        game={gamesData[selected]?.game}\n                        handleClose={ () => { setSelected('') }}\n                        isAdded={gamesInLibraryIds.indexOf(selected) !== -1}/>\n    </div>)\n}\n\nexport { LibraryPage }","import { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useEffect, useState } from 'react'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Program, Provider } from '@project-serum/anchor'\n\nimport playersIdl from '../idl/players.json'\nimport asylumIdl from '../idl/asylum.json'\nimport {asylum, players} from '../lib'\n\nconst playersProgramID = new PublicKey(playersIdl.metadata.address)\nconst asylumProgramID = new PublicKey(asylumIdl.metadata.address)\n\nfunction PlayersDemo() {\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [isInitializedGlobal, setIsInitializedGlobal] = useState(false)\n\n  const [nickname, setNickname] = useState('')\n  const [avatar, setAvatar] = useState(PublicKey.default)\n  const [games, setGames] = useState([])\n  const [playerAchievements, setPlayerAchievements] = useState([])\n  const [exp, setExp] = useState(0)\n  const [level, setLevel] = useState(0)\n\n  const [achievements, setAchievements] = useState([])\n\n  const [inputNickname, setInputNickname] = useState('')\n  const [inputAvatar, setInputAvatar] = useState('')\n  const [inputGame, setInputGame] = useState('')\n  const [inputAchievements, setInputAchievements] = useState('')\n  const [inputAchievementsExp, setInputAchievementsExp] = useState(0)\n  const [inputExp, setInputExp] = useState(0)\n  const wallet = useWallet()\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const network = \"https://api.devnet.solana.com\";\n    const opts = { preflightCommitment: \"processed\" }\n    const connection = new Connection(network, opts.preflightCommitment)\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    )\n    return provider;\n  }\n\n  async function fetchGlobalData() {\n    const provider = await getProvider()\n    const program = new Program(asylumIdl, asylumProgramID, provider)\n\n    try {\n      const [achievementsAccountAddress, _] = await asylum.findAchievementsAccountAddress(asylumProgramID)\n      const account = await program.account.achievementsAccount.fetch(achievementsAccountAddress)\n\n      console.log(account)\n      setIsInitializedGlobal(true)\n      setAchievements(account.achievements)\n    } catch (err) {\n      console.log(\"Achievements data fetching error: \", err)\n    }\n  }\n\n\n  async function fetchPlayerData() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      const [playerAccountAddress, _] = await players.findPlayerGlobalAccountAddress(wallet.publicKey, playersProgramID)\n      const account = await program.account.playerAccount.fetch(playerAccountAddress)\n\n      console.log(account)\n      setIsInitialized(true)\n      setNickname(account.nickname.toString())\n      setAvatar(account.avatar.toString())\n      setGames(account.games)\n      setPlayerAchievements(account.achievements)\n      setExp(account.exp)\n      setLevel(account.level)\n    } catch (err) {\n      console.log(\"Player data fetching error: \", err)\n    }\n  }\n\n  async function initializePlayer() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      console.log(program)\n      await players.initPlayer(program)\n      setIsInitialized(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n\n  async function initializeGlobal() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      console.log(program)\n      await asylum.initAsylumAccounts(program)\n      setIsInitializedGlobal(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchGlobalData()\n  }\n\n  async function updateNickname() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.updatePlayerNickname(program, inputNickname)\n      setInputNickname('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function updateAvatar() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.updatePlayerAvatar(program, new PublicKey(inputAvatar))\n      setInputAvatar('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addGame() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.addGameToLibrary(program, new PublicKey(inputGame))\n      setInputGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function removeGame() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.removeGameFromLibrary(program, new PublicKey(inputGame))\n      setInputGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addAchievement() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.addAchievement(program, inputAchievements, inputAchievementsExp)\n      setInputAchievements('')\n      setInputAchievementsExp('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addExp() {\n    const provider = await getProvider()\n    const program = new Program(playersIdl, playersProgramID, provider)\n\n    try {\n      await players.addExp(program, inputExp)\n      setInputExp('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  useEffect(() => {\n    if (wallet.connected) {\n      try {\n        fetchGlobalData()\n      } catch (e) {\n        if (isInitializedGlobal) {\n          console.error(e)\n        }\n      }\n\n      try {\n        fetchPlayerData()\n      } catch (e) {\n        if (isInitialized) {\n          console.error(e)\n        }\n      }\n    }\n  }, [wallet.connected])\n\n  return (\n    !wallet.connected\n      ?\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n        <WalletMultiButton />\n      </div>\n      :\n      <div className=\"App\">\n        <div>\n          {\n            !isInitializedGlobal && (<button onClick={initializeGlobal}>Initialize global</button>)\n          }\n\n          {\n            isInitializedGlobal && !isInitialized && (<button onClick={initializePlayer}>Initialize</button>)\n          }\n\n          {\n            isInitializedGlobal && isInitialized ? (\n              <div style={{ width: \"fit-content\", margin: \"0 auto\", textAlign: \"left\" }}>\n                <h1>Current player account state</h1>\n                <h3>Current nickname: </h3>{nickname}\n                <h3>Current avatar: </h3>{avatar.toString()}\n                <h3>Current games: </h3>\n                {games && games.length !== 0 ? <ul>{games.map((x, i) => <li key={i}>{x.toString()}</li>)}</ul> : \"No games so far\"}\n                <h3>Achievements: </h3>\n                {playerAchievements && playerAchievements.length !== 0 ?\n                  <ul>{playerAchievements.map((x, i) =>\n                  {\n                    const achievement = achievements.find(item => item.id === i);\n                    const display = achievement\n                      ? `${achievement.label} - ${achievement.description} | Game: ${achievement.game.toString()}`\n                      : `id: ${x}`\n                    return <li key={i}>{display}</li>\n                  })}\n                  </ul>\n                  : \"No achievements so far\"}\n                <h3>Current level: </h3>{level}\n                <h3>Current exp: </h3>{exp}\n\n                <h1 style={{ marginTop: 60 }}>Edit</h1>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"New nickname (string, 32 bytes)\"\n                    onChange={e => setInputNickname(e.target.value)}\n                    value={inputNickname}\n                  />\n                  <button onClick={updateNickname}>Set nickname</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"New avatar (any Public key)\"\n                    onChange={e => setInputAvatar(e.target.value)}\n                    value={inputAvatar}\n                  />\n                  <button onClick={updateAvatar}>Set avatar</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Game id (any Public key)\"\n                    onChange={e => setInputGame(e.target.value)}\n                    value={inputGame}\n                  />\n                  <button onClick={addGame}>Add game</button>\n                  <button onClick={removeGame}>Remove game</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Achievement id (u16)\"\n                    onChange={e => setInputAchievements(e.target.value)}\n                    value={inputAchievements}\n                  />\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Exp to add (optional) (u32)\"\n                    onChange={e => setInputAchievementsExp(e.target.value)}\n                    value={inputAchievementsExp}\n                  />\n                  <button onClick={addAchievement}>Add achievement</button>\n                </div>\n                \n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Exp to add (u32)\"\n                    onChange={e => setInputExp(e.target.value)}\n                    value={inputExp}\n                  />\n                  <button onClick={addExp}>Add exp</button>\n                </div>\n\n              </div>\n            ) : (\n              <h3>Please inialize your account.</h3>\n            )\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default PlayersDemo\n","import idl from '../idl/asylum.json'\nimport { players, asylum } from '../lib'\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useEffect, useState } from 'react'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Program, Provider } from '@project-serum/anchor'\n\nconst programID = new PublicKey(idl.metadata.address)\n\n\nfunction PlayersDemo() {\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  const [achievements, setAchievements] = useState([])\n\n  const [inputAchievementName, setInputAchievementName] = useState('')\n  const [inputAchievementDescription, setInputAchievementDescription] = useState('')\n  const [inputAchievementGame, setInputAchievementGame] = useState('')\n  const wallet = useWallet()\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const network = \"https://api.devnet.solana.com\";\n    const opts = { preflightCommitment: \"processed\" }\n    const connection = new Connection(network, opts.preflightCommitment)\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    )\n    return provider;\n  }\n\n  async function fetchAchievements() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      const [achievementsAccountAddress, _] = await asylum.findAchievementsAccountAddress(programID)\n      const account = await program.account.achievementsAccount.fetch(achievementsAccountAddress)\n\n      console.log(account)\n      setIsInitialized(true)\n      setAchievements(account.achievements)\n    } catch (err) {\n      console.log(\"Achievements data fetching error: \", err)\n    }\n  }\n\n\n  async function initializeGlobal() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      console.log(program)\n      await asylum.initAsylumAccounts(program)\n      setIsInitialized(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchAchievements()\n  }\n\n  async function addAchievement() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await asylum.addAchievement(program, inputAchievementName, inputAchievementDescription, new PublicKey(inputAchievementGame))\n      setInputAchievementName('')\n      setInputAchievementDescription('')\n      setInputAchievementGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchAchievements()\n  }\n\n  useEffect(() => {\n    if (wallet.connected) {\n      try {\n        fetchAchievements()\n      } catch (e) {\n        if (isInitialized) {\n          console.error(e)\n        }\n      }\n    }\n  }, [wallet.connected])\n\n  return (\n    !wallet.connected\n      ?\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n        <WalletMultiButton />\n      </div>\n      :\n      <div className=\"App\">\n        <div>\n          {\n            !isInitialized && (<button onClick={initializeGlobal}>Initialize global</button>)\n          }\n\n          {\n            isInitialized ? (\n              <div style={{ width: \"fit-content\", margin: \"0 auto\", textAlign: \"left\" }}>\n                <h3>Achievements: </h3>\n                {achievements && achievements.length !== 0 ? <ul>{achievements.map((x, i) => <li key={i}>{`(id:${x.id}) ${x.label} - ${x.description} | Game: ${x.game.toString()}`}</li>)}</ul> : \"No achievements so far\"}\n\n                <h1 style={{ marginTop: 60 }}>Edit</h1>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Achievement label (String 32)\"\n                    onChange={e => setInputAchievementName(e.target.value)}\n                    value={inputAchievementName}\n                  />\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Achievement description (String 64)\"\n                    onChange={e => setInputAchievementDescription(e.target.value)}\n                    value={inputAchievementDescription}\n                  />\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Game id (any Public key)\"\n                    onChange={e => setInputAchievementGame(e.target.value)}\n                    value={inputAchievementGame}\n                  />\n                  <button onClick={addAchievement}>Add achievement</button>\n                </div>\n\n\n              </div>\n            ) : (\n              <h3>Please inialize your account.</h3>\n            )\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default PlayersDemo\n","import idl from '../idl/asylum.json'\nimport { players, asylum } from '../lib'\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useEffect, useState } from 'react'\nimport { Connection, PublicKey, Keypair } from '@solana/web3.js'\nimport { Program, Provider } from '@project-serum/anchor'\nimport { decodeMasterEdition, decodeMetadata, getMetadata } from 'oyster-common'\n\n// import { createShipMasterNFT } from '../lib/metaplex'\n// import { mintNFT } from '../lib/cli/src/commands/mint-nft'\n// import { mintNFT_ } from '../lib/cli/src/commands/mint-nft-custom'\n// import { createMetaplexMetadata } from '../lib/helpers'\nimport { mintNFT as mintNFT_web } from '../lib/metaplex/packages/web/src/actions/nft'\nimport { fetchGamesNfts } from '../nft-store/games/thunks'\n\nconst programID = new PublicKey(idl.metadata.address)\n\n\nfunction GamesDemo() {\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  const [games, setGames] = useState([])\n\n  const [nftCreateProgress, setNFTcreateProgress] = useState(0)\n  const wallet = useWallet()\n\n\n  useEffect(() => {\n    console.log(nftCreateProgress);\n  }, [nftCreateProgress])\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    // const network = \"http://localhost:8899\";\n    const network = \"https://api.devnet.solana.com\";\n    const opts = { preflightCommitment: \"processed\" }\n    const connection = new Connection(network, opts.preflightCommitment)\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    )\n    return provider;\n  }\n\n  async function fetchGames() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      const [gamessAccountAddress, _] = await asylum.findGamesCatalogAccountAddress(programID)\n      const account = await program.account.gamesCatalogAccount.fetch(gamessAccountAddress)\n\n      console.log(account)\n      setIsInitialized(true)\n      setGames(account.games)\n    } catch (err) {\n      console.log(\"Games data fetching error: \", err)\n    }\n  }\n\n\n  async function initializeGlobal() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      console.log(program)\n      await asylum.initGamesCatalogAccount(program)\n      setIsInitialized(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchGames()\n  }\n\n  async function addGame() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await asylum.addGameToCatalog(program, new PublicKey(\"8tkver7inkpdqYafqpH8KF9Jfwarnd93gv8Mf8g5jGyC\"))\n        // const keypair =  Keypair.generate();\n        // const metadata =  createMetaplexMetadata(\n        //   \"Name hosted meta\",\n        //   \"\",\n        //   \"Desc hosted meta\",\n        //   \"https://raw.githubusercontent.com/LastSymbol0/Asylum_AnywayLose/536051b73f2a3021875188890fd48a1186ccd67a/public/pic/unit.svg\",\n        //   \"image\",\n        //   [{ address: wallet.publicKey.toString(), share: 100 }]) ;\n        // console.log(\"meta\", metadata)\n\n        // console.log(\"mintNFT_web\")\n\n\n        // mintNFT_web(provider.connection, wallet, \"devnet\", [], {\n        //   name: \"Test 2 Name\",\n        //   symbol: \"TST\",\n        //   description: \"My test NFT\",\n        //   image: \"https://raw.githubusercontent.com/LastSymbol0/Asylum_AnywayLose/536051b73f2a3021875188890fd48a1186ccd67a/public/pic/unit.svg\",\n        //   animation_url: undefined,\n        //   attributes: undefined,\n        //   external_url: \"\",\n        //   properties: undefined,\n        //   creators: null,\n        //   sellerFeeBasisPoints: 0\n        // },\n        // setNFTcreateProgress).catch(e => console.log(e))\n\n        // console.log(\"2. mintNFT_\", wallet.publicKey.toString())\n\n        // mintNFT_(provider.connection, wallet, metadata, true);\n\n\n\n        // createShipMasterNFT(\n        //     Keypair.generate(),\n        //     provider.connection,\n        //     wallet.publicKey,\n        //     {\n        //         name: \"d\",\n        //         symbol: \"a\",\n        //         uri: \"c\"\n        //     })\n\n\n    } catch (err) {\n        console.log(\"Transaction error: \", err)\n    }\n\n    fetchGames()\n  }\n\n  async function updateNft() {\n    const provider = await getProvider()\n\n    const fetchNft = async (connection, mint) => {\n      const metaAddress = await getMetadata(mint.toString());\n      const buffer = await connection.getAccountInfo(new PublicKey(metaAddress))\n      console.log(\"start2\")\n\n      if (!buffer)\n          throw Error(\"getAccountInfo returns invalid data\")\n\n      // const metadataMaster = decodeMasterEdition(buffer.data)\n      const metadata = decodeMetadata(buffer.data)\n      // console.log(\"fetched meta master\", metadataMaster)\n      console.log(\"fetched meta\", metadata)\n\n      const resp = await fetch(metadata.data.uri)\n      console.log(\"resp\", resp.json())\n    }\n\n    try {\n      fetchNft(provider.connection, new PublicKey(\"37zew4JheuWMQy3QfNmRaUfqpqaWJNoJwtX4Wbm8BdVY\"))\n    } catch (err) {\n        console.log(\"Transaction error: \", err)\n    }\n\n    fetchGames()\n  }\n\n  useEffect(() => {\n    if (wallet.connected) {\n      try {\n        fetchGames()\n      } catch (e) {\n        if (isInitialized) {\n          console.error(e)\n        }\n      }\n    }\n  }, [wallet.connected])\n\n  return (\n    !wallet.connected\n      ?\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n        <WalletMultiButton />\n      </div>\n      :\n      <div className=\"App\">\n        <div>\n          {\n            !isInitialized && (<button onClick={initializeGlobal}>Initialize global</button>)\n          }\n\n          {\n            isInitialized ? (\n              <div style={{ width: \"fit-content\", margin: \"0 auto\", textAlign: \"left\" }}>\n                <h3>Games: </h3>\n                {games && games.length !== 0 ? <ul>{games.map((x, i) => <li key={i}>{`Game: ${x.toString()}`}</li>)}</ul> : \"No games so far\"}\n\n                <h1 style={{ marginTop: 60 }}>Edit</h1>\n\n                  <button onClick={addGame}>Add game</button>\n                  <button onClick={updateNft}>upd</button>\n\n\n              </div>\n            ) : (\n              <h3>Please inialize your account.</h3>\n            )\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default GamesDemo\n\n\nconst a = {\n  \"name\": \"Solflare X NFT\",\n  \"symbol\": \"\",\n  \"description\": \"Celebratory Solflare NFT for the Solflare X launch\",\n  \"seller_fee_basis_points\": 0,\n  \"image\": \"https://www.arweave.net/abcd5678?ext=png\",\n  \"animation_url\": \"https://www.arweave.net/efgh1234?ext=mp4\",\n  \"external_url\": \"https://solflare.com\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"web\",\n      \"value\": \"yes\"\n    },\n    {\n      \"trait_type\": \"mobile\",\n      \"value\": \"yes\"\n    },\n    {\n      \"trait_type\": \"extension\",\n      \"value\": \"yes\"\n    }\n  ],\n  \"collection\": {\n    \"name\": \"Solflare X NFT\",\n    \"family\": \"Solflare\"\n  },\n  \"properties\": {\n    \"files\": [\n      {\n        \"uri\": \"https://www.arweave.net/abcd5678?ext=png\",\n        \"type\": \"image/png\"\n      },\n      {\n        \"uri\": \"https://watch.videodelivery.net/9876jkl\",\n        \"type\": \"unknown\",\n        \"cdn\": true\n      },\n      {\n        \"uri\": \"https://www.arweave.net/efgh1234?ext=mp4\",\n        \"type\": \"video/mp4\"\n      }\n    ],\n    \"category\": \"video\",\n    \"creators\": [\n      {\n        \"address\": \"SOLFLR15asd9d21325bsadythp547912501b\",\n        \"share\": 100\n      }\n    ]\n  }\n}\n","\nimport { AccountPage } from './pages/Account';\nimport { GamesStorePage } from './pages/GamesStore';\nimport { InventoryPage } from './pages/Inventory';\nimport { LibraryPage } from './pages/Library';\nimport { MarketplacePage } from './pages/Marketplace';\n\nimport PlayersDemo from './demos/Demo1_players'\nimport AchievementsDemo from './demos/Demo2_achievements'\nimport GamesDemo from './demos/Demo4_add_game';\n\nexport type Route = {\n    path: string;\n    name: string;\n    component: () => JSX.Element;\n}\n\nexport const homepath = '/gamesStore';\n\nexport const routes: Route[] = [\n    // Tmp\n    {\n        path: \"/gamesStore\",\n        name: \"Games Store\",\n        component: GamesStorePage\n    },\n    {\n        path: \"/inventory\",\n        name: \"Inventory\",\n        component: InventoryPage\n    },\n    {\n        path: \"/library\",\n        name: \"Library\",\n        component: LibraryPage\n    },\n    {\n        path: \"/marketplace\",\n        name: \"Marketplace\",\n        component: MarketplacePage\n    },\n    {\n        path: \"/demo1\",\n        name: \"[DEV] Demo 1 (Players)\",\n        component: PlayersDemo\n    },\n    {\n        path: \"/demo2\",\n        name: \"[DEV] Demo 2 (Achievements; admin)\",\n        component: AchievementsDemo\n    },\n    {\n        path: \"/demo4\",\n        name: \"[DEV] Demo 4 (Games; admin)\",\n        component: GamesDemo\n    },\n]\n","import './style.scss'\nimport { Carousel } from \"react-responsive-carousel\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport SearchBar from '../../components/SearchBar';\n\nimport SingleGameInfo from '../../components/SingleGameInfo';\n\nimport { useState } from 'react';\n\nimport DevPanelButton from '../../components/DevPanelForm';\n\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { PublicKey } from '@solana/web3.js'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectNftGames } from '../../nft-store/games/gamesNftStore';\nimport { RootState } from '../../app/store';\nimport { useEffect } from 'react';\nimport { fetchGamesCatalogAndLoadNfts } from './store/thunks';\nimport { useAsylumProgram, usePlayersProgram } from '../../app/hooks';\nimport { fetchGamesLibraryAndLoadNfts } from '../Library/store/thunks';\nimport GamesCatalog from './GamesCatalog';\n\nconst GamesStorePage = () => {\n    const [selected, setSelected] = useState('')\n\n    const gamesInCatalogIds = useSelector((state: RootState) => state.gamesStorePage.gamesInCatalog)\n    const gamesInLibraryIds = useSelector((state: RootState) => state.libraryPage.gamesInLibrary)\n    const isCatalogFetched = useSelector((state: RootState) => state.gamesStorePage.isCatalogFetched)\n    const isLibraryFetched = useSelector((state: RootState) => state.libraryPage.isLibraryFetched)\n    const gameFriendsPlayId = useSelector((state: RootState) => state.gamesStorePage.friendsPlay)\n    const gameSuggestedId = useSelector((state: RootState) => state.gamesStorePage.suggestedForYou)\n    const gamesBannerIds = useSelector((state: RootState) => state.gamesStorePage.bannerGames)\n\n    const gamesData = useSelector((state: RootState) => selectNftGames(state, [\n        ...gamesInCatalogIds,\n        gameFriendsPlayId,\n        gameSuggestedId,\n        ...gamesBannerIds\n    ]))\n\n    const dispatch = useDispatch();\n    const wallet = useWallet()\n    const playersProgram = usePlayersProgram();\n    const asylumProgram = useAsylumProgram(\"https://api.devnet.solana.com\", true);\n\n    useEffect(() => {\n        if (asylumProgram && !isCatalogFetched)\n            dispatch(fetchGamesCatalogAndLoadNfts(asylumProgram))\n    }, [asylumProgram, dispatch, gamesInCatalogIds, isCatalogFetched])\n\n    useEffect(() => {\n        if (playersProgram && !isLibraryFetched && wallet && wallet.connected)\n            dispatch(fetchGamesLibraryAndLoadNfts({player: wallet.publicKey as PublicKey, program: playersProgram}))\n    }, [playersProgram, dispatch, gamesInLibraryIds, isLibraryFetched, wallet])\n\n\n    return <>\n\n        <div className=\"GamesStoreWrapper\">\n            <div className=\"decor-1\"></div>\n            <div className=\"decor-2\"></div>\n            <div className=\"bannerWrapper\">\n                <div className=\"bannerLeftSideWrapper\">\n\n                    <Carousel className=\"Carousel\" showStatus={false} showIndicators={false} showThumbs={false} autoPlay>\n\n                        {gamesBannerIds.map((x, i) => {\n                            const data = gamesData[x] ?? {cover: ''};\n                            return <div key={i} className=\"slide\" style={{ background: `url(${data.game?.cover})` }}></div>\n                        })}\n                    </Carousel>\n\n                    <SearchBar />\n\n\n                </div>\n                <div className=\"suggestedContainer\">\n                    <div className=\"suggested-firs--container\">\n                        <div className=\"decor-bottom\">\n                        <div className='suggested-second-wrapper'>\n\n                            <div className=\"suggested-first\"\n                                style={{ background: `url(${gamesData[gameFriendsPlayId]?.game?.cover})` }}\n                                onClick={wallet.connected ? () => setSelected(gameFriendsPlayId) : undefined}>\n                                <div className=\"label\">Friends play</div>\n                                {/* <div className={`price ${wallet.connected ? \"active\" : \"disabled\"}`}>Add</div> */}\n\n                            </div>\n                            \n                        </div>\n                        </div>\n                    </div>\n\n                    <div className=\"suggested-second--container\">\n                            <div className=\"suggested-second\"\n                                style={{ background: `url(${gamesData[gameSuggestedId]?.game?.cover})` }}\n                                onClick={wallet.connected ? () => setSelected(gameSuggestedId) : undefined}>\n                                <div className=\"label\">Suggested for you</div>\n                                {/* <div className={`price ${wallet.connected ? \"active\" : \"disabled\"}`}>Add</div> */}\n\n                            </div>\n                        \n                    </div>\n\n\n                    <SingleGameInfo\n                        visibility={selected !== ''}\n                        game={gamesData[selected]?.game}\n                        handleClose={ () => { setSelected('') }}\n                        isAdded={gamesInLibraryIds.indexOf(selected) !== -1}/>\n\n                </div>\n            </div>\n\n            <GamesCatalog\n                gamesInCatalogIds={gamesInCatalogIds}\n                gamesInLibraryIds={gamesInLibraryIds}\n                isDisabled={!wallet.connected}\n                gamesData={gamesData}\n                setSelected={setSelected} />\n\n        {wallet.connected &&\n        <div style={{ textAlign: 'center', width: '100%', padding: '40px 0px' }}>\n            <DevPanelButton />\n        </div>}\n        <div style={{ height: '100px' }}>\n        </div>\n    </div>\n    </>\n}\n\nexport { GamesStorePage }","import { Typography } from \"@material-ui/core\"\n\nconst MarketplacePage = () => {\n    return <div>\n        <Typography variant=\"h3\"> Comming soon... </Typography>\n    </div>\n}\n\nexport { MarketplacePage }","import React, { useEffect, useState } from \"react\"\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Link, useLocation, useRouteMatch } from 'react-router-dom';\n\nimport { Route } from \"../../routes\";\nimport { Typography } from \"@material-ui/core\";\n\nimport telegram from './../../assets/telegramIcon.svg';\nimport discord from './../../assets/discordIcon.svg';\nimport ProfilePanel from \"../ProfilePanel\";\nimport { homepath } from \"../../routes\";\n\nimport './style.scss';\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\n\nconst NavigationPanel = ({ pages }: { pages: Route[] }) => {\n    const location = useLocation();\n    const currentTab: string = location.pathname;\n    const wallet = useWallet()\n\n\n    return (\n        <div className=\"NavigationPanelWrapper\">\n        <Tabs orientation=\"vertical\"\n            variant='fullWidth'\n            value={currentTab}\n            textColor=\"primary\"\n            classes={{\n                indicator: \"myIndicator\"\n              }}\n            style={{width: \"100%\"}}\n        >\n            {pages.map(((x, i) =>\n                <Tab disabled={!wallet.connected && x.path !=homepath} disableRipple key={i} label={<Typography variant=\"body1\">{x.name }</Typography>} value={x.path} to={x.path} component={Link} />\n            ))}\n        </Tabs>\n\n        <div className=\"bottomContainer\">\n            <div className=\"decor-1\"> </div>\n            \n            <ProfilePanel />\n\n            <div className=\"contactUsContainer\">\n                <Typography variant=\"body1\">Contact us</Typography>\n                <a  href=\"https://t.me/joinchat/MFpIhiHJoWMyYjAy\" target=\"_blank\" >\n                    <img className=\"icon\" src={telegram} alt=\"telegram icon\"/>\n                </a >\n                <a  href=\"https://discord.gg/eEa3kqZU\" target=\"_blank\" >\n                    <img className=\"icon\" src={discord} alt=\"discord icon\"/>\n                </a >\n            </div>\n        </div>\n    </div>\n    )\n    \n}\n\nexport default NavigationPanel;\n","export default __webpack_public_path__ + \"static/media/logo.f4e43637.svg\";","export default __webpack_public_path__ + \"static/media/settingsIcon.a380210e.svg\";","import React from \"react\"\nimport logo from './../../assets/logo.svg';\nimport settingsIcon from './../../assets/settingsIcon.svg'\nimport './style.scss';\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { Typography } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { homepath } from \"../../routes\";\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\n\nconst Icon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\">\n        <path d=\"M0.20001 5.86285L0.25001 7.21143L2.10001 5.38285C3.12001 4.36571 3.98001 3.54285 4.02001 3.54285C4.06001 3.54285 4.91001 4.36571 5.92001 5.37143C6.93001 6.37714 7.77001 7.2 7.80001 7.2C7.83001 7.2 7.83001 6.56 7.80001 5.77143L7.75001 4.34285L5.90001 2.51428C4.89001 1.50857 4.03001 0.685711 4.00001 0.685711C3.94001 0.685711 0.41001 4.16 0.25001 4.37714C0.19001 4.45714 0.17001 5.04 0.20001 5.86285Z\" fill=\"white\"/>\n        </svg>\n    )\n}\n\nconst Header = () => {\n    const [lang, setLang] = React.useState('EN');\n    const wallet = useWallet()\n\n    const handleChange = (event: SelectChangeEvent) => {\n        setLang(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"HeaderWrapper\">\n                <Link to={homepath}>\n                    <img src={logo} alt='logo'/>\n                </Link>\n            <div className=\"HeaderRight\">\n\n                <FormControl fullWidth>\n                    <Select\n                        autoWidth\n                        id=\"demo-simple-select\"\n                        displayEmpty={false}\n                        value={lang}\n                        onChange={handleChange}\n                        defaultValue='EN'\n                        variant='standard'\n                        IconComponent={Icon}\n                    >\n                        <MenuItem value={'EN'}>\n                            <Typography variant=\"body1\">EN</Typography>\n                        </MenuItem>\n                        {/* <MenuItem value={'RU'}>\n                            <Typography variant=\"body1\">RU</Typography>\n                        </MenuItem> */}\n                    </Select>\n                </FormControl>\n\n                <div className=\"settingButtons\">\n                    <img src={settingsIcon} alt=\"settingsIcon\" />\n                </div>\n                <Typography>[Devnet]</Typography>\n                \n               \n                <div className=\"connectWallerButton\">\n                    <WalletMultiButton />\n                    \n                </div> \n            </div>\n        </div>\n        </div>\n        \n    )\n    \n}\n/*J7WQvF...Rf3A*/\nexport default Header;\n","import './App.scss';\nimport { getPhantomWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { BrowserRouter, Switch, Route, HashRouter, Redirect } from \"react-router-dom\";\nimport {Grid} from '@mui/material'\nimport NavigationPanel  from './components/NavigationPanel';\nimport Header from './components/Header';\nimport { Route as PageRoute, routes } from './routes';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { createTheme, ThemeProvider, useTheme } from '@material-ui/core';\nimport { useEffect } from 'react';\n\nconst wallets = [getPhantomWallet()]\n\nconst Pages = ({ pages }: { pages: PageRoute[] }) => {\n\n  return (\n    <Switch>\n      {pages.map((x => <Route path={x.path} key={x.path} exact component={x.component} />))}\n      <Route exact path=\"/\">\n          <Redirect to=\"/gamesStore\" />\n      </Route>\n    </Switch>)\n}\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ffffff\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#ffffff\",\n      contrastText: \"#ffffff\",\n    },\n    background: {\n      default: '#161616'\n    },\n    text: {\n      primary: 'rgba(255, 255, 255, 1)',\n      secondary: 'rgba(255, 255, 255, 1)',\n      disabled: 'rgba(255, 255, 255, 0.33)'\n    }\n  },\n  typography: {\n    fontFamily: \"Ubuntu\",\n    body1: {\n      fontSize : 16,\n    },\n    caption: {\n        color: '#000000',\n        fontSize : 16,\n    },\n  }\n});\n\n\n\nfunction App() {\n\n  return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <div className=\"App\">\n\n          <HashRouter basename={process.env.PUBLIC_URL ? `${process.env.PUBLIC_URL}` : undefined}>\n                \n\n            <Grid container  columns={1}>\n              <Grid item xs={1}><Header /></Grid>\n            </Grid>\n            <Grid container spacing={2} columns={5}>\n              <Grid item xs={1}>\n                <NavigationPanel pages={routes} />\n              </Grid>\n              <Grid item xs={4}>\n                <div className=\"contentWrapper\">\n                  <Pages pages={routes} />\n                </div>\n              </Grid>\n            </Grid>\n\n          </HashRouter>\n        </div>\n       </ThemeProvider>\n  );\n}\n\nconst AppWithProvider = () => (\n  <ConnectionProvider endpoint=\"http://127.0.0.1:8899\">\n    <WalletProvider wallets={wallets} autoConnect>\n      <WalletModalProvider>\n        <App />\n      </WalletModalProvider>\n    </WalletProvider>\n  </ConnectionProvider>\n)\n\n\nexport default AppWithProvider;\n\n\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface AccountPageState {\n}\n\nconst initialState: AccountPageState = {\n};\n\nexport const accontPageSlice = createSlice({\n  name: 'accountPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default accontPageSlice.reducer;\n","import { StringPublicKey } from 'oyster-common';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { bannerGames as dummyBannerGames, friendsPlayGame, suggestedForYouGame } from '../../../nft-store/games/dummyGames';\nimport { fetchGamesCatalog } from './thunks';\n\nexport interface GamesStorePageState {\n  gamesInCatalog: StringPublicKey[],\n  isCatalogFetched: boolean,\n  friendsPlay: StringPublicKey,\n  suggestedForYou: StringPublicKey,\n  bannerGames: StringPublicKey[],\n}\n\nconst initialState: GamesStorePageState = {\n  gamesInCatalog: [],//catalogGames.map(x => x.publicKey.toString()),\n  isCatalogFetched: false,\n  friendsPlay: friendsPlayGame.publicKey.toString(),\n  suggestedForYou:  suggestedForYouGame.publicKey.toString(),\n  bannerGames: dummyBannerGames.map(x => x.publicKey.toString()),\n};\n\nexport const gamesStorePageSlice = createSlice({\n  name: 'gamesStorePage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder.addCase(fetchGamesCatalog.fulfilled, (state, action) =>\n    {\n        const set = new Set(state.gamesInCatalog)\n        action.payload.forEach(x => set.add(x.toString()))\n        state.isCatalogFetched = true\n\n        state.gamesInCatalog = [...set]\n    })\n    \n    builder.addCase(fetchGamesCatalog.rejected, (state, action) =>\n    {\n        state.isCatalogFetched = false\n    })\n  },\n});\n\n\nexport default gamesStorePageSlice.reducer;\n","import { StringPublicKey } from 'oyster-common';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { PublicKey, Keypair } from '@solana/web3.js'\nimport { friendsPlayGame } from '../../../nft-store/games/dummyGames';\nimport { dummyItems } from '../../../nft-store/items/dummyItems';\n\nexport interface InventoryPageState {\n  itemsByGames: [{\n    gameId: StringPublicKey,\n    items: StringPublicKey[]\n  }],\n}\n\nconst initialState: InventoryPageState = {\n  itemsByGames: [\n    {\n      gameId: friendsPlayGame.publicKey.toString(),\n      items: dummyItems.map(x => x.address.toString())\n    }\n  ]\n};\n\nexport const inventoryPageSlice = createSlice({\n  name: 'inventoryPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default inventoryPageSlice.reducer;\n","import { StringPublicKey } from 'oyster-common';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { fetchGamesLibrary } from './thunks';\n\nexport interface LibraryPageState {\n  gamesInLibrary: StringPublicKey[],\n  isLibraryFetched: boolean,\n}\n\nconst initialState: LibraryPageState = {\n  gamesInLibrary: [],\n  isLibraryFetched: false,\n};\n\nexport const libraryPageSlice = createSlice({\n  name: 'libraryPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder.addCase(fetchGamesLibrary.fulfilled, (state, action) => {\n\n      const set = new Set<StringPublicKey>()\n\n      action.payload.forEach(x => set.add(x.toString()))\n\n      state.gamesInLibrary = [...set]\n      state.isLibraryFetched = true\n    })\n\n    builder.addCase(fetchGamesLibrary.rejected, (state, action) => {\n      state.isLibraryFetched = false\n    })\n  },\n});\n\n\nexport default libraryPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface MarketplacePageState {\n}\n\nconst initialState: MarketplacePageState = {\n};\n\nexport const marketplacePageSlice = createSlice({\n  name: 'marketplacePage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default marketplacePageSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport gamesNftStoreReducer from '../nft-store/games/gamesNftStore';\nimport itemsNftStoreReducer from '../nft-store/items/itemsNftStoreSlice';\nimport accountPageReducer from '../pages/Account/store/accountSlice';\nimport gamesStorePageReducer from '../pages/GamesStore/store/gamesStoreSlice';\nimport inventoryPageReducer from '../pages/Inventory/store/inventorySlice';\nimport libraryPageReducer from '../pages/Library/store/librarySlice';\nimport marketplacePageReducer from '../pages/Marketplace/store/marketplaceSlice';\n\nexport const store = configureStore({\n  reducer: {\n    accountPage: accountPageReducer,\n    gamesStorePage: gamesStorePageReducer,\n    inventoryPage: inventoryPageReducer,\n    libraryPage: libraryPageReducer,\n    marketplacePage: marketplacePageReducer,\n    gamesNftStore: gamesNftStoreReducer,\n    itemsNftStore: itemsNftStoreReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { Program, web3 } from '@project-serum/anchor';\n\n\nexport const findAchievementsAccountAddress = (programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([Buffer.from(\"Achievements\")], programId);\n}\n\nexport const findGamesCatalogAccountAddress = (programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([Buffer.from(\"GamesCatalog\")], programId);\n}\n\n\nexport const initAsylumAccounts = async (program: Program): Promise<void> => {\n    await Promise.all([initAchievementsAccount(program), initGamesCatalogAccount(program)])\n}\n\nexport const initAchievementsAccount = async (program: Program): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [account, nonce] = await findAchievementsAccountAddress(programId);\n\n    await program.rpc.initializeAchievements(nonce, {\n      accounts: {\n        achievementsAccount: account,\n        user: userPublicKey,\n        systemProgram: web3.SystemProgram.programId,\n      }\n    });\n}\n\nexport const addAchievement = async (program: Program, label: String, description: String, game: PublicKey): Promise<void> => {\n    const programId = program.programId;\n    const [account, _] = await findAchievementsAccountAddress(programId);\n\n    await program.rpc.addAchievement(label, description, game, {\n      accounts: {\n        achievementsAccount: account,\n      }\n    });\n}\n\nexport const initGamesCatalogAccount = async (program: Program): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [account, nonce] = await findGamesCatalogAccountAddress(programId);\n\n    await program.rpc.initializeGamesCatalog(nonce, {\n      accounts: {\n        gamesCatalogAccount: account,\n        user: userPublicKey,\n        systemProgram: web3.SystemProgram.programId,\n      }\n    });\n}\n\nexport const addGameToCatalog = async (program: Program, game: PublicKey): Promise<void> => {\n    const programId = program.programId;\n    const [account, _] = await findGamesCatalogAccountAddress(programId);\n\n    await program.rpc.addGameToCatalog(game, {\n      accounts: {\n        gamesCatalogAccount: account,\n      }\n    });\n}\n\n"],"sourceRoot":""}