{"version":3,"sources":["components/NavigationPanel/index.tsx","pages/Account/index.tsx","lib/players.ts","demos/Demo1_players.js","routes.ts","pages/GamesStore/index.tsx","pages/Inventory/index.tsx","pages/Library/index.tsx","pages/Marketplace/index.tsx","App.tsx","pages/Account/store/accountSlice.ts","pages/GamesStore/store/gamesStoreSlice.ts","pages/Inventory/store/inventorySlice.ts","pages/Library/store/librarySlice.ts","pages/Marketplace/store/marketplaceSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["NavigationPanel","pages","React","useState","value","setValue","Tabs","orientation","variant","onChange","_","newValue","map","x","i","style","marginTop","label","name","href","path","id","AccountPage","findPlayerGlobalAccountAddress","userPublicKey","programId","PublicKey","findProgramAddress","toBuffer","findPlayerGameAccountAddress","gameId","initPlayer","program","a","nickname","avatar","default","provider","wallet","publicKey","playerAccount","nonce","rpc","initialize","accounts","user","systemProgram","web3","SystemProgram","updatePlayerNickname","updateNickname","updatePlayerAvatar","updateAvatar","addGameToLibrary","gameAddress","addGame","removeGameFromLibrary","removeGame","programID","idl","metadata","address","PlayersDemo","isInitialized","setIsInitialized","setNickname","setAvatar","games","setGames","inputNickname","setInputNickname","inputAvatar","setInputAvatar","inputGame","setInputGame","useWallet","getProvider","opts","preflightCommitment","connection","Connection","Provider","fetchPlayerData","Program","players","playerAccountAddress","account","fetch","console","log","toString","useEffect","connected","e","error","className","onClick","width","margin","textAlign","length","placeholder","target","display","justifyContent","routes","component","wallets","getPhantomWallet","Pages","exact","App","basename","process","Grid","container","spacing","columns","item","xs","AppWithProvider","endpoint","autoConnect","accontPageSlice","createSlice","initialState","reducers","extraReducers","builder","gamesStorePageSlice","inventoryPageSlice","libraryPageSlice","marketplacePageSlice","store","configureStore","reducer","accountPage","accountPageReducer","gamesStorePage","gamesStorePageReducer","inventoryPage","inventoryPageReducer","libraryPage","libraryPageReducer","marketplacePage","marketplacePageReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3cc81d95.chunk.js","sourcesContent":["import React from \"react\"\nimport Tabs from '@mui/material/Tabs';\nimport LinkTab from '@mui/material/Tab';\n\nimport { Route } from \"../../routes\";\n\nconst NavigationPanel = ({ pages }: { pages: Route[] }) => {\n    const [value, setValue] = React.useState(0)\n\n    const handleChange = (_: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n    }\n\n    return <Tabs orientation=\"vertical\"\n        variant='fullWidth'\n        value={value}\n        onChange={handleChange}\n        // sx={{ borderRight: 1, borderColor: 'divider' }}\n    >\n        {pages.map(((x, i) =>\n            <div style={{marginTop: '20px'}}>\n                <LinkTab label={x.name} href={x.path} id={`vertical-tab-${i}`} />\n            </div>))}\n    </Tabs>\n}\n\n\n\nexport { NavigationPanel }\n","const AccountPage = () => {\n    return <div>Account page placeholder</div>\n}\n\nexport { AccountPage }","import { PublicKey } from '@solana/web3.js';\nimport { Program, web3 } from '@project-serum/anchor';\n\n\nexport const findPlayerGlobalAccountAddress = (userPublicKey: PublicKey, programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([userPublicKey.toBuffer()], programId);\n}\n\nexport const findPlayerGameAccountAddress = (userPublicKey: PublicKey, gameId: PublicKey, programId: PublicKey): Promise<[PublicKey, number]> => {\n    return PublicKey.findProgramAddress([userPublicKey.toBuffer(), gameId.toBuffer()], programId);\n}\n\nexport const initPlayer = async (program: Program, nickname: string = \"CryptoBuddy77\", avatar: PublicKey = PublicKey.default): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, nonce] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.initialize(nonce, nickname, avatar, {\n      accounts: {\n        playerAccount: playerAccount,\n        user: userPublicKey,\n        systemProgram: web3.SystemProgram.programId,\n      }\n    });\n}\n\nexport const updatePlayerNickname = async (program: Program, nickname: string): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.updateNickname(nickname, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const updatePlayerAvatar = async (program: Program, avatar: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.updateAvatar(avatar, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const addGameToLibrary = async (program: Program, gameAddress: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.addGame(gameAddress, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}\n\nexport const removeGameFromLibrary = async (program: Program, gameAddress: PublicKey): Promise<void> => {\n    const userPublicKey = program.provider.wallet.publicKey;\n    const programId = program.programId;\n    const [playerAccount, _] = await findPlayerGlobalAccountAddress(userPublicKey, programId);\n\n    await program.rpc.removeGame(gameAddress, {\n      accounts: {\n        playerAccount: playerAccount,\n      }\n    });\n}","import idl from '../idl.json'\nimport { players } from '../lib'\n\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { useEffect, useState } from 'react'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Program, Provider } from '@project-serum/anchor'\n\nconst programID = new PublicKey(idl.metadata.address)\n\nfunction PlayersDemo() {\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  const [nickname, setNickname] = useState('')\n  const [avatar, setAvatar] = useState(PublicKey.default)\n  const [games, setGames] = useState([])\n\n  const [inputNickname, setInputNickname] = useState('')\n  const [inputAvatar, setInputAvatar] = useState('')\n  const [inputGame, setInputGame] = useState('')\n  const wallet = useWallet()\n\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const network = \"http://127.0.0.1:8899\";\n    const opts = { preflightCommitment: \"processed\" }\n    const connection = new Connection(network, opts.preflightCommitment)\n\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment,\n    )\n    return provider;\n  }\n\n  async function fetchPlayerData() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      const [playerAccountAddress, _] = await players.findPlayerGlobalAccountAddress(wallet.publicKey, programID)\n      const account = await program.account.playerAccount.fetch(playerAccountAddress)\n\n      console.log(account)\n      setIsInitialized(true)\n      setNickname(account.nickname.toString())\n      setAvatar(account.avatar.toString())\n      setGames(account.games)\n    } catch (err) {\n      console.log(\"Player data fetching error: \", err)\n    }\n  }\n\n  async function initialize() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await players.initPlayer(program)\n      setIsInitialized(true)\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function updateNickname() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await players.updatePlayerNickname(program, inputNickname)\n      setInputNickname('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function updateAvatar() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await players.updatePlayerAvatar(program, new PublicKey(inputAvatar))\n      setInputAvatar('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function addGame() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await players.addGameToLibrary(program, new PublicKey(inputGame))\n      setInputGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  async function removeGame() {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n\n    try {\n      await players.removeGameFromLibrary(program, new PublicKey(inputGame))\n      setInputGame('')\n    } catch (err) {\n      console.log(\"Transaction error: \", err)\n    }\n\n    fetchPlayerData()\n  }\n\n  useEffect(() => {\n    if (wallet.connected) {\n      try {\n        fetchPlayerData()\n      } catch (e) {\n        if (isInitialized) {\n          console.error(e)\n        }\n      }\n    }\n  }, [wallet.connected])\n\n  return (\n    !wallet.connected\n      ?\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }}>\n        <WalletMultiButton />\n      </div>\n      :\n      <div className=\"App\">\n        <div>\n          {\n            !isInitialized && (<button onClick={initialize}>Initialize</button>)\n          }\n\n          {\n            isInitialized ? (\n              <div style={{ width: \"fit-content\", margin: \"0 auto\", textAlign: \"left\" }}>\n                <h1>Current player account state</h1>\n                <h3>Current nickname: </h3>{nickname}\n                <h3>Current avatar: </h3>{avatar.toString()}\n                <h3>Current games: </h3>\n                {games && games.length !== 0 ? <ul>{games.map((x, i) => <li key={i}>{x.toString()}</li>)}</ul> : \"No games so far\"}\n\n                <h1 style={{ marginTop: 60 }}>Edit</h1>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"New nickname (string, 32 bytes)\"\n                    onChange={e => setInputNickname(e.target.value)}\n                    value={inputNickname}\n                  />\n                  <button onClick={updateNickname}>Set nickname</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"New avatar (any Public key)\"\n                    onChange={e => setInputAvatar(e.target.value)}\n                    value={inputAvatar}\n                  />\n                  <button onClick={updateAvatar}>Set avatar</button>\n                </div>\n\n                <div>\n                  <input\n                    style={{ width: 200 }}\n                    placeholder=\"Game id (any Public key)\"\n                    onChange={e => setInputGame(e.target.value)}\n                    value={inputGame}\n                  />\n                  <button onClick={addGame}>Add game</button>\n                  <button onClick={removeGame}>Remove game</button>\n                </div>\n\n              </div>\n            ) : (\n              <h3>Please inialize your account.</h3>\n            )\n          }\n        </div>\n      </div>\n  )\n}\n\nexport default PlayersDemo\n","\nimport { AccountPage } from './pages/Account';\nimport { GamesStorePage } from './pages/GamesStore';\nimport { InventoryPage } from './pages/Inventory';\nimport { LibraryPage } from './pages/Library';\nimport { MarketplacePage } from './pages/Marketplace';\n\nimport PlayersDemo from './demos/Demo1_players'\n\nexport type Route = {\n    path: string;\n    name: string;\n    component: () => JSX.Element;\n}\n\nexport const routes: Route[] = [\n    {\n        path: \"/\",\n        name: \"Home\",\n        component: AccountPage\n    },\n    {\n        path: \"/account\",\n        name: \"Account\",\n        component: AccountPage\n    },\n    {\n        path: \"/gamesStore\",\n        name: \"Games Store\",\n        component: GamesStorePage\n    },\n    {\n        path: \"/inventory\",\n        name: \"Inventory\",\n        component: InventoryPage\n    },\n    {\n        path: \"/library\",\n        name: \"Library\",\n        component: LibraryPage\n    },\n    {\n        path: \"/marketplace\",\n        name: \"Marketplace\",\n        component: MarketplacePage\n    },\n    {\n        path: \"/demo1\",\n        name: \"Demo 1 (Players)\",\n        component: PlayersDemo\n    }\n]\n","const GamesStorePage = () => {\n    return <div>GamesStore page placeholder</div>\n}\n\nexport { GamesStorePage }","const InventoryPage = () => {\n    return <div>Inventory page placeholder</div>\n}\n\nexport { InventoryPage }","const LibraryPage = () => {\n    return <div>Library page placeholder</div>\n}\n\nexport { LibraryPage }","const MarketplacePage = () => {\n    return <div>Marketplace page placeholder</div>\n}\n\nexport { MarketplacePage }","import './App.css';\nimport { getPhantomWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletProvider, ConnectionProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { BrowserRouter, Switch, Route, HashRouter } from \"react-router-dom\";\nimport { Grid } from '@mui/material'\nimport { NavigationPanel } from './components/NavigationPanel';\nimport { Route as PageRoute, routes } from './routes'\n\nconst wallets = [getPhantomWallet()]\n\nconst Pages = ({ pages }: { pages: PageRoute[] }) => {\n  return (\n    <Switch>\n      {pages.map((x => <Route path={x.path} key={x.path} exact component={x.component} />))}\n    </Switch>)\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename={`/${process.env.PUBLIC_URL}`}>\n\n        <Grid container spacing={2} columns={5}>\n          <Grid item xs={1}>\n            <NavigationPanel pages={routes} />\n          </Grid>\n          <Grid item xs={4}>\n            <Pages pages={routes} />\n          </Grid>\n        </Grid>\n\n      </HashRouter>\n    </div>\n  );\n}\n\nconst AppWithProvider = () => (\n  <ConnectionProvider endpoint=\"http://127.0.0.1:8899\">\n    <WalletProvider wallets={wallets} autoConnect>\n      <WalletModalProvider>\n        <App />\n        {/* <PlayersDemo/> */}\n      </WalletModalProvider>\n    </WalletProvider>\n  </ConnectionProvider>\n)\n\n\nexport default AppWithProvider;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface AccountPageState {\n}\n\nconst initialState: AccountPageState = {\n};\n\nexport const accontPageSlice = createSlice({\n  name: 'accountPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default accontPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface GamesStorePageState {\n}\n\nconst initialState: GamesStorePageState = {\n};\n\nexport const gamesStorePageSlice = createSlice({\n  name: 'gamesStorePage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default gamesStorePageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface InventoryPageState {\n}\n\nconst initialState: InventoryPageState = {\n};\n\nexport const inventoryPageSlice = createSlice({\n  name: 'inventoryPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default inventoryPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface LibraryPageState {\n}\n\nconst initialState: LibraryPageState = {\n};\n\nexport const libraryPageSlice = createSlice({\n  name: 'libraryPage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default libraryPageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface MarketplacePageState {\n}\n\nconst initialState: MarketplacePageState = {\n};\n\nexport const marketplacePageSlice = createSlice({\n  name: 'marketplacePage',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n\n  },\n});\n\n\nexport default marketplacePageSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport accountPageReducer from '../pages/Account/store/accountSlice';\nimport gamesStorePageReducer from '../pages/GamesStore/store/gamesStoreSlice';\nimport inventoryPageReducer from '../pages/Inventory/store/inventorySlice';\nimport libraryPageReducer from '../pages/Library/store/librarySlice';\nimport marketplacePageReducer from '../pages/Marketplace/store/marketplaceSlice';\n\nexport const store = configureStore({\n  reducer: {\n    accountPage: accountPageReducer,\n    gamesStorePage: gamesStorePageReducer,\n    inventoryPage: inventoryPageReducer,\n    libraryPage: libraryPageReducer,\n    marketplacePage: marketplacePageReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}